{"ast":null,"code":"const SemVer = require('../classes/semver');\n\nconst Comparator = require('../classes/comparator');\n\nconst {\n  ANY\n} = Comparator;\n\nconst Range = require('../classes/range');\n\nconst satisfies = require('../functions/satisfies');\n\nconst gt = require('../functions/gt');\n\nconst lt = require('../functions/lt');\n\nconst lte = require('../functions/lte');\n\nconst gte = require('../functions/gte');\n\nconst outside = (version, range, hilo, options) => {\n  version = new SemVer(version, options);\n  range = new Range(range, options);\n  let gtfn, ltefn, ltfn, comp, ecomp;\n\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  } // If it satisfies the range it is not outside\n\n\n  if (satisfies(version, range, options)) {\n    return false;\n  } // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i];\n    let high = null;\n    let low = null;\n    comparators.forEach(comparator => {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0');\n      }\n\n      high = high || comparator;\n      low = low || comparator;\n\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator;\n      }\n    }); // If the edge version comparator has a operator then our version\n    // isn't outside it\n\n    if (high.operator === comp || high.operator === ecomp) {\n      return false;\n    } // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n\n\n    if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {\n      return false;\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = outside;","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/@ledgerhq/devices/node_modules/semver/ranges/outside.js"],"names":["SemVer","require","Comparator","ANY","Range","satisfies","gt","lt","lte","gte","outside","version","range","hilo","options","gtfn","ltefn","ltfn","comp","ecomp","TypeError","i","set","length","comparators","high","low","forEach","comparator","semver","operator","module","exports"],"mappings":"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","sourcesContent":["const SemVer = require('../classes/semver')\nconst Comparator = require('../classes/comparator')\nconst {ANY} = Comparator\nconst Range = require('../classes/range')\nconst satisfies = require('../functions/satisfies')\nconst gt = require('../functions/gt')\nconst lt = require('../functions/lt')\nconst lte = require('../functions/lte')\nconst gte = require('../functions/gte')\n\nconst outside = (version, range, hilo, options) => {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  let gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisfies the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let high = null\n    let low = null\n\n    comparators.forEach((comparator) => {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = outside\n"]},"metadata":{},"sourceType":"script"}