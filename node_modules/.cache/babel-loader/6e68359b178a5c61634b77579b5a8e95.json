{"ast":null,"code":"'use strict'; // base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\n\nvar _Buffer = require('safe-buffer').Buffer;\n\nfunction base(ALPHABET) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n\n  var BASE_MAP = new Uint8Array(256);\n\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n\n    BASE_MAP[xc] = i;\n  }\n\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n\n  function encode(source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) {\n      source = _Buffer.from(source);\n    }\n\n    if (!_Buffer.isBuffer(source)) {\n      throw new TypeError('Expected Buffer');\n    }\n\n    if (source.length === 0) {\n      return '';\n    } // Skip & count leading zeroes.\n\n\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    } // Allocate enough space in big-endian base58 representation.\n\n\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size); // Process the bytes.\n\n    while (pbegin !== pend) {\n      var carry = source[pbegin]; // Apply \"b58 = b58 * 256 + ch\".\n\n      var i = 0;\n\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n\n      length = i;\n      pbegin++;\n    } // Skip leading zeroes in base58 result.\n\n\n    var it2 = size - length;\n\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    } // Translate the result into a string.\n\n\n    var str = LEADER.repeat(zeroes);\n\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n\n    return str;\n  }\n\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n\n    if (source.length === 0) {\n      return _Buffer.alloc(0);\n    }\n\n    var psz = 0; // Skip leading spaces.\n\n    if (source[psz] === ' ') {\n      return;\n    } // Skip and count leading '1's.\n\n\n    var zeroes = 0;\n    var length = 0;\n\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    } // Allocate enough space in big-endian base256 representation.\n\n\n    var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.\n\n    var b256 = new Uint8Array(size); // Process the characters.\n\n    while (source[psz]) {\n      // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character\n\n      if (carry === 255) {\n        return;\n      }\n\n      var i = 0;\n\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n\n      length = i;\n      psz++;\n    } // Skip trailing spaces.\n\n\n    if (source[psz] === ' ') {\n      return;\n    } // Skip leading zeroes in b256.\n\n\n    var it4 = size - length;\n\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4));\n\n    vch.fill(0x00, 0, zeroes);\n    var j = zeroes;\n\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n\n    return vch;\n  }\n\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n\n    if (buffer) {\n      return buffer;\n    }\n\n    throw new Error('Non-base' + BASE + ' character');\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\n\nmodule.exports = base;","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/base-x/src/index.js"],"names":["_Buffer","require","Buffer","base","ALPHABET","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","encode","source","Array","isArray","from","isBuffer","zeroes","pbegin","pend","size","b58","carry","it1","Error","it2","str","repeat","decodeUnsafe","alloc","psz","b256","it3","it4","vch","allocUnsafe","fill","decode","string","buffer","module","exports"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBC,MAArC;;AACA,SAASC,IAAT,CAAeC,QAAf,EAAyB;AACvB,MAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAAE,UAAM,IAAIC,SAAJ,CAAc,mBAAd,CAAN;AAA0C;;AACxE,MAAIC,QAAQ,GAAG,IAAIC,UAAJ,CAAe,GAAf,CAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACF,MAA7B,EAAqCI,CAAC,EAAtC,EAA0C;AACxCF,IAAAA,QAAQ,CAACE,CAAD,CAAR,GAAc,GAAd;AACD;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACC,MAA7B,EAAqCK,CAAC,EAAtC,EAA0C;AACxC,QAAIC,CAAC,GAAGP,QAAQ,CAACQ,MAAT,CAAgBF,CAAhB,CAAR;AACA,QAAIG,EAAE,GAAGF,CAAC,CAACG,UAAF,CAAa,CAAb,CAAT;;AACA,QAAIP,QAAQ,CAACM,EAAD,CAAR,KAAiB,GAArB,EAA0B;AAAE,YAAM,IAAIP,SAAJ,CAAcK,CAAC,GAAG,eAAlB,CAAN;AAA0C;;AACtEJ,IAAAA,QAAQ,CAACM,EAAD,CAAR,GAAeH,CAAf;AACD;;AACD,MAAIK,IAAI,GAAGX,QAAQ,CAACC,MAApB;AACA,MAAIW,MAAM,GAAGZ,QAAQ,CAACQ,MAAT,CAAgB,CAAhB,CAAb;AACA,MAAIK,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASJ,IAAT,IAAiBG,IAAI,CAACC,GAAL,CAAS,GAAT,CAA9B,CAduB,CAcqB;;AAC5C,MAAIC,OAAO,GAAGF,IAAI,CAACC,GAAL,CAAS,GAAT,IAAgBD,IAAI,CAACC,GAAL,CAASJ,IAAT,CAA9B,CAfuB,CAesB;;AAC7C,WAASM,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,QAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,KAAyBA,MAAM,YAAYd,UAA/C,EAA2D;AAAEc,MAAAA,MAAM,GAAGtB,OAAO,CAACyB,IAAR,CAAaH,MAAb,CAAT;AAA+B;;AAC5F,QAAI,CAACtB,OAAO,CAAC0B,QAAR,CAAiBJ,MAAjB,CAAL,EAA+B;AAAE,YAAM,IAAIhB,SAAJ,CAAc,iBAAd,CAAN;AAAwC;;AACzE,QAAIgB,MAAM,CAACjB,MAAP,KAAkB,CAAtB,EAAyB;AAAE,aAAO,EAAP;AAAW,KAHf,CAInB;;;AACJ,QAAIsB,MAAM,GAAG,CAAb;AACA,QAAItB,MAAM,GAAG,CAAb;AACA,QAAIuB,MAAM,GAAG,CAAb;AACA,QAAIC,IAAI,GAAGP,MAAM,CAACjB,MAAlB;;AACA,WAAOuB,MAAM,KAAKC,IAAX,IAAmBP,MAAM,CAACM,MAAD,CAAN,KAAmB,CAA7C,EAAgD;AAC9CA,MAAAA,MAAM;AACND,MAAAA,MAAM;AACP,KAZsB,CAanB;;;AACJ,QAAIG,IAAI,GAAI,CAACD,IAAI,GAAGD,MAAR,IAAkBR,OAAlB,GAA4B,CAA7B,KAAoC,CAA/C;AACA,QAAIW,GAAG,GAAG,IAAIvB,UAAJ,CAAesB,IAAf,CAAV,CAfuB,CAgBnB;;AACJ,WAAOF,MAAM,KAAKC,IAAlB,EAAwB;AACtB,UAAIG,KAAK,GAAGV,MAAM,CAACM,MAAD,CAAlB,CADsB,CAEhB;;AACN,UAAIlB,CAAC,GAAG,CAAR;;AACA,WAAK,IAAIuB,GAAG,GAAGH,IAAI,GAAG,CAAtB,EAAyB,CAACE,KAAK,KAAK,CAAV,IAAetB,CAAC,GAAGL,MAApB,KAAgC4B,GAAG,KAAK,CAAC,CAAlE,EAAsEA,GAAG,IAAIvB,CAAC,EAA9E,EAAkF;AAChFsB,QAAAA,KAAK,IAAK,MAAMD,GAAG,CAACE,GAAD,CAAV,KAAqB,CAA9B;AACAF,QAAAA,GAAG,CAACE,GAAD,CAAH,GAAYD,KAAK,GAAGjB,IAAT,KAAmB,CAA9B;AACAiB,QAAAA,KAAK,GAAIA,KAAK,GAAGjB,IAAT,KAAmB,CAA3B;AACD;;AACD,UAAIiB,KAAK,KAAK,CAAd,EAAiB;AAAE,cAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;AAAmC;;AACtD7B,MAAAA,MAAM,GAAGK,CAAT;AACAkB,MAAAA,MAAM;AACP,KA7BsB,CA8BnB;;;AACJ,QAAIO,GAAG,GAAGL,IAAI,GAAGzB,MAAjB;;AACA,WAAO8B,GAAG,KAAKL,IAAR,IAAgBC,GAAG,CAACI,GAAD,CAAH,KAAa,CAApC,EAAuC;AACrCA,MAAAA,GAAG;AACJ,KAlCsB,CAmCnB;;;AACJ,QAAIC,GAAG,GAAGpB,MAAM,CAACqB,MAAP,CAAcV,MAAd,CAAV;;AACA,WAAOQ,GAAG,GAAGL,IAAb,EAAmB,EAAEK,GAArB,EAA0B;AAAEC,MAAAA,GAAG,IAAIhC,QAAQ,CAACQ,MAAT,CAAgBmB,GAAG,CAACI,GAAD,CAAnB,CAAP;AAAkC;;AAC9D,WAAOC,GAAP;AACD;;AACD,WAASE,YAAT,CAAuBhB,MAAvB,EAA+B;AAC7B,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAAE,YAAM,IAAIhB,SAAJ,CAAc,iBAAd,CAAN;AAAwC;;AAC1E,QAAIgB,MAAM,CAACjB,MAAP,KAAkB,CAAtB,EAAyB;AAAE,aAAOL,OAAO,CAACuC,KAAR,CAAc,CAAd,CAAP;AAAyB;;AACpD,QAAIC,GAAG,GAAG,CAAV,CAH6B,CAIzB;;AACJ,QAAIlB,MAAM,CAACkB,GAAD,CAAN,KAAgB,GAApB,EAAyB;AAAE;AAAQ,KALN,CAMzB;;;AACJ,QAAIb,MAAM,GAAG,CAAb;AACA,QAAItB,MAAM,GAAG,CAAb;;AACA,WAAOiB,MAAM,CAACkB,GAAD,CAAN,KAAgBxB,MAAvB,EAA+B;AAC7BW,MAAAA,MAAM;AACNa,MAAAA,GAAG;AACJ,KAZ4B,CAazB;;;AACJ,QAAIV,IAAI,GAAK,CAACR,MAAM,CAACjB,MAAP,GAAgBmC,GAAjB,IAAwBvB,MAAzB,GAAmC,CAApC,KAA2C,CAAtD,CAd6B,CAc2B;;AACxD,QAAIwB,IAAI,GAAG,IAAIjC,UAAJ,CAAesB,IAAf,CAAX,CAf6B,CAgBzB;;AACJ,WAAOR,MAAM,CAACkB,GAAD,CAAb,EAAoB;AACZ;AACN,UAAIR,KAAK,GAAGzB,QAAQ,CAACe,MAAM,CAACR,UAAP,CAAkB0B,GAAlB,CAAD,CAApB,CAFkB,CAGZ;;AACN,UAAIR,KAAK,KAAK,GAAd,EAAmB;AAAE;AAAQ;;AAC7B,UAAItB,CAAC,GAAG,CAAR;;AACA,WAAK,IAAIgC,GAAG,GAAGZ,IAAI,GAAG,CAAtB,EAAyB,CAACE,KAAK,KAAK,CAAV,IAAetB,CAAC,GAAGL,MAApB,KAAgCqC,GAAG,KAAK,CAAC,CAAlE,EAAsEA,GAAG,IAAIhC,CAAC,EAA9E,EAAkF;AAChFsB,QAAAA,KAAK,IAAKjB,IAAI,GAAG0B,IAAI,CAACC,GAAD,CAAZ,KAAuB,CAAhC;AACAD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAaV,KAAK,GAAG,GAAT,KAAkB,CAA9B;AACAA,QAAAA,KAAK,GAAIA,KAAK,GAAG,GAAT,KAAkB,CAA1B;AACD;;AACD,UAAIA,KAAK,KAAK,CAAd,EAAiB;AAAE,cAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;AAAmC;;AACtD7B,MAAAA,MAAM,GAAGK,CAAT;AACA8B,MAAAA,GAAG;AACJ,KA/B4B,CAgCzB;;;AACJ,QAAIlB,MAAM,CAACkB,GAAD,CAAN,KAAgB,GAApB,EAAyB;AAAE;AAAQ,KAjCN,CAkCzB;;;AACJ,QAAIG,GAAG,GAAGb,IAAI,GAAGzB,MAAjB;;AACA,WAAOsC,GAAG,KAAKb,IAAR,IAAgBW,IAAI,CAACE,GAAD,CAAJ,KAAc,CAArC,EAAwC;AACtCA,MAAAA,GAAG;AACJ;;AACD,QAAIC,GAAG,GAAG5C,OAAO,CAAC6C,WAAR,CAAoBlB,MAAM,IAAIG,IAAI,GAAGa,GAAX,CAA1B,CAAV;;AACAC,IAAAA,GAAG,CAACE,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkBnB,MAAlB;AACA,QAAIlB,CAAC,GAAGkB,MAAR;;AACA,WAAOgB,GAAG,KAAKb,IAAf,EAAqB;AACnBc,MAAAA,GAAG,CAACnC,CAAC,EAAF,CAAH,GAAWgC,IAAI,CAACE,GAAG,EAAJ,CAAf;AACD;;AACD,WAAOC,GAAP;AACD;;AACD,WAASG,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,QAAIC,MAAM,GAAGX,YAAY,CAACU,MAAD,CAAzB;;AACA,QAAIC,MAAJ,EAAY;AAAE,aAAOA,MAAP;AAAe;;AAC7B,UAAM,IAAIf,KAAJ,CAAU,aAAanB,IAAb,GAAoB,YAA9B,CAAN;AACD;;AACD,SAAO;AACLM,IAAAA,MAAM,EAAEA,MADH;AAELiB,IAAAA,YAAY,EAAEA,YAFT;AAGLS,IAAAA,MAAM,EAAEA;AAHH,GAAP;AAKD;;AACDG,MAAM,CAACC,OAAP,GAAiBhD,IAAjB","sourcesContent":["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n"]},"metadata":{},"sourceType":"script"}