{"ast":null,"code":"'use strict';\n\nfunction decode(input, alphabet) {\n  input = input.replace(new RegExp('=', 'g'), '');\n  const length = input.length;\n  let bits = 0;\n  let value = 0;\n  let index = 0;\n  const output = new Uint8Array(length * 5 / 8 | 0);\n\n  for (let i = 0; i < length; i++) {\n    value = value << 5 | alphabet.indexOf(input[i]);\n    bits += 5;\n\n    if (bits >= 8) {\n      output[index++] = value >>> bits - 8 & 255;\n      bits -= 8;\n    }\n  }\n\n  return output.buffer;\n}\n\nfunction encode(buffer, alphabet) {\n  const length = buffer.byteLength;\n  const view = new Uint8Array(buffer);\n  const padding = alphabet.indexOf('=') === alphabet.length - 1;\n\n  if (padding) {\n    alphabet = alphabet.substring(0, alphabet.length - 1);\n  }\n\n  let bits = 0;\n  let value = 0;\n  let output = '';\n\n  for (let i = 0; i < length; i++) {\n    value = value << 8 | view[i];\n    bits += 8;\n\n    while (bits >= 5) {\n      output += alphabet[value >>> bits - 5 & 31];\n      bits -= 5;\n    }\n  }\n\n  if (bits > 0) {\n    output += alphabet[value << 5 - bits & 31];\n  }\n\n  if (padding) {\n    while (output.length % 8 !== 0) {\n      output += '=';\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = function base32(alphabet) {\n  return {\n    encode(input) {\n      if (typeof input === 'string') {\n        return encode(Uint8Array.from(input), alphabet);\n      }\n\n      return encode(input, alphabet);\n    },\n\n    decode(input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base32 character');\n        }\n      }\n\n      return decode(input, alphabet);\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/multibase/src/base32.js"],"names":["decode","input","alphabet","replace","RegExp","length","bits","value","index","output","Uint8Array","i","indexOf","buffer","encode","byteLength","view","padding","substring","module","exports","base32","from","char","Error"],"mappings":"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","sourcesContent":["'use strict'\n\nfunction decode (input, alphabet) {\n  input = input.replace(new RegExp('=', 'g'), '')\n  const length = input.length\n\n  let bits = 0\n  let value = 0\n\n  let index = 0\n  const output = new Uint8Array((length * 5 / 8) | 0)\n\n  for (let i = 0; i < length; i++) {\n    value = (value << 5) | alphabet.indexOf(input[i])\n    bits += 5\n\n    if (bits >= 8) {\n      output[index++] = (value >>> (bits - 8)) & 255\n      bits -= 8\n    }\n  }\n\n  return output.buffer\n}\n\nfunction encode (buffer, alphabet) {\n  const length = buffer.byteLength\n  const view = new Uint8Array(buffer)\n  const padding = alphabet.indexOf('=') === alphabet.length - 1\n\n  if (padding) {\n    alphabet = alphabet.substring(0, alphabet.length - 1)\n  }\n\n  let bits = 0\n  let value = 0\n  let output = ''\n\n  for (let i = 0; i < length; i++) {\n    value = (value << 8) | view[i]\n    bits += 8\n\n    while (bits >= 5) {\n      output += alphabet[(value >>> (bits - 5)) & 31]\n      bits -= 5\n    }\n  }\n\n  if (bits > 0) {\n    output += alphabet[(value << (5 - bits)) & 31]\n  }\n\n  if (padding) {\n    while ((output.length % 8) !== 0) {\n      output += '='\n    }\n  }\n\n  return output\n}\n\nmodule.exports = function base32 (alphabet) {\n  return {\n    encode (input) {\n      if (typeof input === 'string') {\n        return encode(Uint8Array.from(input), alphabet)\n      }\n\n      return encode(input, alphabet)\n    },\n    decode (input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base32 character')\n        }\n      }\n\n      return decode(input, alphabet)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}