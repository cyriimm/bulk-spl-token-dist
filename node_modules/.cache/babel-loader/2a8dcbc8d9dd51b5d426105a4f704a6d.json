{"ast":null,"code":"import bs58 from 'bs58';\nimport { Message, SystemInstruction, SystemProgram } from '@solana/web3.js';\nimport { decodeInstruction, decodeTokenInstructionData, Market, MARKETS, TokenInstructions, SETTLE_FUNDS_BASE_WALLET_INDEX, SETTLE_FUNDS_QUOTE_WALLET_INDEX, NEW_ORDER_OPEN_ORDERS_INDEX, NEW_ORDER_OWNER_INDEX, NEW_ORDER_V3_OPEN_ORDERS_INDEX, NEW_ORDER_V3_OWNER_INDEX } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './tokens/instructions';\nconst RAYDIUM_STAKE_PROGRAM_ID = new PublicKey('EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q');\nconst RAYDIUM_LP_PROGRAM_ID = new PublicKey('RVKd61ztZW9GUwhRbbLoYVRE5Xf1B2tVscKqwZqXgEr');\nconst MANGO_PROGRAM_ID = new PublicKey('JD3bq9hGdy38PuWQ4h2YJpELmHVGPPfFSuFkpzAd9zfu');\nconst marketCache = {};\nlet marketCacheConnection = null;\nconst cacheDuration = 15 * 1000;\nexport const decodeMessage = async (connection, wallet, message) => {\n  // get message object\n  const transactionMessage = Message.from(message);\n\n  if (!(transactionMessage === null || transactionMessage === void 0 ? void 0 : transactionMessage.instructions) || !(transactionMessage === null || transactionMessage === void 0 ? void 0 : transactionMessage.accountKeys)) {\n    return;\n  } // get owned keys (used for security checks)\n\n\n  const publicKey = wallet.publicKey; // get instructions\n\n  const instructions = [];\n\n  for (var i = 0; i < transactionMessage.instructions.length; i++) {\n    let transactionInstruction = transactionMessage.instructions[i];\n    const instruction = await toInstruction(connection, publicKey, transactionMessage === null || transactionMessage === void 0 ? void 0 : transactionMessage.accountKeys, transactionInstruction, transactionMessage, i);\n    instructions.push({ ...instruction,\n      rawData: transactionInstruction === null || transactionInstruction === void 0 ? void 0 : transactionInstruction.data\n    });\n  }\n\n  return instructions;\n};\n\nconst toInstruction = async (connection, publicKey, accountKeys, instruction, transactionMessage, index) => {\n  if (!(instruction === null || instruction === void 0 ? void 0 : instruction.data) || !(instruction === null || instruction === void 0 ? void 0 : instruction.accounts) || !(instruction === null || instruction === void 0 ? void 0 : instruction.programIdIndex)) {\n    return;\n  } // get instruction data\n\n\n  const decoded = bs58.decode(instruction.data);\n  const programId = getAccountByIndex([instruction.programIdIndex], accountKeys, 0);\n\n  if (!programId) {\n    return null;\n  }\n\n  try {\n    if (programId.equals(SystemProgram.programId)) {\n      console.log('[' + index + '] Handled as system instruction');\n      return handleSystemInstruction(publicKey, instruction, accountKeys);\n    } else if (programId.equals(TOKEN_PROGRAM_ID)) {\n      console.log('[' + index + '] Handled as token instruction');\n      let decodedInstruction = decodeTokenInstruction(decoded);\n      return handleTokenInstruction(publicKey, instruction.accounts, decodedInstruction, accountKeys);\n    } else if (MARKETS.some(market => market.programId && market.programId.equals(programId))) {\n      console.log('[' + index + '] Handled as dex instruction');\n      let decodedInstruction = decodeInstruction(decoded);\n      return await handleDexInstruction(connection, instruction, accountKeys, decodedInstruction);\n    } else if (programId.equals(RAYDIUM_STAKE_PROGRAM_ID)) {\n      console.log('[' + index + '] Handled as raydium stake instruction');\n      const decodedInstruction = decodeStakeInstruction(decoded);\n      return await handleRayStakeInstruction(connection, instruction, accountKeys, decodedInstruction);\n    } else if (programId.equals(RAYDIUM_LP_PROGRAM_ID)) {\n      console.log('[' + index + '] Handled as raydium lp instruction');\n      const decodedInstruction = decodeLpInstruction(decoded);\n      return await handleRayLpInstruction(connection, instruction, accountKeys, decodedInstruction);\n    } else if (programId.equals(MANGO_PROGRAM_ID)) {\n      console.log('[' + index + '] Handled as mango markets instruction');\n      let decodedInstruction = decodeMangoInstruction(decoded);\n      return await handleMangoInstruction(connection, instruction, accountKeys, decodedInstruction);\n    } else {\n      return {\n        type: 'Unknown',\n        accountMetas: instruction.accounts.map(index => ({\n          publicKey: accountKeys[index],\n          isWritable: transactionMessage.isAccountWritable(index)\n        })),\n        programId\n      };\n    }\n  } catch {} // all decodings failed\n\n\n  console.log('[' + index + '] Failed, data: ' + JSON.stringify(decoded));\n  return;\n};\n\nconst handleMangoInstruction = async (connection, instruction, accountKeys, decodedInstruction) => {\n  // TODO\n  return {\n    type: 'mango'\n  };\n};\n\nconst handleRayStakeInstruction = async (connection, instruction, accountKeys, decodedInstruction) => {\n  // TODO\n  return {\n    type: 'raydium'\n  };\n};\n\nconst handleRayLpInstruction = async (connection, instruction, accountKeys, decodedInstruction) => {\n  // TODO\n  return {\n    type: 'raydium'\n  };\n};\n\nconst decodeMangoInstruction = () => {\n  // TODO\n  return undefined;\n};\n\nconst decodeStakeInstruction = () => {\n  // TODO\n  return undefined;\n};\n\nconst decodeLpInstruction = () => {\n  // TODO\n  return undefined;\n};\n\nconst handleDexInstruction = async (connection, instruction, accountKeys, decodedInstruction) => {\n  if (!decodedInstruction || Object.keys(decodedInstruction).length > 1) {\n    return;\n  }\n\n  const {\n    accounts,\n    programIdIndex\n  } = instruction; // get market info\n\n  const marketInfo = accountKeys && MARKETS.find(market => accountKeys.findIndex(accountKey => accountKey.equals(market.address)) > -1); // get market\n\n  let market, programIdAddress;\n\n  try {\n    const marketAddress = (marketInfo === null || marketInfo === void 0 ? void 0 : marketInfo.address) || getAccountByIndex(accounts, accountKeys, 0);\n    programIdAddress = (marketInfo === null || marketInfo === void 0 ? void 0 : marketInfo.programId) || getAccountByIndex([programIdIndex], accountKeys, 0);\n    const strAddress = marketAddress.toBase58();\n    const now = new Date().getTime();\n\n    if (!(connection === marketCacheConnection && strAddress in marketCache && now - marketCache[strAddress].ts < cacheDuration)) {\n      marketCacheConnection = connection;\n      console.log('Loading market', strAddress);\n      marketCache[strAddress] = {\n        market: await Market.load(connection, marketAddress, {}, programIdAddress),\n        ts: now\n      };\n    }\n\n    market = marketCache[strAddress].market;\n  } catch (e) {\n    console.log('Error loading market: ' + e.message);\n  } // get data\n\n\n  const type = Object.keys(decodedInstruction)[0];\n  let data = decodedInstruction[type];\n\n  if (type === 'settleFunds') {\n    const settleFundsData = getSettleFundsData(accounts, accountKeys);\n\n    if (!settleFundsData) {\n      return;\n    } else {\n      data = { ...data,\n        ...settleFundsData\n      };\n    }\n  } else if (type === 'newOrder') {\n    const newOrderData = getNewOrderData(accounts, accountKeys);\n    data = { ...data,\n      ...newOrderData\n    };\n  } else if (type === 'newOrderV3') {\n    const newOrderData = getNewOrderV3Data(accounts, accountKeys);\n    data = { ...data,\n      ...newOrderData\n    };\n  }\n\n  return {\n    type,\n    data,\n    market,\n    marketInfo\n  };\n};\n\nconst decodeTokenInstruction = bufferData => {\n  if (!bufferData) {\n    return;\n  }\n\n  if (bufferData.length === 1) {\n    if (bufferData[0] === 1) {\n      return {\n        initializeAccount: {}\n      };\n    } else if (bufferData[0] === 9) {\n      return {\n        closeAccount: {}\n      };\n    }\n  } else {\n    return decodeTokenInstructionData(bufferData);\n  }\n};\n\nconst handleSystemInstruction = (publicKey, instruction, accountKeys) => {\n  const {\n    programIdIndex,\n    accounts,\n    data\n  } = instruction;\n\n  if (!programIdIndex || !accounts || !data) {\n    return;\n  } // construct system instruction\n\n\n  const systemInstruction = {\n    programId: accountKeys[programIdIndex],\n    keys: accounts.map(accountIndex => ({\n      pubkey: accountKeys[accountIndex]\n    })),\n    data: bs58.decode(data)\n  }; // get layout\n\n  let decoded;\n  const type = SystemInstruction.decodeInstructionType(systemInstruction);\n\n  switch (type) {\n    case 'Create':\n      decoded = SystemInstruction.decodeCreateAccount(systemInstruction);\n      break;\n\n    case 'CreateWithSeed':\n      decoded = SystemInstruction.decodeCreateWithSeed(systemInstruction);\n      break;\n\n    case 'Allocate':\n      decoded = SystemInstruction.decodeAllocate(systemInstruction);\n      break;\n\n    case 'AllocateWithSeed':\n      decoded = SystemInstruction.decodeAllocateWithSeed(systemInstruction);\n      break;\n\n    case 'Assign':\n      decoded = SystemInstruction.decodeAssign(systemInstruction);\n      break;\n\n    case 'AssignWithSeed':\n      decoded = SystemInstruction.decodeAssignWithSeed(systemInstruction);\n      break;\n\n    case 'Transfer':\n      decoded = SystemInstruction.decodeTransfer(systemInstruction);\n      break;\n\n    case 'AdvanceNonceAccount':\n      decoded = SystemInstruction.decodeNonceAdvance(systemInstruction);\n      break;\n\n    case 'WithdrawNonceAccount':\n      decoded = SystemInstruction.decodeNonceWithdraw(systemInstruction);\n      break;\n\n    case 'InitializeNonceAccount':\n      decoded = SystemInstruction.decodeNonceInitialize(systemInstruction);\n      break;\n\n    case 'AuthorizeNonceAccount':\n      decoded = SystemInstruction.decodeNonceAuthorize(systemInstruction);\n      break;\n\n    default:\n      return;\n  }\n\n  if (!decoded || decoded.fromPubkey && !publicKey.equals(decoded.fromPubkey)) {\n    return;\n  }\n\n  return {\n    type: 'system' + type,\n    data: decoded\n  };\n};\n\nconst handleTokenInstruction = (publicKey, accounts, decodedInstruction, accountKeys) => {\n  if (!decodedInstruction || Object.keys(decodedInstruction).length > 1) {\n    return;\n  } // get data\n\n\n  const type = Object.keys(decodedInstruction)[0];\n  let data = decodedInstruction[type];\n\n  if (type === 'initializeAccount') {\n    const initializeAccountData = getInitializeAccountData(publicKey, accounts, accountKeys);\n    data = { ...data,\n      ...initializeAccountData\n    };\n  } else if (type === 'transfer') {\n    const transferData = getTransferData(publicKey, accounts, accountKeys);\n    data = { ...data,\n      ...transferData\n    };\n  } else if (type === 'closeAccount') {\n    const closeAccountData = getCloseAccountData(publicKey, accounts, accountKeys);\n    data = { ...data,\n      ...closeAccountData\n    };\n  }\n\n  return {\n    type,\n    data\n  };\n};\n\nconst getNewOrderData = (accounts, accountKeys) => {\n  const openOrdersPubkey = getAccountByIndex(accounts, accountKeys, NEW_ORDER_OPEN_ORDERS_INDEX);\n  const ownerPubkey = getAccountByIndex(accounts, accountKeys, NEW_ORDER_OWNER_INDEX);\n  return {\n    openOrdersPubkey,\n    ownerPubkey\n  };\n};\n\nconst getNewOrderV3Data = (accounts, accountKeys) => {\n  const openOrdersPubkey = getAccountByIndex(accounts, accountKeys, NEW_ORDER_V3_OPEN_ORDERS_INDEX);\n  const ownerPubkey = getAccountByIndex(accounts, accountKeys, NEW_ORDER_V3_OWNER_INDEX);\n  return {\n    openOrdersPubkey,\n    ownerPubkey\n  };\n};\n\nconst getSettleFundsData = (accounts, accountKeys) => {\n  const basePubkey = getAccountByIndex(accounts, accountKeys, SETTLE_FUNDS_BASE_WALLET_INDEX);\n  const quotePubkey = getAccountByIndex(accounts, accountKeys, SETTLE_FUNDS_QUOTE_WALLET_INDEX);\n\n  if (!basePubkey || !quotePubkey) {\n    return;\n  }\n\n  return {\n    basePubkey,\n    quotePubkey\n  };\n};\n\nconst getTransferData = (publicKey, accounts, accountKeys) => {\n  const sourcePubkey = getAccountByIndex(accounts, accountKeys, TokenInstructions.TRANSFER_SOURCE_INDEX);\n  const destinationPubkey = getAccountByIndex(accounts, accountKeys, TokenInstructions.TRANSFER_DESTINATION_INDEX);\n  const ownerPubkey = getAccountByIndex(accounts, accountKeys, TokenInstructions.TRANSFER_OWNER_INDEX);\n\n  if (!ownerPubkey || !publicKey.equals(ownerPubkey)) {\n    return;\n  }\n\n  return {\n    sourcePubkey,\n    destinationPubkey,\n    ownerPubkey\n  };\n};\n\nconst getInitializeAccountData = (publicKey, accounts, accountKeys) => {\n  const accountPubkey = getAccountByIndex(accounts, accountKeys, TokenInstructions.INITIALIZE_ACCOUNT_ACCOUNT_INDEX);\n  const mintPubkey = getAccountByIndex(accounts, accountKeys, TokenInstructions.INITIALIZE_ACCOUNT_MINT_INDEX);\n  const ownerPubkey = getAccountByIndex(accounts, accountKeys, TokenInstructions.INITIALIZE_ACCOUNT_OWNER_INDEX);\n\n  if (!ownerPubkey || !publicKey.equals(ownerPubkey)) {\n    return;\n  }\n\n  return {\n    accountPubkey,\n    mintPubkey,\n    ownerPubkey\n  };\n};\n\nconst getCloseAccountData = (publicKey, accounts, accountKeys) => {\n  const sourcePubkey = getAccountByIndex(accounts, accountKeys, TokenInstructions.TRANSFER_SOURCE_INDEX);\n  const destinationPubkey = getAccountByIndex(accounts, accountKeys, TokenInstructions.TRANSFER_DESTINATION_INDEX);\n  const ownerPubkey = getAccountByIndex(accounts, accountKeys, TokenInstructions.TRANSFER_OWNER_INDEX);\n\n  if (!ownerPubkey || !publicKey.equals(ownerPubkey)) {\n    return;\n  }\n\n  return {\n    sourcePubkey,\n    destinationPubkey,\n    ownerPubkey\n  };\n};\n\nconst getAccountByIndex = (accounts, accountKeys, accountIndex) => {\n  const index = accounts.length > accountIndex && accounts[accountIndex];\n  return (accountKeys === null || accountKeys === void 0 ? void 0 : accountKeys.length) > index && accountKeys[index];\n};","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/transactions.js"],"names":["bs58","Message","SystemInstruction","SystemProgram","decodeInstruction","decodeTokenInstructionData","Market","MARKETS","TokenInstructions","SETTLE_FUNDS_BASE_WALLET_INDEX","SETTLE_FUNDS_QUOTE_WALLET_INDEX","NEW_ORDER_OPEN_ORDERS_INDEX","NEW_ORDER_OWNER_INDEX","NEW_ORDER_V3_OPEN_ORDERS_INDEX","NEW_ORDER_V3_OWNER_INDEX","PublicKey","TOKEN_PROGRAM_ID","RAYDIUM_STAKE_PROGRAM_ID","RAYDIUM_LP_PROGRAM_ID","MANGO_PROGRAM_ID","marketCache","marketCacheConnection","cacheDuration","decodeMessage","connection","wallet","message","transactionMessage","from","instructions","accountKeys","publicKey","i","length","transactionInstruction","instruction","toInstruction","push","rawData","data","index","accounts","programIdIndex","decoded","decode","programId","getAccountByIndex","equals","console","log","handleSystemInstruction","decodedInstruction","decodeTokenInstruction","handleTokenInstruction","some","market","handleDexInstruction","decodeStakeInstruction","handleRayStakeInstruction","decodeLpInstruction","handleRayLpInstruction","decodeMangoInstruction","handleMangoInstruction","type","accountMetas","map","isWritable","isAccountWritable","JSON","stringify","undefined","Object","keys","marketInfo","find","findIndex","accountKey","address","programIdAddress","marketAddress","strAddress","toBase58","now","Date","getTime","ts","load","e","settleFundsData","getSettleFundsData","newOrderData","getNewOrderData","getNewOrderV3Data","bufferData","initializeAccount","closeAccount","systemInstruction","accountIndex","pubkey","decodeInstructionType","decodeCreateAccount","decodeCreateWithSeed","decodeAllocate","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeTransfer","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceInitialize","decodeNonceAuthorize","fromPubkey","initializeAccountData","getInitializeAccountData","transferData","getTransferData","closeAccountData","getCloseAccountData","openOrdersPubkey","ownerPubkey","basePubkey","quotePubkey","sourcePubkey","TRANSFER_SOURCE_INDEX","destinationPubkey","TRANSFER_DESTINATION_INDEX","TRANSFER_OWNER_INDEX","accountPubkey","INITIALIZE_ACCOUNT_ACCOUNT_INDEX","mintPubkey","INITIALIZE_ACCOUNT_MINT_INDEX","INITIALIZE_ACCOUNT_OWNER_INDEX"],"mappings":"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","sourcesContent":["import bs58 from 'bs58';\nimport { Message, SystemInstruction, SystemProgram } from '@solana/web3.js';\nimport {\n  decodeInstruction,\n  decodeTokenInstructionData,\n  Market,\n  MARKETS,\n  TokenInstructions,\n  SETTLE_FUNDS_BASE_WALLET_INDEX,\n  SETTLE_FUNDS_QUOTE_WALLET_INDEX,\n  NEW_ORDER_OPEN_ORDERS_INDEX,\n  NEW_ORDER_OWNER_INDEX,\n  NEW_ORDER_V3_OPEN_ORDERS_INDEX,\n  NEW_ORDER_V3_OWNER_INDEX,\n} from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './tokens/instructions';\n\nconst RAYDIUM_STAKE_PROGRAM_ID = new PublicKey(\n  'EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q',\n);\nconst RAYDIUM_LP_PROGRAM_ID = new PublicKey(\n  'RVKd61ztZW9GUwhRbbLoYVRE5Xf1B2tVscKqwZqXgEr',\n);\n\nconst MANGO_PROGRAM_ID = new PublicKey(\n  'JD3bq9hGdy38PuWQ4h2YJpELmHVGPPfFSuFkpzAd9zfu',\n);\n\nconst marketCache = {};\nlet marketCacheConnection = null;\nconst cacheDuration = 15 * 1000;\n\nexport const decodeMessage = async (connection, wallet, message) => {\n  // get message object\n  const transactionMessage = Message.from(message);\n  if (!transactionMessage?.instructions || !transactionMessage?.accountKeys) {\n    return;\n  }\n\n  // get owned keys (used for security checks)\n  const publicKey = wallet.publicKey;\n\n  // get instructions\n  const instructions = [];\n  for (var i = 0; i < transactionMessage.instructions.length; i++) {\n    let transactionInstruction = transactionMessage.instructions[i];\n    const instruction = await toInstruction(\n      connection,\n      publicKey,\n      transactionMessage?.accountKeys,\n      transactionInstruction,\n      transactionMessage,\n      i,\n    );\n    instructions.push({\n      ...instruction,\n      rawData: transactionInstruction?.data,\n    });\n  }\n  return instructions;\n};\n\nconst toInstruction = async (\n  connection,\n  publicKey,\n  accountKeys,\n  instruction,\n  transactionMessage,\n  index,\n) => {\n  if (\n    !instruction?.data ||\n    !instruction?.accounts ||\n    !instruction?.programIdIndex\n  ) {\n    return;\n  }\n\n  // get instruction data\n  const decoded = bs58.decode(instruction.data);\n\n  const programId = getAccountByIndex(\n    [instruction.programIdIndex],\n    accountKeys,\n    0,\n  );\n  if (!programId) {\n    return null;\n  }\n\n  try {\n    if (programId.equals(SystemProgram.programId)) {\n      console.log('[' + index + '] Handled as system instruction');\n      return handleSystemInstruction(publicKey, instruction, accountKeys);\n    } else if (programId.equals(TOKEN_PROGRAM_ID)) {\n      console.log('[' + index + '] Handled as token instruction');\n      let decodedInstruction = decodeTokenInstruction(decoded);\n      return handleTokenInstruction(\n        publicKey,\n        instruction.accounts,\n        decodedInstruction,\n        accountKeys,\n      );\n    } else if (\n      MARKETS.some(\n        (market) => market.programId && market.programId.equals(programId),\n      )\n    ) {\n      console.log('[' + index + '] Handled as dex instruction');\n      let decodedInstruction = decodeInstruction(decoded);\n      return await handleDexInstruction(\n        connection,\n        instruction,\n        accountKeys,\n        decodedInstruction,\n      );\n    } else if (programId.equals(RAYDIUM_STAKE_PROGRAM_ID)) {\n      console.log('[' + index + '] Handled as raydium stake instruction');\n      const decodedInstruction = decodeStakeInstruction(decoded);\n      return await handleRayStakeInstruction(\n        connection,\n        instruction,\n        accountKeys,\n        decodedInstruction,\n      );\n    } else if (programId.equals(RAYDIUM_LP_PROGRAM_ID)) {\n      console.log('[' + index + '] Handled as raydium lp instruction');\n      const decodedInstruction = decodeLpInstruction(decoded);\n      return await handleRayLpInstruction(\n        connection,\n        instruction,\n        accountKeys,\n        decodedInstruction,\n      );\n    } else if (programId.equals(MANGO_PROGRAM_ID)) {\n      console.log('[' + index + '] Handled as mango markets instruction');\n      let decodedInstruction = decodeMangoInstruction(decoded);\n      return await handleMangoInstruction(\n        connection,\n        instruction,\n        accountKeys,\n        decodedInstruction,\n      );\n    } else {\n      return {\n        type: 'Unknown',\n        accountMetas: instruction.accounts.map((index) => ({\n          publicKey: accountKeys[index],\n          isWritable: transactionMessage.isAccountWritable(index),\n        })),\n        programId,\n      };\n    }\n  } catch {}\n\n  // all decodings failed\n  console.log('[' + index + '] Failed, data: ' + JSON.stringify(decoded));\n\n  return;\n};\n\nconst handleMangoInstruction = async (\n  connection,\n  instruction,\n  accountKeys,\n  decodedInstruction,\n) => {\n  // TODO\n  return {\n    type: 'mango',\n  };\n};\n\nconst handleRayStakeInstruction = async (\n  connection,\n  instruction,\n  accountKeys,\n  decodedInstruction,\n) => {\n  // TODO\n  return {\n    type: 'raydium',\n  };\n};\n\nconst handleRayLpInstruction = async (\n  connection,\n  instruction,\n  accountKeys,\n  decodedInstruction,\n) => {\n  // TODO\n  return {\n    type: 'raydium',\n  };\n};\n\nconst decodeMangoInstruction = () => {\n  // TODO\n  return undefined;\n};\n\nconst decodeStakeInstruction = () => {\n  // TODO\n  return undefined;\n};\n\nconst decodeLpInstruction = () => {\n  // TODO\n  return undefined;\n};\n\nconst handleDexInstruction = async (\n  connection,\n  instruction,\n  accountKeys,\n  decodedInstruction,\n) => {\n  if (!decodedInstruction || Object.keys(decodedInstruction).length > 1) {\n    return;\n  }\n\n  const { accounts, programIdIndex } = instruction;\n\n  // get market info\n  const marketInfo =\n    accountKeys &&\n    MARKETS.find(\n      (market) =>\n        accountKeys.findIndex((accountKey) =>\n          accountKey.equals(market.address),\n        ) > -1,\n    );\n\n  // get market\n  let market, programIdAddress;\n  try {\n    const marketAddress =\n      marketInfo?.address || getAccountByIndex(accounts, accountKeys, 0);\n    programIdAddress =\n      marketInfo?.programId ||\n      getAccountByIndex([programIdIndex], accountKeys, 0);\n    const strAddress = marketAddress.toBase58();\n    const now = new Date().getTime();\n    if (\n      !(\n        connection === marketCacheConnection &&\n        strAddress in marketCache &&\n        now - marketCache[strAddress].ts < cacheDuration\n      )\n    ) {\n      marketCacheConnection = connection;\n      console.log('Loading market', strAddress);\n      marketCache[strAddress] = {\n        market: await Market.load(\n          connection,\n          marketAddress,\n          {},\n          programIdAddress,\n        ),\n        ts: now,\n      };\n    }\n    market = marketCache[strAddress].market;\n  } catch (e) {\n    console.log('Error loading market: ' + e.message);\n  }\n\n  // get data\n  const type = Object.keys(decodedInstruction)[0];\n  let data = decodedInstruction[type];\n  if (type === 'settleFunds') {\n    const settleFundsData = getSettleFundsData(accounts, accountKeys);\n    if (!settleFundsData) {\n      return;\n    } else {\n      data = { ...data, ...settleFundsData };\n    }\n  } else if (type === 'newOrder') {\n    const newOrderData = getNewOrderData(accounts, accountKeys);\n    data = { ...data, ...newOrderData };\n  } else if (type === 'newOrderV3') {\n    const newOrderData = getNewOrderV3Data(accounts, accountKeys);\n    data = { ...data, ...newOrderData };\n  }\n  return {\n    type,\n    data,\n    market,\n    marketInfo,\n  };\n};\n\nconst decodeTokenInstruction = (bufferData) => {\n  if (!bufferData) {\n    return;\n  }\n\n  if (bufferData.length === 1) {\n    if (bufferData[0] === 1) {\n      return { initializeAccount: {} };\n    } else if (bufferData[0] === 9) {\n      return { closeAccount: {} };\n    }\n  } else {\n    return decodeTokenInstructionData(bufferData);\n  }\n};\n\nconst handleSystemInstruction = (publicKey, instruction, accountKeys) => {\n  const { programIdIndex, accounts, data } = instruction;\n  if (!programIdIndex || !accounts || !data) {\n    return;\n  }\n\n  // construct system instruction\n  const systemInstruction = {\n    programId: accountKeys[programIdIndex],\n    keys: accounts.map((accountIndex) => ({\n      pubkey: accountKeys[accountIndex],\n    })),\n    data: bs58.decode(data),\n  };\n\n  // get layout\n  let decoded;\n  const type = SystemInstruction.decodeInstructionType(systemInstruction);\n  switch (type) {\n    case 'Create':\n      decoded = SystemInstruction.decodeCreateAccount(systemInstruction);\n      break;\n    case 'CreateWithSeed':\n      decoded = SystemInstruction.decodeCreateWithSeed(systemInstruction);\n      break;\n    case 'Allocate':\n      decoded = SystemInstruction.decodeAllocate(systemInstruction);\n      break;\n    case 'AllocateWithSeed':\n      decoded = SystemInstruction.decodeAllocateWithSeed(systemInstruction);\n      break;\n    case 'Assign':\n      decoded = SystemInstruction.decodeAssign(systemInstruction);\n      break;\n    case 'AssignWithSeed':\n      decoded = SystemInstruction.decodeAssignWithSeed(systemInstruction);\n      break;\n    case 'Transfer':\n      decoded = SystemInstruction.decodeTransfer(systemInstruction);\n      break;\n    case 'AdvanceNonceAccount':\n      decoded = SystemInstruction.decodeNonceAdvance(systemInstruction);\n      break;\n    case 'WithdrawNonceAccount':\n      decoded = SystemInstruction.decodeNonceWithdraw(systemInstruction);\n      break;\n    case 'InitializeNonceAccount':\n      decoded = SystemInstruction.decodeNonceInitialize(systemInstruction);\n      break;\n    case 'AuthorizeNonceAccount':\n      decoded = SystemInstruction.decodeNonceAuthorize(systemInstruction);\n      break;\n    default:\n      return;\n  }\n\n  if (\n    !decoded ||\n    (decoded.fromPubkey && !publicKey.equals(decoded.fromPubkey))\n  ) {\n    return;\n  }\n\n  return {\n    type: 'system' + type,\n    data: decoded,\n  };\n};\n\nconst handleTokenInstruction = (\n  publicKey,\n  accounts,\n  decodedInstruction,\n  accountKeys,\n) => {\n  if (!decodedInstruction || Object.keys(decodedInstruction).length > 1) {\n    return;\n  }\n\n  // get data\n  const type = Object.keys(decodedInstruction)[0];\n  let data = decodedInstruction[type];\n  if (type === 'initializeAccount') {\n    const initializeAccountData = getInitializeAccountData(\n      publicKey,\n      accounts,\n      accountKeys,\n    );\n    data = { ...data, ...initializeAccountData };\n  } else if (type === 'transfer') {\n    const transferData = getTransferData(publicKey, accounts, accountKeys);\n    data = { ...data, ...transferData };\n  } else if (type === 'closeAccount') {\n    const closeAccountData = getCloseAccountData(\n      publicKey,\n      accounts,\n      accountKeys,\n    );\n    data = { ...data, ...closeAccountData };\n  }\n\n  return {\n    type,\n    data,\n  };\n};\n\nconst getNewOrderData = (accounts, accountKeys) => {\n  const openOrdersPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    NEW_ORDER_OPEN_ORDERS_INDEX,\n  );\n  const ownerPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    NEW_ORDER_OWNER_INDEX,\n  );\n  return { openOrdersPubkey, ownerPubkey };\n};\n\nconst getNewOrderV3Data = (accounts, accountKeys) => {\n  const openOrdersPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    NEW_ORDER_V3_OPEN_ORDERS_INDEX,\n  );\n  const ownerPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    NEW_ORDER_V3_OWNER_INDEX,\n  );\n  return { openOrdersPubkey, ownerPubkey };\n};\n\nconst getSettleFundsData = (accounts, accountKeys) => {\n  const basePubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    SETTLE_FUNDS_BASE_WALLET_INDEX,\n  );\n\n  const quotePubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    SETTLE_FUNDS_QUOTE_WALLET_INDEX,\n  );\n\n  if (!basePubkey || !quotePubkey) {\n    return;\n  }\n\n  return { basePubkey, quotePubkey };\n};\n\nconst getTransferData = (publicKey, accounts, accountKeys) => {\n  const sourcePubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_SOURCE_INDEX,\n  );\n\n  const destinationPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_DESTINATION_INDEX,\n  );\n\n  const ownerPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_OWNER_INDEX,\n  );\n\n  if (!ownerPubkey || !publicKey.equals(ownerPubkey)) {\n    return;\n  }\n\n  return { sourcePubkey, destinationPubkey, ownerPubkey };\n};\n\nconst getInitializeAccountData = (publicKey, accounts, accountKeys) => {\n  const accountPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.INITIALIZE_ACCOUNT_ACCOUNT_INDEX,\n  );\n\n  const mintPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.INITIALIZE_ACCOUNT_MINT_INDEX,\n  );\n\n  const ownerPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.INITIALIZE_ACCOUNT_OWNER_INDEX,\n  );\n\n  if (!ownerPubkey || !publicKey.equals(ownerPubkey)) {\n    return;\n  }\n\n  return { accountPubkey, mintPubkey, ownerPubkey };\n};\n\nconst getCloseAccountData = (publicKey, accounts, accountKeys) => {\n  const sourcePubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_SOURCE_INDEX,\n  );\n\n  const destinationPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_DESTINATION_INDEX,\n  );\n\n  const ownerPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_OWNER_INDEX,\n  );\n\n  if (!ownerPubkey || !publicKey.equals(ownerPubkey)) {\n    return;\n  }\n\n  return { sourcePubkey, destinationPubkey, ownerPubkey };\n};\n\nconst getAccountByIndex = (accounts, accountKeys, accountIndex) => {\n  const index = accounts.length > accountIndex && accounts[accountIndex];\n  return accountKeys?.length > index && accountKeys[index];\n};\n"]},"metadata":{},"sourceType":"module"}