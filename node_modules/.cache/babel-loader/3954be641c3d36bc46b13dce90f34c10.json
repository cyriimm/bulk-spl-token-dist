{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst createHash = require('create-hash');\n\nconst createHmac = require('create-hmac');\n\nfunction hash160(buffer) {\n  const sha256Hash = createHash('sha256').update(buffer).digest();\n\n  try {\n    return createHash('rmd160').update(sha256Hash).digest();\n  } catch (err) {\n    return createHash('ripemd160').update(sha256Hash).digest();\n  }\n}\n\nexports.hash160 = hash160;\n\nfunction hmacSHA512(key, data) {\n  return createHmac('sha512', key).update(data).digest();\n}\n\nexports.hmacSHA512 = hmacSHA512;","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/bip32/src/crypto.js"],"names":["Object","defineProperty","exports","value","createHash","require","createHmac","hash160","buffer","sha256Hash","update","digest","err","hmacSHA512","key","data"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,SAASE,OAAT,CAAiBC,MAAjB,EAAyB;AACrB,QAAMC,UAAU,GAAGL,UAAU,CAAC,QAAD,CAAV,CACdM,MADc,CACPF,MADO,EAEdG,MAFc,EAAnB;;AAGA,MAAI;AACA,WAAOP,UAAU,CAAC,QAAD,CAAV,CACFM,MADE,CACKD,UADL,EAEFE,MAFE,EAAP;AAGH,GAJD,CAKA,OAAOC,GAAP,EAAY;AACR,WAAOR,UAAU,CAAC,WAAD,CAAV,CACFM,MADE,CACKD,UADL,EAEFE,MAFE,EAAP;AAGH;AACJ;;AACDT,OAAO,CAACK,OAAR,GAAkBA,OAAlB;;AACA,SAASM,UAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAC3B,SAAOT,UAAU,CAAC,QAAD,EAAWQ,GAAX,CAAV,CACFJ,MADE,CACKK,IADL,EAEFJ,MAFE,EAAP;AAGH;;AACDT,OAAO,CAACW,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst createHash = require('create-hash');\nconst createHmac = require('create-hmac');\nfunction hash160(buffer) {\n    const sha256Hash = createHash('sha256')\n        .update(buffer)\n        .digest();\n    try {\n        return createHash('rmd160')\n            .update(sha256Hash)\n            .digest();\n    }\n    catch (err) {\n        return createHash('ripemd160')\n            .update(sha256Hash)\n            .digest();\n    }\n}\nexports.hash160 = hash160;\nfunction hmacSHA512(key, data) {\n    return createHmac('sha512', key)\n        .update(data)\n        .digest();\n}\nexports.hmacSHA512 = hmacSHA512;\n"]},"metadata":{},"sourceType":"script"}