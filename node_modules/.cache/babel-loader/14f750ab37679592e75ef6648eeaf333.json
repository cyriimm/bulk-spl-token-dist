{"ast":null,"code":"'use strict';\n\nvar base58 = require('bs58');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode(payload) {\n    var checksum = checksumFn(payload);\n    return base58.encode(Buffer.concat([payload, checksum], payload.length + 4));\n  }\n\n  function decodeRaw(buffer) {\n    var payload = buffer.slice(0, -4);\n    var checksum = buffer.slice(-4);\n    var newChecksum = checksumFn(payload);\n    if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;\n    return payload;\n  } // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n\n\n  function decodeUnsafe(string) {\n    var buffer = base58.decodeUnsafe(string);\n    if (!buffer) return;\n    return decodeRaw(buffer);\n  }\n\n  function decode(string) {\n    var buffer = base58.decode(string);\n    var payload = decodeRaw(buffer, checksumFn);\n    if (!payload) throw new Error('Invalid checksum');\n    return payload;\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  };\n};","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/bs58check/base.js"],"names":["base58","require","Buffer","module","exports","checksumFn","encode","payload","checksum","concat","length","decodeRaw","buffer","slice","newChecksum","decodeUnsafe","string","decode","Error"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,MAApC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,UAAV,EAAsB;AACrC;AACA,WAASC,MAAT,CAAiBC,OAAjB,EAA0B;AACxB,QAAIC,QAAQ,GAAGH,UAAU,CAACE,OAAD,CAAzB;AAEA,WAAOP,MAAM,CAACM,MAAP,CAAcJ,MAAM,CAACO,MAAP,CAAc,CACjCF,OADiC,EAEjCC,QAFiC,CAAd,EAGlBD,OAAO,CAACG,MAAR,GAAiB,CAHC,CAAd,CAAP;AAID;;AAED,WAASC,SAAT,CAAoBC,MAApB,EAA4B;AAC1B,QAAIL,OAAO,GAAGK,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAd;AACA,QAAIL,QAAQ,GAAGI,MAAM,CAACC,KAAP,CAAa,CAAC,CAAd,CAAf;AACA,QAAIC,WAAW,GAAGT,UAAU,CAACE,OAAD,CAA5B;AAEA,QAAIC,QAAQ,CAAC,CAAD,CAAR,GAAcM,WAAW,CAAC,CAAD,CAAzB,GACAN,QAAQ,CAAC,CAAD,CAAR,GAAcM,WAAW,CAAC,CAAD,CADzB,GAEAN,QAAQ,CAAC,CAAD,CAAR,GAAcM,WAAW,CAAC,CAAD,CAFzB,GAGAN,QAAQ,CAAC,CAAD,CAAR,GAAcM,WAAW,CAAC,CAAD,CAH7B,EAGkC;AAElC,WAAOP,OAAP;AACD,GAtBoC,CAwBrC;;;AACA,WAASQ,YAAT,CAAuBC,MAAvB,EAA+B;AAC7B,QAAIJ,MAAM,GAAGZ,MAAM,CAACe,YAAP,CAAoBC,MAApB,CAAb;AACA,QAAI,CAACJ,MAAL,EAAa;AAEb,WAAOD,SAAS,CAACC,MAAD,CAAhB;AACD;;AAED,WAASK,MAAT,CAAiBD,MAAjB,EAAyB;AACvB,QAAIJ,MAAM,GAAGZ,MAAM,CAACiB,MAAP,CAAcD,MAAd,CAAb;AACA,QAAIT,OAAO,GAAGI,SAAS,CAACC,MAAD,EAASP,UAAT,CAAvB;AACA,QAAI,CAACE,OAAL,EAAc,MAAM,IAAIW,KAAJ,CAAU,kBAAV,CAAN;AACd,WAAOX,OAAP;AACD;;AAED,SAAO;AACLD,IAAAA,MAAM,EAAEA,MADH;AAELW,IAAAA,MAAM,EAAEA,MAFH;AAGLF,IAAAA,YAAY,EAAEA;AAHT,GAAP;AAKD,CA5CD","sourcesContent":["'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n"]},"metadata":{},"sourceType":"script"}