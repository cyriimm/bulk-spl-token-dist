{"ast":null,"code":"var bs58check = require('bs58check');\n\nfunction decodeRaw(buffer, version) {\n  // check version only if defined\n  if (version !== undefined && buffer[0] !== version) throw new Error('Invalid network version'); // uncompressed\n\n  if (buffer.length === 33) {\n    return {\n      version: buffer[0],\n      privateKey: buffer.slice(1, 33),\n      compressed: false\n    };\n  } // invalid length\n\n\n  if (buffer.length !== 34) throw new Error('Invalid WIF length'); // invalid compression flag\n\n  if (buffer[33] !== 0x01) throw new Error('Invalid compression flag');\n  return {\n    version: buffer[0],\n    privateKey: buffer.slice(1, 33),\n    compressed: true\n  };\n}\n\nfunction encodeRaw(version, privateKey, compressed) {\n  var result = new Buffer(compressed ? 34 : 33);\n  result.writeUInt8(version, 0);\n  privateKey.copy(result, 1);\n\n  if (compressed) {\n    result[33] = 0x01;\n  }\n\n  return result;\n}\n\nfunction decode(string, version) {\n  return decodeRaw(bs58check.decode(string), version);\n}\n\nfunction encode(version, privateKey, compressed) {\n  if (typeof version === 'number') return bs58check.encode(encodeRaw(version, privateKey, compressed));\n  return bs58check.encode(encodeRaw(version.version, version.privateKey, version.compressed));\n}\n\nmodule.exports = {\n  decode: decode,\n  decodeRaw: decodeRaw,\n  encode: encode,\n  encodeRaw: encodeRaw\n};","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/wif/index.js"],"names":["bs58check","require","decodeRaw","buffer","version","undefined","Error","length","privateKey","slice","compressed","encodeRaw","result","Buffer","writeUInt8","copy","decode","string","encode","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,SAASC,SAAT,CAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;AACnC;AACA,MAAIA,OAAO,KAAKC,SAAZ,IAAyBF,MAAM,CAAC,CAAD,CAAN,KAAcC,OAA3C,EAAoD,MAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN,CAFjB,CAInC;;AACA,MAAIH,MAAM,CAACI,MAAP,KAAkB,EAAtB,EAA0B;AACxB,WAAO;AACLH,MAAAA,OAAO,EAAED,MAAM,CAAC,CAAD,CADV;AAELK,MAAAA,UAAU,EAAEL,MAAM,CAACM,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAFP;AAGLC,MAAAA,UAAU,EAAE;AAHP,KAAP;AAKD,GAXkC,CAanC;;;AACA,MAAIP,MAAM,CAACI,MAAP,KAAkB,EAAtB,EAA0B,MAAM,IAAID,KAAJ,CAAU,oBAAV,CAAN,CAdS,CAgBnC;;AACA,MAAIH,MAAM,CAAC,EAAD,CAAN,KAAe,IAAnB,EAAyB,MAAM,IAAIG,KAAJ,CAAU,0BAAV,CAAN;AAEzB,SAAO;AACLF,IAAAA,OAAO,EAAED,MAAM,CAAC,CAAD,CADV;AAELK,IAAAA,UAAU,EAAEL,MAAM,CAACM,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAFP;AAGLC,IAAAA,UAAU,EAAE;AAHP,GAAP;AAKD;;AAED,SAASC,SAAT,CAAoBP,OAApB,EAA6BI,UAA7B,EAAyCE,UAAzC,EAAqD;AACnD,MAAIE,MAAM,GAAG,IAAIC,MAAJ,CAAWH,UAAU,GAAG,EAAH,GAAQ,EAA7B,CAAb;AAEAE,EAAAA,MAAM,CAACE,UAAP,CAAkBV,OAAlB,EAA2B,CAA3B;AACAI,EAAAA,UAAU,CAACO,IAAX,CAAgBH,MAAhB,EAAwB,CAAxB;;AAEA,MAAIF,UAAJ,EAAgB;AACdE,IAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,IAAb;AACD;;AAED,SAAOA,MAAP;AACD;;AAED,SAASI,MAAT,CAAiBC,MAAjB,EAAyBb,OAAzB,EAAkC;AAChC,SAAOF,SAAS,CAACF,SAAS,CAACgB,MAAV,CAAiBC,MAAjB,CAAD,EAA2Bb,OAA3B,CAAhB;AACD;;AAED,SAASc,MAAT,CAAiBd,OAAjB,EAA0BI,UAA1B,EAAsCE,UAAtC,EAAkD;AAChD,MAAI,OAAON,OAAP,KAAmB,QAAvB,EAAiC,OAAOJ,SAAS,CAACkB,MAAV,CAAiBP,SAAS,CAACP,OAAD,EAAUI,UAAV,EAAsBE,UAAtB,CAA1B,CAAP;AAEjC,SAAOV,SAAS,CAACkB,MAAV,CACLP,SAAS,CACPP,OAAO,CAACA,OADD,EAEPA,OAAO,CAACI,UAFD,EAGPJ,OAAO,CAACM,UAHD,CADJ,CAAP;AAOD;;AAEDS,MAAM,CAACC,OAAP,GAAiB;AACfJ,EAAAA,MAAM,EAAEA,MADO;AAEfd,EAAAA,SAAS,EAAEA,SAFI;AAGfgB,EAAAA,MAAM,EAAEA,MAHO;AAIfP,EAAAA,SAAS,EAAEA;AAJI,CAAjB","sourcesContent":["var bs58check = require('bs58check')\n\nfunction decodeRaw (buffer, version) {\n  // check version only if defined\n  if (version !== undefined && buffer[0] !== version) throw new Error('Invalid network version')\n\n  // uncompressed\n  if (buffer.length === 33) {\n    return {\n      version: buffer[0],\n      privateKey: buffer.slice(1, 33),\n      compressed: false\n    }\n  }\n\n  // invalid length\n  if (buffer.length !== 34) throw new Error('Invalid WIF length')\n\n  // invalid compression flag\n  if (buffer[33] !== 0x01) throw new Error('Invalid compression flag')\n\n  return {\n    version: buffer[0],\n    privateKey: buffer.slice(1, 33),\n    compressed: true\n  }\n}\n\nfunction encodeRaw (version, privateKey, compressed) {\n  var result = new Buffer(compressed ? 34 : 33)\n\n  result.writeUInt8(version, 0)\n  privateKey.copy(result, 1)\n\n  if (compressed) {\n    result[33] = 0x01\n  }\n\n  return result\n}\n\nfunction decode (string, version) {\n  return decodeRaw(bs58check.decode(string), version)\n}\n\nfunction encode (version, privateKey, compressed) {\n  if (typeof version === 'number') return bs58check.encode(encodeRaw(version, privateKey, compressed))\n\n  return bs58check.encode(\n    encodeRaw(\n      version.version,\n      version.privateKey,\n      version.compressed\n    )\n  )\n}\n\nmodule.exports = {\n  decode: decode,\n  decodeRaw: decodeRaw,\n  encode: encode,\n  encodeRaw: encodeRaw\n}\n"]},"metadata":{},"sourceType":"script"}