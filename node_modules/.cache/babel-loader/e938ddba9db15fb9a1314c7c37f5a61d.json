{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/notifications.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useConnection, useSolanaExplorerUrlSuffix } from './connection';\nimport Button from '@material-ui/core/Button';\nimport { confirmTransaction } from './utils';\nimport EventEmitter from \"reactjs-eventemitter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function useSendTransaction() {\n  _s();\n\n  const connection = useConnection();\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const [sending, setSending] = useState(false);\n\n  async function sendTransaction(signaturePromise, {\n    onSuccess,\n    onError\n  } = {}, publicSendAddress = '') {\n    let id = enqueueSnackbar('Sending transaction...', {\n      variant: 'info',\n      persist: true\n    });\n    setSending(true);\n\n    try {\n      let signature = await signaturePromise;\n      closeSnackbar(id);\n      id = enqueueSnackbar('Confirming transaction...', {\n        variant: 'info',\n        persist: true,\n        action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n          signature: signature\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }, this)\n      });\n      await confirmTransaction(connection, signature);\n      closeSnackbar(id);\n      setSending(false);\n      enqueueSnackbar('Transaction confirmed', {\n        variant: 'success',\n        autoHideDuration: 15000,\n        action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n          signature: signature\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)\n      });\n\n      if (onSuccess) {\n        EventEmitter.dispatch('SUCCESS_ADDRESS', publicSendAddress); //Emitter.emit('SUCCESS_ADDRESS', publicSendAddress);\n\n        onSuccess(signature);\n      }\n    } catch (e) {\n      console.log('ERROR22', publicSendAddress); // TODO distribute this somehow\n\n      EventEmitter.dispatch('ERROR_ADDRESS', publicSendAddress); //Emitter.emit('ERROR_ADDRESS', publicSendAddress);\n\n      closeSnackbar(id);\n      setSending(false);\n      console.warn(e);\n      enqueueSnackbar(e.message, {\n        variant: 'error'\n      });\n\n      if (onError) {\n        onError(e);\n      }\n    }\n  }\n\n  return [sendTransaction, sending];\n}\n\n_s(useSendTransaction, \"KshoD9FFTNKsCk1HhHxNi9kE56g=\", false, function () {\n  return [useConnection, useSnackbar];\n});\n\nfunction ViewTransactionOnExplorerButton({\n  signature\n}) {\n  _s2();\n\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  return /*#__PURE__*/_jsxDEV(Button, {\n    color: \"inherit\",\n    component: \"a\",\n    target: \"_blank\",\n    rel: \"noopener\",\n    href: `https://explorer.solana.com/tx/${signature}` + urlSuffix,\n    children: \"View on Solana Explorer\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ViewTransactionOnExplorerButton, \"2/FcCoeWWm0fGpxVV7fH06c+oBE=\", false, function () {\n  return [useSolanaExplorerUrlSuffix];\n});\n\n_c = ViewTransactionOnExplorerButton;\nexport function useCallAsync() {\n  _s3();\n\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  return async function callAsync(promise, {\n    progressMessage = 'Submitting...',\n    successMessage = 'Success',\n    onSuccess,\n    onError\n  } = {}) {\n    let id = enqueueSnackbar(progressMessage, {\n      variant: 'info',\n      persist: true\n    });\n\n    try {\n      let result = await promise;\n      closeSnackbar(id);\n\n      if (successMessage) {\n        enqueueSnackbar(successMessage, {\n          variant: 'success'\n        });\n      }\n\n      if (onSuccess) {\n        onSuccess(result);\n      }\n    } catch (e) {\n      console.warn(e);\n      closeSnackbar(id);\n      enqueueSnackbar(e.message, {\n        variant: 'error'\n      });\n\n      if (onError) {\n        onError(e);\n      }\n    }\n  };\n}\n\n_s3(useCallAsync, \"cLw1NvfAu36DUMQTemMFXpkNHzk=\", false, function () {\n  return [useSnackbar];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewTransactionOnExplorerButton\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/notifications.js"],"names":["React","useState","useSnackbar","useConnection","useSolanaExplorerUrlSuffix","Button","confirmTransaction","EventEmitter","useSendTransaction","connection","enqueueSnackbar","closeSnackbar","sending","setSending","sendTransaction","signaturePromise","onSuccess","onError","publicSendAddress","id","variant","persist","signature","action","autoHideDuration","dispatch","e","console","log","warn","message","ViewTransactionOnExplorerButton","urlSuffix","useCallAsync","callAsync","promise","progressMessage","successMessage","result"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useConnection, useSolanaExplorerUrlSuffix } from './connection';\nimport Button from '@material-ui/core/Button';\nimport { confirmTransaction } from './utils';\nimport EventEmitter from \"reactjs-eventemitter\";\n\nexport function useSendTransaction() {\n  const connection = useConnection();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const [sending, setSending] = useState(false);\n\n\n  async function sendTransaction(\n    signaturePromise,\n    { onSuccess, onError } = {},\n    publicSendAddress = ''\n  ) {\n    let id = enqueueSnackbar('Sending transaction...', {\n      variant: 'info',\n      persist: true,\n    });\n    setSending(true);\n    \n    try {\n      let signature = await signaturePromise;\n      \n      closeSnackbar(id);\n      id = enqueueSnackbar('Confirming transaction...', {\n        variant: 'info',\n        persist: true,\n        action: <ViewTransactionOnExplorerButton signature={signature} />,\n      });\n      await confirmTransaction(connection, signature);\n      closeSnackbar(id);\n      setSending(false);\n      enqueueSnackbar('Transaction confirmed', {\n        variant: 'success',\n        autoHideDuration: 15000,\n        action: <ViewTransactionOnExplorerButton signature={signature} />,\n      });\n      if (onSuccess) {\n        EventEmitter.dispatch('SUCCESS_ADDRESS', publicSendAddress);\n        //Emitter.emit('SUCCESS_ADDRESS', publicSendAddress);\n        onSuccess(signature);\n      }\n    } catch (e) {\n      console.log('ERROR22',publicSendAddress); // TODO distribute this somehow\n      EventEmitter.dispatch('ERROR_ADDRESS', publicSendAddress);\n      //Emitter.emit('ERROR_ADDRESS', publicSendAddress);\n      closeSnackbar(id);\n      setSending(false);\n      console.warn(e);\n      enqueueSnackbar(e.message, { variant: 'error' });\n      if (onError) {\n        onError(e);\n      }\n    }\n  }\n\n  return [sendTransaction, sending];\n}\n\nfunction ViewTransactionOnExplorerButton({ signature }) {\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  return (\n    <Button\n      color=\"inherit\"\n      component=\"a\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      href={`https://explorer.solana.com/tx/${signature}` + urlSuffix}\n    >\n      View on Solana Explorer\n    </Button>\n  );\n}\n\nexport function useCallAsync() {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  return async function callAsync(\n    promise,\n    {\n      progressMessage = 'Submitting...',\n      successMessage = 'Success',\n      onSuccess,\n      onError,\n    } = {},\n  ) {\n    let id = enqueueSnackbar(progressMessage, {\n      variant: 'info',\n      persist: true,\n    });\n    try {\n      let result = await promise;\n      closeSnackbar(id);\n      if (successMessage) {\n        enqueueSnackbar(successMessage, { variant: 'success' });\n      }\n      if (onSuccess) {\n        onSuccess(result);\n      }\n    } catch (e) {\n      console.warn(e);\n      closeSnackbar(id);\n      enqueueSnackbar(e.message, { variant: 'error' });\n      if (onError) {\n        onError(e);\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}