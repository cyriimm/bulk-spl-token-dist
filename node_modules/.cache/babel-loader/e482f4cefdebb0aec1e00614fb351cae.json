{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/EthFeeEstimate.tsx\",\n    _s = $RefreshSig$();\n\nimport { DialogContentText } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { useConnection } from \"../utils/connection\";\nimport { priceStore, serumMarkets } from \"../utils/markets\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FeeContentText({\n  ethFee,\n  ethPrice,\n  warning = false,\n  prefix = \"\",\n  bold = false\n}) {\n  let usdFeeEstimate = ethPrice !== undefined ? ethPrice * ethFee : null;\n  return /*#__PURE__*/_jsxDEV(DialogContentText, {\n    color: warning ? 'secondary' : 'textPrimary' // @ts-ignore\n    ,\n    style: {\n      marginBottom: '0px',\n      fontWeight: bold ? '500' : undefined\n    },\n    children: [prefix, ethFee.toFixed(4), ' ETH', usdFeeEstimate && ` (${usdFeeEstimate.toFixed(2)} USD)`]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n\n_c = FeeContentText;\nexport function EthFeeEstimate({\n  ethFeeData,\n  insufficientEthBalance\n}) {\n  _s();\n\n  let [ethFeeEstimate, loaded, error] = ethFeeData;\n  const [ethPrice, setEthPrice] = useState(undefined);\n  const connection = useConnection();\n  useEffect(() => {\n    if (ethPrice === undefined) {\n      let m = serumMarkets['ETH'];\n      priceStore.getPrice(connection, m.name).then(setEthPrice);\n    }\n  }, [ethPrice, connection]);\n\n  if (!loaded && !error) {\n    return /*#__PURE__*/_jsxDEV(DialogContentText, {\n      color: \"textPrimary\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  } else if (error) {\n    return /*#__PURE__*/_jsxDEV(DialogContentText, {\n      color: \"textPrimary\",\n      children: \"Unable to estimate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (Array.isArray(ethFeeEstimate)) {\n    const [approveFee, swapFee] = ethFeeEstimate;\n    return /*#__PURE__*/_jsxDEV(DialogContentText, {\n      children: [/*#__PURE__*/_jsxDEV(FeeContentText, {\n        ethFee: approveFee,\n        ethPrice: ethPrice,\n        prefix: \"Approve: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FeeContentText, {\n        ethFee: swapFee,\n        ethPrice: ethPrice,\n        prefix: \"Swap: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FeeContentText, {\n        warning: insufficientEthBalance,\n        ethFee: approveFee + swapFee,\n        ethPrice: ethPrice,\n        prefix: \"Total: \",\n        bold: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(FeeContentText, {\n    warning: insufficientEthBalance,\n    ethFee: ethFeeEstimate,\n    ethPrice: ethPrice\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EthFeeEstimate, \"gnFVeyUhbGOMawDsbgLrpJbibx0=\", false, function () {\n  return [useConnection];\n});\n\n_c2 = EthFeeEstimate;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FeeContentText\");\n$RefreshReg$(_c2, \"EthFeeEstimate\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/EthFeeEstimate.tsx"],"names":["DialogContentText","useEffect","useState","useConnection","priceStore","serumMarkets","FeeContentText","ethFee","ethPrice","warning","prefix","bold","usdFeeEstimate","undefined","marginBottom","fontWeight","toFixed","EthFeeEstimate","ethFeeData","insufficientEthBalance","ethFeeEstimate","loaded","error","setEthPrice","connection","m","getPrice","name","then","Array","isArray","approveFee","swapFee"],"mappings":"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","sourcesContent":["import { DialogContentText } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { useConnection } from \"../utils/connection\";\nimport { priceStore, serumMarkets } from \"../utils/markets\";\n\nfunction FeeContentText({ ethFee, ethPrice, warning = false, prefix = \"\", bold = false }) {\n  let usdFeeEstimate = ethPrice !== undefined ? ethPrice * ethFee : null;\n\n  return (\n    <DialogContentText\n      color={warning ? 'secondary' : 'textPrimary'}\n      // @ts-ignore\n      style={{ marginBottom: '0px', fontWeight: bold ? '500' : undefined }}\n    >\n      {prefix}\n      {ethFee.toFixed(4)}\n      {' ETH'}\n      {usdFeeEstimate && ` (${usdFeeEstimate.toFixed(2)} USD)`}\n    </DialogContentText>\n  );\n}\n\nexport function EthFeeEstimate({ ethFeeData, insufficientEthBalance }) {\n  let [ethFeeEstimate, loaded, error] = ethFeeData;\n  const [ethPrice, setEthPrice] = useState<number | undefined>(undefined);\n  const connection = useConnection();\n  useEffect(() => {\n    if (ethPrice === undefined) {\n      let m = serumMarkets['ETH'];\n      priceStore.getPrice(connection, m.name).then(setEthPrice);\n    }\n  }, [ethPrice, connection]);\n\n  if (!loaded && !error) {\n    return (\n      <DialogContentText color=\"textPrimary\">Loading...</DialogContentText>\n    );\n  } else if (error) {\n    return (\n      <DialogContentText color=\"textPrimary\">\n        Unable to estimate\n      </DialogContentText>\n    );\n  }\n\n  if (Array.isArray(ethFeeEstimate)) {\n    const [approveFee, swapFee] = ethFeeEstimate;\n    return (\n      <DialogContentText>\n        <FeeContentText ethFee={approveFee} ethPrice={ethPrice} prefix={\"Approve: \"} />\n        <FeeContentText ethFee={swapFee} ethPrice={ethPrice} prefix={\"Swap: \"} />\n        <FeeContentText\n          warning={insufficientEthBalance}\n          ethFee={approveFee + swapFee}\n          ethPrice={ethPrice}\n          prefix={\"Total: \"}\n          bold\n        />\n      </DialogContentText>\n    );\n  }\n\n  return (\n    <FeeContentText\n      warning={insufficientEthBalance}\n      ethFee={ethFeeEstimate}\n      ethPrice={ethPrice}\n    />\n  );\n}"]},"metadata":{},"sourceType":"module"}