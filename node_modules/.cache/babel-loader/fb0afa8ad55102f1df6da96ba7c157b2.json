{"ast":null,"code":"// Thanks https://github.com/axic/swarmhash\nvar keccak = require(\"eth-lib/lib/hash\").keccak256;\n\nvar Bytes = require(\"eth-lib/lib/bytes\");\n\nvar swarmHashBlock = function swarmHashBlock(length, data) {\n  var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));\n  var bytes = Bytes.flatten([lengthEncoded, \"0x0000\", data]);\n  return keccak(bytes).slice(2);\n}; // (Bytes | Uint8Array | String) -> String\n\n\nvar swarmHash = function swarmHash(data) {\n  if (typeof data === \"string\" && data.slice(0, 2) !== \"0x\") {\n    data = Bytes.fromString(data);\n  } else if (typeof data !== \"string\" && data.length !== undefined) {\n    data = Bytes.fromUint8Array(data);\n  }\n\n  var length = Bytes.length(data);\n\n  if (length <= 4096) {\n    return swarmHashBlock(length, data);\n  }\n\n  var maxSize = 4096;\n\n  while (maxSize * (4096 / 32) < length) {\n    maxSize *= 4096 / 32;\n  }\n\n  var innerNodes = [];\n\n  for (var i = 0; i < length; i += maxSize) {\n    var size = maxSize < length - i ? maxSize : length - i;\n    innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));\n  }\n\n  return swarmHashBlock(length, Bytes.flatten(innerNodes));\n};\n\nmodule.exports = swarmHash;","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/swarm-js/lib/swarm-hash.js"],"names":["keccak","require","keccak256","Bytes","swarmHashBlock","length","data","lengthEncoded","reverse","pad","fromNumber","bytes","flatten","slice","swarmHash","fromString","undefined","fromUint8Array","maxSize","innerNodes","i","size","push","module","exports"],"mappings":"AAAA;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BC,SAAzC;;AAEA,IAAIC,KAAK,GAAGF,OAAO,CAAC,mBAAD,CAAnB;;AAEA,IAAIG,cAAc,GAAG,SAASA,cAAT,CAAwBC,MAAxB,EAAgCC,IAAhC,EAAsC;AACzD,MAAIC,aAAa,GAAGJ,KAAK,CAACK,OAAN,CAAcL,KAAK,CAACM,GAAN,CAAU,CAAV,EAAaN,KAAK,CAACO,UAAN,CAAiBL,MAAjB,CAAb,CAAd,CAApB;AACA,MAAIM,KAAK,GAAGR,KAAK,CAACS,OAAN,CAAc,CAACL,aAAD,EAAgB,QAAhB,EAA0BD,IAA1B,CAAd,CAAZ;AACA,SAAON,MAAM,CAACW,KAAD,CAAN,CAAcE,KAAd,CAAoB,CAApB,CAAP;AACD,CAJD,C,CAIG;;;AAGH,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBR,IAAnB,EAAyB;AACvC,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACO,KAAL,CAAW,CAAX,EAAc,CAAd,MAAqB,IAArD,EAA2D;AACzDP,IAAAA,IAAI,GAAGH,KAAK,CAACY,UAAN,CAAiBT,IAAjB,CAAP;AACD,GAFD,MAEO,IAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACD,MAAL,KAAgBW,SAAhD,EAA2D;AAChEV,IAAAA,IAAI,GAAGH,KAAK,CAACc,cAAN,CAAqBX,IAArB,CAAP;AACD;;AAED,MAAID,MAAM,GAAGF,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAb;;AAEA,MAAID,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAOD,cAAc,CAACC,MAAD,EAASC,IAAT,CAArB;AACD;;AAED,MAAIY,OAAO,GAAG,IAAd;;AAEA,SAAOA,OAAO,IAAI,OAAO,EAAX,CAAP,GAAwBb,MAA/B,EAAuC;AACrCa,IAAAA,OAAO,IAAI,OAAO,EAAlB;AACD;;AAED,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,MAApB,EAA4Be,CAAC,IAAIF,OAAjC,EAA0C;AACxC,QAAIG,IAAI,GAAGH,OAAO,GAAGb,MAAM,GAAGe,CAAnB,GAAuBF,OAAvB,GAAiCb,MAAM,GAAGe,CAArD;AACAD,IAAAA,UAAU,CAACG,IAAX,CAAgBR,SAAS,CAACX,KAAK,CAACU,KAAN,CAAYP,IAAZ,EAAkBc,CAAlB,EAAqBA,CAAC,GAAGC,IAAzB,CAAD,CAAzB;AACD;;AAED,SAAOjB,cAAc,CAACC,MAAD,EAASF,KAAK,CAACS,OAAN,CAAcO,UAAd,CAAT,CAArB;AACD,CA3BD;;AA6BAI,MAAM,CAACC,OAAP,GAAiBV,SAAjB","sourcesContent":["// Thanks https://github.com/axic/swarmhash\nvar keccak = require(\"eth-lib/lib/hash\").keccak256;\n\nvar Bytes = require(\"eth-lib/lib/bytes\");\n\nvar swarmHashBlock = function swarmHashBlock(length, data) {\n  var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));\n  var bytes = Bytes.flatten([lengthEncoded, \"0x0000\", data]);\n  return keccak(bytes).slice(2);\n}; // (Bytes | Uint8Array | String) -> String\n\n\nvar swarmHash = function swarmHash(data) {\n  if (typeof data === \"string\" && data.slice(0, 2) !== \"0x\") {\n    data = Bytes.fromString(data);\n  } else if (typeof data !== \"string\" && data.length !== undefined) {\n    data = Bytes.fromUint8Array(data);\n  }\n\n  var length = Bytes.length(data);\n\n  if (length <= 4096) {\n    return swarmHashBlock(length, data);\n  }\n\n  var maxSize = 4096;\n\n  while (maxSize * (4096 / 32) < length) {\n    maxSize *= 4096 / 32;\n  }\n\n  var innerNodes = [];\n\n  for (var i = 0; i < length; i += maxSize) {\n    var size = maxSize < length - i ? maxSize : length - i;\n    innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));\n  }\n\n  return swarmHashBlock(length, Bytes.flatten(innerNodes));\n};\n\nmodule.exports = swarmHash;"]},"metadata":{},"sourceType":"script"}