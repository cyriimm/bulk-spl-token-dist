{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst varint = require('varint');\n\nconst intTable = require('./int-table');\n\nconst codecNameToCodeVarint = require('./varint-table');\n\nconst util = require('./util');\n\nexports = module.exports;\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {string|number} multicodecStrOrCode\n * @param {Buffer} data\n * @returns {Buffer}\n */\n\nexports.addPrefix = (multicodecStrOrCode, data) => {\n  let prefix;\n\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode);\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n\n  return Buffer.concat([prefix, data]);\n};\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Buffer} data\n * @returns {Buffer}\n */\n\n\nexports.rmPrefix = data => {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n};\n/**\n * Get the codec of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {string}\n */\n\n\nexports.getCodec = prefixedData => {\n  const code = varint.decode(prefixedData);\n  const codecName = intTable.get(code);\n\n  if (codecName === undefined) {\n    throw new Error(`Code ${code} not found`);\n  }\n\n  return codecName;\n};\n/**\n * Get the name of the codec.\n * @param {number} codec\n * @returns {string}\n */\n\n\nexports.getName = codec => {\n  return intTable.get(codec);\n};\n/**\n * Get the code of the codec\n * @param {string} name\n * @returns {number}\n */\n\n\nexports.getNumber = name => {\n  const code = codecNameToCodeVarint[name];\n\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found');\n  }\n\n  return util.varintBufferDecode(code)[0];\n};\n/**\n * Get the code of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {number}\n */\n\n\nexports.getCode = prefixedData => {\n  return varint.decode(prefixedData);\n};\n/**\n * Get the code as varint of a codec name.\n * @param {string} codecName\n * @returns {Buffer}\n */\n\n\nexports.getCodeVarint = codecName => {\n  const code = codecNameToCodeVarint[codecName];\n\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found');\n  }\n\n  return code;\n};\n/**\n * Get the varint of a code.\n * @param {Number} code\n * @returns {Array.<number>}\n */\n\n\nexports.getVarint = code => {\n  return varint.encode(code);\n}; // Make the constants top-level constants\n\n\nconst constants = require('./constants');\n\nObject.assign(exports, constants); // Human friendly names for printing, e.g. in error messages\n\nexports.print = require('./print');","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/cids/node_modules/multicodec/src/index.js"],"names":["Buffer","require","varint","intTable","codecNameToCodeVarint","util","exports","module","addPrefix","multicodecStrOrCode","data","prefix","isBuffer","varintBufferEncode","Error","concat","rmPrefix","decode","slice","bytes","getCodec","prefixedData","code","codecName","get","undefined","getName","codec","getNumber","name","varintBufferDecode","getCode","getCodeVarint","getVarint","encode","constants","Object","assign","print"],"mappings":"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","sourcesContent":["/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst varint = require('varint')\nconst intTable = require('./int-table')\nconst codecNameToCodeVarint = require('./varint-table')\nconst util = require('./util')\n\nexports = module.exports\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {string|number} multicodecStrOrCode\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.addPrefix = (multicodecStrOrCode, data) => {\n  let prefix\n\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode)\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n  return Buffer.concat([prefix, data])\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.rmPrefix = (data) => {\n  varint.decode(data)\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {string}\n */\nexports.getCodec = (prefixedData) => {\n  const code = varint.decode(prefixedData)\n  const codecName = intTable.get(code)\n  if (codecName === undefined) {\n    throw new Error(`Code ${code} not found`)\n  }\n  return codecName\n}\n\n/**\n * Get the name of the codec.\n * @param {number} codec\n * @returns {string}\n */\nexports.getName = (codec) => {\n  return intTable.get(codec)\n}\n\n/**\n * Get the code of the codec\n * @param {string} name\n * @returns {number}\n */\nexports.getNumber = (name) => {\n  const code = codecNameToCodeVarint[name]\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found')\n  }\n  return util.varintBufferDecode(code)[0]\n}\n\n/**\n * Get the code of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {number}\n */\nexports.getCode = (prefixedData) => {\n  return varint.decode(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n * @param {string} codecName\n * @returns {Buffer}\n */\nexports.getCodeVarint = (codecName) => {\n  const code = codecNameToCodeVarint[codecName]\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found')\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n * @param {Number} code\n * @returns {Array.<number>}\n */\nexports.getVarint = (code) => {\n  return varint.encode(code)\n}\n\n// Make the constants top-level constants\nconst constants = require('./constants')\nObject.assign(exports, constants)\n\n// Human friendly names for printing, e.g. in error messages\nexports.print = require('./print')\n"]},"metadata":{},"sourceType":"script"}