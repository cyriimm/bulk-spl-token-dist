{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MintTokenDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport DialogForm from './DialogForm';\nimport { PublicKey } from '@solana/web3.js';\nimport { abbreviateAddress } from '../utils/utils';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { ConnectToMetamaskButton, getErc20Balance, useEthAccount, withdrawEth } from '../utils/swap/eth';\nimport { refreshWalletPublicKeys, useBalanceInfo, useWallet } from '../utils/wallet';\nimport { useConnection, useIsProdNetwork } from '../utils/connection';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { Account, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createAndInitializeMint } from '../utils/tokens';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MintTokenDialog({\n  open,\n  onClose,\n  publicKey\n}) {\n  _s();\n\n  const updateTokenName = useUpdateTokenName();\n  const isProdNetwork = useIsProdNetwork();\n  const [tab, setTab] = useState('spl');\n  const [name, setName] = useState('name');\n  const [symbol, setSymbol] = useState('symbol');\n  const [amount, setAmount] = useState('amount');\n  const [decimals, setDecimals] = useState('decimals');\n  const [sendTransaction, sending] = useSendTransaction();\n  const wallet = useWallet();\n  const onSubmitRef = useRef();\n  const ethAccount = useEthAccount();\n\n  function mintTestToken() {\n    console.log(name, symbol, amount, decimals);\n    let mint = new Account();\n    updateTokenName(mint.publicKey, name, symbol);\n    sendTransaction(createAndInitializeMint({\n      connection: wallet.connection,\n      owner: wallet,\n      mint,\n      amount: Number(amount) * 1000000,\n      decimals: 6,\n      initialAccount: new Account()\n    }), {\n      onSuccess: e => {\n        console.log('event:' + e);\n        refreshWalletPublicKeys(wallet);\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DialogForm, {\n      open: open,\n      onClose: onClose,\n      onSubmit: () => onSubmitRef.current(),\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"MINT A TOKEN (6 Decimals)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        style: {\n          paddingTop: 16\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Name\",\n          onChange: e => setName(e.target.value.trim())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Symbol\",\n          onChange: e => setSymbol(e.target.value.trim())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Amount\",\n          onChange: e => setAmount(e.target.value.trim())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: mintTestToken,\n          children: \"Mint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(MintTokenDialog, \"2U6o2il6FVhKHnv4aMfoY3xCIUA=\", false, function () {\n  return [useUpdateTokenName, useIsProdNetwork, useSendTransaction, useWallet, useEthAccount];\n});\n\n_c = MintTokenDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"MintTokenDialog\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MintTokenDialog.js"],"names":["React","useEffect","useRef","useState","DialogActions","Button","DialogTitle","DialogContent","TextField","DialogForm","PublicKey","abbreviateAddress","InputAdornment","useCallAsync","useSendTransaction","swapApiRequest","useSwapApiGet","showSwapAddress","Tabs","Tab","DialogContentText","ConnectToMetamaskButton","getErc20Balance","useEthAccount","withdrawEth","refreshWalletPublicKeys","useBalanceInfo","useWallet","useConnection","useIsProdNetwork","useUpdateTokenName","Account","LAMPORTS_PER_SOL","createAndInitializeMint","MintTokenDialog","open","onClose","publicKey","updateTokenName","isProdNetwork","tab","setTab","name","setName","symbol","setSymbol","amount","setAmount","decimals","setDecimals","sendTransaction","sending","wallet","onSubmitRef","ethAccount","mintTestToken","console","log","mint","connection","owner","Number","initialAccount","onSuccess","e","current","paddingTop","target","value","trim"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport DialogForm from './DialogForm';\nimport { PublicKey } from '@solana/web3.js';\nimport { abbreviateAddress } from '../utils/utils';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n  ConnectToMetamaskButton,\n  getErc20Balance,\n  useEthAccount,\n  withdrawEth,\n} from '../utils/swap/eth';\nimport {\n    refreshWalletPublicKeys,\n    useBalanceInfo,\n    useWallet\n  } from '../utils/wallet';\nimport { useConnection, useIsProdNetwork } from '../utils/connection';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { Account, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createAndInitializeMint } from '../utils/tokens';\n\nexport default function MintTokenDialog({open, onClose, publicKey}){\n\n    const updateTokenName = useUpdateTokenName();\n    const isProdNetwork = useIsProdNetwork();\n    const [tab, setTab] = useState('spl');\n    const [name, setName] = useState('name');\n    const [symbol, setSymbol] = useState('symbol');\n    const [amount, setAmount] = useState('amount');\n    const [decimals, setDecimals] = useState('decimals');\n    const [sendTransaction, sending] = useSendTransaction();\n\n    const wallet = useWallet();\n\n  \n    const onSubmitRef = useRef();\n    const ethAccount = useEthAccount();\n\n    function mintTestToken() {\n        console.log(name,symbol,amount,decimals);\n        let mint = new Account();\n        updateTokenName(\n          mint.publicKey,\n          name,\n          symbol,\n        );\n        sendTransaction(\n          createAndInitializeMint({\n            connection: wallet.connection,\n            owner: wallet,\n            mint,\n            amount: (Number(amount)*1000000),\n            decimals: 6,\n            initialAccount: new Account(),\n          }),\n          { onSuccess: (e) => {console.log('event:'+e);refreshWalletPublicKeys(wallet)} },\n        );\n      \n    \n      }\n\n\n    return (\n        <>\n            <DialogForm\n                open={open}\n                onClose={onClose}\n                onSubmit={() => onSubmitRef.current()}\n                fullWidth\n            >\n\n                <DialogTitle>\n                    MINT A TOKEN (6 Decimals)\n                </DialogTitle>\n                <DialogContent style={{ paddingTop: 16}}>\n                <TextField\n                    label='Name'\n                 \n                    onChange={(e) => setName(e.target.value.trim())}\n                ></TextField>\n                <TextField\n                    label='Symbol'\n                 \n                    onChange={(e) => setSymbol(e.target.value.trim())}\n                ></TextField>\n                <TextField\n                    label='Amount'\n              \n                    onChange={(e) => setAmount(e.target.value.trim())}\n                ></TextField> \n                {/* <TextField\n                    label='Decimals'\n                    \n                    onChange={(e) => setDecimals(e.target.value.trim())}\n                ></TextField>                                                    */}\n                </DialogContent>\n\n                <DialogActions>\n                    <Button onClick={mintTestToken}>Mint</Button>\n                </DialogActions>\n\n\n            </DialogForm>\n        </>\n\n\n\n    );\n\n\n\n\n\n}"]},"metadata":{},"sourceType":"module"}