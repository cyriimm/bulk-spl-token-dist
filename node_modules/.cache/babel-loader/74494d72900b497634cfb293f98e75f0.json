{"ast":null,"code":"const {\n  Transform\n} = require('stream');\n\nmodule.exports = KeccakState => class Keccak extends Transform {\n  constructor(rate, capacity, delimitedSuffix, hashBitLength, options) {\n    super(options);\n    this._rate = rate;\n    this._capacity = capacity;\n    this._delimitedSuffix = delimitedSuffix;\n    this._hashBitLength = hashBitLength;\n    this._options = options;\n    this._state = new KeccakState();\n\n    this._state.initialize(rate, capacity);\n\n    this._finalized = false;\n  }\n\n  _transform(chunk, encoding, callback) {\n    let error = null;\n\n    try {\n      this.update(chunk, encoding);\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error);\n  }\n\n  _flush(callback) {\n    let error = null;\n\n    try {\n      this.push(this.digest());\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error);\n  }\n\n  update(data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');\n    if (this._finalized) throw new Error('Digest already called');\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);\n\n    this._state.absorb(data);\n\n    return this;\n  }\n\n  digest(encoding) {\n    if (this._finalized) throw new Error('Digest already called');\n    this._finalized = true;\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);\n\n    let digest = this._state.squeeze(this._hashBitLength / 8);\n\n    if (encoding !== undefined) digest = digest.toString(encoding);\n\n    this._resetState();\n\n    return digest;\n  } // remove result from memory\n\n\n  _resetState() {\n    this._state.initialize(this._rate, this._capacity);\n\n    return this;\n  } // because sometimes we need hash right now and little later\n\n\n  _clone() {\n    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);\n\n    this._state.copy(clone._state);\n\n    clone._finalized = this._finalized;\n    return clone;\n  }\n\n};","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/keccak/lib/api/keccak.js"],"names":["Transform","require","module","exports","KeccakState","Keccak","constructor","rate","capacity","delimitedSuffix","hashBitLength","options","_rate","_capacity","_delimitedSuffix","_hashBitLength","_options","_state","initialize","_finalized","_transform","chunk","encoding","callback","error","update","err","_flush","push","digest","data","Buffer","isBuffer","TypeError","Error","from","absorb","absorbLastFewBits","squeeze","undefined","toString","_resetState","_clone","clone","copy"],"mappings":"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","sourcesContent":["const { Transform } = require('stream')\n\nmodule.exports = (KeccakState) => class Keccak extends Transform {\n  constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {\n    super(options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._hashBitLength = hashBitLength\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  _transform (chunk, encoding, callback) {\n    let error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  _flush (callback) {\n    let error = null\n    try {\n      this.push(this.digest())\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  update (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Digest already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  digest (encoding) {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)\n    let digest = this._state.squeeze(this._hashBitLength / 8)\n    if (encoding !== undefined) digest = digest.toString(encoding)\n\n    this._resetState()\n\n    return digest\n  }\n\n  // remove result from memory\n  _resetState () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  // because sometimes we need hash right now and little later\n  _clone () {\n    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n}\n"]},"metadata":{},"sourceType":"script"}