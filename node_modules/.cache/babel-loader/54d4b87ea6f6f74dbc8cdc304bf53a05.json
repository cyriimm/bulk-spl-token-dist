{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/** @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar oboe = require('oboe');\n\nvar IpcProvider = function IpcProvider(path, net) {\n  var _this = this;\n\n  this.responseCallbacks = {};\n  this.notificationCallbacks = [];\n  this.path = path;\n  this.connected = false;\n  this.connection = net.connect({\n    path: this.path\n  });\n  this.addDefaultEvents(); // LISTEN FOR CONNECTION RESPONSES\n\n  var callback = function (result) {\n    /*jshint maxcomplexity: 6 */\n    var id = null; // get the id which matches the returned id\n\n    if (_.isArray(result)) {\n      result.forEach(function (load) {\n        if (_this.responseCallbacks[load.id]) id = load.id;\n      });\n    } else {\n      id = result.id;\n    } // notification\n\n\n    if (!id && result.method.indexOf('_subscription') !== -1) {\n      _this.notificationCallbacks.forEach(function (callback) {\n        if (_.isFunction(callback)) callback(result);\n      }); // fire the callback\n\n    } else if (_this.responseCallbacks[id]) {\n      _this.responseCallbacks[id](null, result);\n\n      delete _this.responseCallbacks[id];\n    }\n  }; // use oboe.js for Sockets\n\n\n  if (net.constructor.name === 'Socket') {\n    oboe(this.connection).done(callback);\n  } else {\n    this.connection.on('data', function (data) {\n      _this._parseResponse(data.toString()).forEach(callback);\n    });\n  }\n};\n/**\nWill add the error and end event to timeout existing calls\n\n@method addDefaultEvents\n*/\n\n\nIpcProvider.prototype.addDefaultEvents = function () {\n  var _this = this;\n\n  this.connection.on('connect', function () {\n    _this.connected = true;\n  });\n  this.connection.on('close', function () {\n    _this.connected = false;\n  });\n  this.connection.on('error', function () {\n    _this._timeout();\n  });\n  this.connection.on('end', function () {\n    _this._timeout();\n  });\n  this.connection.on('timeout', function () {\n    _this._timeout();\n  });\n};\n/**\n Will parse the response and make an array out of it.\n\n NOTE, this exists for backwards compatibility reasons.\n\n @method _parseResponse\n @param {String} data\n */\n\n\nIpcProvider.prototype._parseResponse = function (data) {\n  var _this = this,\n      returnValues = []; // DE-CHUNKER\n\n\n  var dechunkedData = data.replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n  .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n  .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n  .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n  .split('|--|');\n  dechunkedData.forEach(function (data) {\n    // prepend the last chunk\n    if (_this.lastChunk) data = _this.lastChunk + data;\n    var result = null;\n\n    try {\n      result = JSON.parse(data);\n    } catch (e) {\n      _this.lastChunk = data; // start timeout to cancel all requests\n\n      clearTimeout(_this.lastChunkTimeout);\n      _this.lastChunkTimeout = setTimeout(function () {\n        _this._timeout();\n\n        throw errors.InvalidResponse(data);\n      }, 1000 * 15);\n      return;\n    } // cancel timeout and set chunk to null\n\n\n    clearTimeout(_this.lastChunkTimeout);\n    _this.lastChunk = null;\n    if (result) returnValues.push(result);\n  });\n  return returnValues;\n};\n/**\nGet the adds a callback to the responseCallbacks object,\nwhich will be called if a response matching the response Id will arrive.\n\n@method _addResponseCallback\n*/\n\n\nIpcProvider.prototype._addResponseCallback = function (payload, callback) {\n  var id = payload.id || payload[0].id;\n  var method = payload.method || payload[0].method;\n  this.responseCallbacks[id] = callback;\n  this.responseCallbacks[id].method = method;\n};\n/**\nTimeout all requests when the end/error event is fired\n\n@method _timeout\n*/\n\n\nIpcProvider.prototype._timeout = function () {\n  for (var key in this.responseCallbacks) {\n    if (this.responseCallbacks.hasOwnProperty(key)) {\n      this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\n      delete this.responseCallbacks[key];\n    }\n  }\n};\n/**\n Try to reconnect\n\n @method reconnect\n */\n\n\nIpcProvider.prototype.reconnect = function () {\n  this.connection.connect({\n    path: this.path\n  });\n};\n\nIpcProvider.prototype.send = function (payload, callback) {\n  // try reconnect, when connection is gone\n  if (!this.connection.writable) this.connection.connect({\n    path: this.path\n  });\n  this.connection.write(JSON.stringify(payload));\n\n  this._addResponseCallback(payload, callback);\n};\n/**\nSubscribes to provider events.provider\n\n@method on\n@param {String} type    'notification', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\n\n\nIpcProvider.prototype.on = function (type, callback) {\n  if (typeof callback !== 'function') throw new Error('The second parameter callback must be a function.');\n\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks.push(callback);\n      break;\n    // adds error, end, timeout, connect\n\n    default:\n      this.connection.on(type, callback);\n      break;\n  }\n};\n/**\n Subscribes to provider events.provider\n\n @method on\n @param {String} type    'connect', 'error', 'end' or 'data'\n @param {Function} callback   the callback to call\n */\n\n\nIpcProvider.prototype.once = function (type, callback) {\n  if (typeof callback !== 'function') throw new Error('The second parameter callback must be a function.');\n  this.connection.once(type, callback);\n};\n/**\nRemoves event listener\n\n@method removeListener\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\n\n\nIpcProvider.prototype.removeListener = function (type, callback) {\n  var _this = this;\n\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks.forEach(function (cb, index) {\n        if (cb === callback) _this.notificationCallbacks.splice(index, 1);\n      });\n      break;\n\n    default:\n      this.connection.removeListener(type, callback);\n      break;\n  }\n};\n/**\nRemoves all event listeners\n\n@method removeAllListeners\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n*/\n\n\nIpcProvider.prototype.removeAllListeners = function (type) {\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks = [];\n      break;\n\n    default:\n      this.connection.removeAllListeners(type);\n      break;\n  }\n};\n/**\nResets the providers, clears all callbacks\n\n@method reset\n*/\n\n\nIpcProvider.prototype.reset = function () {\n  this._timeout();\n\n  this.notificationCallbacks = [];\n  this.connection.removeAllListeners('error');\n  this.connection.removeAllListeners('end');\n  this.connection.removeAllListeners('timeout');\n  this.addDefaultEvents();\n};\n/**\n * Returns the desired boolean.\n *\n * @method supportsSubscriptions\n * @returns {boolean}\n */\n\n\nIpcProvider.prototype.supportsSubscriptions = function () {\n  return true;\n};\n\nmodule.exports = IpcProvider;","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/web3-providers-ipc/lib/index.js"],"names":["_","require","errors","oboe","IpcProvider","path","net","_this","responseCallbacks","notificationCallbacks","connected","connection","connect","addDefaultEvents","callback","result","id","isArray","forEach","load","method","indexOf","isFunction","constructor","name","done","on","data","_parseResponse","toString","prototype","_timeout","returnValues","dechunkedData","replace","split","lastChunk","JSON","parse","e","clearTimeout","lastChunkTimeout","setTimeout","InvalidResponse","push","_addResponseCallback","payload","key","hasOwnProperty","InvalidConnection","reconnect","send","writable","write","stringify","type","Error","once","removeListener","cb","index","splice","removeAllListeners","reset","supportsSubscriptions","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\"use strict\";\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar oboe = require('oboe');\nvar IpcProvider = function IpcProvider(path, net) {\n    var _this = this;\n    this.responseCallbacks = {};\n    this.notificationCallbacks = [];\n    this.path = path;\n    this.connected = false;\n    this.connection = net.connect({ path: this.path });\n    this.addDefaultEvents();\n    // LISTEN FOR CONNECTION RESPONSES\n    var callback = function (result) {\n        /*jshint maxcomplexity: 6 */\n        var id = null;\n        // get the id which matches the returned id\n        if (_.isArray(result)) {\n            result.forEach(function (load) {\n                if (_this.responseCallbacks[load.id])\n                    id = load.id;\n            });\n        }\n        else {\n            id = result.id;\n        }\n        // notification\n        if (!id && result.method.indexOf('_subscription') !== -1) {\n            _this.notificationCallbacks.forEach(function (callback) {\n                if (_.isFunction(callback))\n                    callback(result);\n            });\n            // fire the callback\n        }\n        else if (_this.responseCallbacks[id]) {\n            _this.responseCallbacks[id](null, result);\n            delete _this.responseCallbacks[id];\n        }\n    };\n    // use oboe.js for Sockets\n    if (net.constructor.name === 'Socket') {\n        oboe(this.connection)\n            .done(callback);\n    }\n    else {\n        this.connection.on('data', function (data) {\n            _this._parseResponse(data.toString()).forEach(callback);\n        });\n    }\n};\n/**\nWill add the error and end event to timeout existing calls\n\n@method addDefaultEvents\n*/\nIpcProvider.prototype.addDefaultEvents = function () {\n    var _this = this;\n    this.connection.on('connect', function () {\n        _this.connected = true;\n    });\n    this.connection.on('close', function () {\n        _this.connected = false;\n    });\n    this.connection.on('error', function () {\n        _this._timeout();\n    });\n    this.connection.on('end', function () {\n        _this._timeout();\n    });\n    this.connection.on('timeout', function () {\n        _this._timeout();\n    });\n};\n/**\n Will parse the response and make an array out of it.\n\n NOTE, this exists for backwards compatibility reasons.\n\n @method _parseResponse\n @param {String} data\n */\nIpcProvider.prototype._parseResponse = function (data) {\n    var _this = this, returnValues = [];\n    // DE-CHUNKER\n    var dechunkedData = data\n        .replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n        .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n        .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n        .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n        .split('|--|');\n    dechunkedData.forEach(function (data) {\n        // prepend the last chunk\n        if (_this.lastChunk)\n            data = _this.lastChunk + data;\n        var result = null;\n        try {\n            result = JSON.parse(data);\n        }\n        catch (e) {\n            _this.lastChunk = data;\n            // start timeout to cancel all requests\n            clearTimeout(_this.lastChunkTimeout);\n            _this.lastChunkTimeout = setTimeout(function () {\n                _this._timeout();\n                throw errors.InvalidResponse(data);\n            }, 1000 * 15);\n            return;\n        }\n        // cancel timeout and set chunk to null\n        clearTimeout(_this.lastChunkTimeout);\n        _this.lastChunk = null;\n        if (result)\n            returnValues.push(result);\n    });\n    return returnValues;\n};\n/**\nGet the adds a callback to the responseCallbacks object,\nwhich will be called if a response matching the response Id will arrive.\n\n@method _addResponseCallback\n*/\nIpcProvider.prototype._addResponseCallback = function (payload, callback) {\n    var id = payload.id || payload[0].id;\n    var method = payload.method || payload[0].method;\n    this.responseCallbacks[id] = callback;\n    this.responseCallbacks[id].method = method;\n};\n/**\nTimeout all requests when the end/error event is fired\n\n@method _timeout\n*/\nIpcProvider.prototype._timeout = function () {\n    for (var key in this.responseCallbacks) {\n        if (this.responseCallbacks.hasOwnProperty(key)) {\n            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\n            delete this.responseCallbacks[key];\n        }\n    }\n};\n/**\n Try to reconnect\n\n @method reconnect\n */\nIpcProvider.prototype.reconnect = function () {\n    this.connection.connect({ path: this.path });\n};\nIpcProvider.prototype.send = function (payload, callback) {\n    // try reconnect, when connection is gone\n    if (!this.connection.writable)\n        this.connection.connect({ path: this.path });\n    this.connection.write(JSON.stringify(payload));\n    this._addResponseCallback(payload, callback);\n};\n/**\nSubscribes to provider events.provider\n\n@method on\n@param {String} type    'notification', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\nIpcProvider.prototype.on = function (type, callback) {\n    if (typeof callback !== 'function')\n        throw new Error('The second parameter callback must be a function.');\n    switch (type) {\n        case 'data':\n            this.notificationCallbacks.push(callback);\n            break;\n        // adds error, end, timeout, connect\n        default:\n            this.connection.on(type, callback);\n            break;\n    }\n};\n/**\n Subscribes to provider events.provider\n\n @method on\n @param {String} type    'connect', 'error', 'end' or 'data'\n @param {Function} callback   the callback to call\n */\nIpcProvider.prototype.once = function (type, callback) {\n    if (typeof callback !== 'function')\n        throw new Error('The second parameter callback must be a function.');\n    this.connection.once(type, callback);\n};\n/**\nRemoves event listener\n\n@method removeListener\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\nIpcProvider.prototype.removeListener = function (type, callback) {\n    var _this = this;\n    switch (type) {\n        case 'data':\n            this.notificationCallbacks.forEach(function (cb, index) {\n                if (cb === callback)\n                    _this.notificationCallbacks.splice(index, 1);\n            });\n            break;\n        default:\n            this.connection.removeListener(type, callback);\n            break;\n    }\n};\n/**\nRemoves all event listeners\n\n@method removeAllListeners\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n*/\nIpcProvider.prototype.removeAllListeners = function (type) {\n    switch (type) {\n        case 'data':\n            this.notificationCallbacks = [];\n            break;\n        default:\n            this.connection.removeAllListeners(type);\n            break;\n    }\n};\n/**\nResets the providers, clears all callbacks\n\n@method reset\n*/\nIpcProvider.prototype.reset = function () {\n    this._timeout();\n    this.notificationCallbacks = [];\n    this.connection.removeAllListeners('error');\n    this.connection.removeAllListeners('end');\n    this.connection.removeAllListeners('timeout');\n    this.addDefaultEvents();\n};\n/**\n * Returns the desired boolean.\n *\n * @method supportsSubscriptions\n * @returns {boolean}\n */\nIpcProvider.prototype.supportsSubscriptions = function () {\n    return true;\n};\nmodule.exports = IpcProvider;\n"]},"metadata":{},"sourceType":"script"}