{"ast":null,"code":"const parse = require('./parse');\n\nconst eq = require('./eq');\n\nconst diff = (version1, version2) => {\n  if (eq(version1, version2)) {\n    return null;\n  } else {\n    const v1 = parse(version1);\n    const v2 = parse(version2);\n    const hasPre = v1.prerelease.length || v2.prerelease.length;\n    const prefix = hasPre ? 'pre' : '';\n    const defaultResult = hasPre ? 'prerelease' : '';\n\n    for (const key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key;\n        }\n      }\n    }\n\n    return defaultResult; // may be undefined\n  }\n};\n\nmodule.exports = diff;","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/@ledgerhq/devices/node_modules/semver/functions/diff.js"],"names":["parse","require","eq","diff","version1","version2","v1","v2","hasPre","prerelease","length","prefix","defaultResult","key","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEA,MAAME,IAAI,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACnC,MAAIH,EAAE,CAACE,QAAD,EAAWC,QAAX,CAAN,EAA4B;AAC1B,WAAO,IAAP;AACD,GAFD,MAEO;AACL,UAAMC,EAAE,GAAGN,KAAK,CAACI,QAAD,CAAhB;AACA,UAAMG,EAAE,GAAGP,KAAK,CAACK,QAAD,CAAhB;AACA,UAAMG,MAAM,GAAGF,EAAE,CAACG,UAAH,CAAcC,MAAd,IAAwBH,EAAE,CAACE,UAAH,CAAcC,MAArD;AACA,UAAMC,MAAM,GAAGH,MAAM,GAAG,KAAH,GAAW,EAAhC;AACA,UAAMI,aAAa,GAAGJ,MAAM,GAAG,YAAH,GAAkB,EAA9C;;AACA,SAAK,MAAMK,GAAX,IAAkBP,EAAlB,EAAsB;AACpB,UAAIO,GAAG,KAAK,OAAR,IAAmBA,GAAG,KAAK,OAA3B,IAAsCA,GAAG,KAAK,OAAlD,EAA2D;AACzD,YAAIP,EAAE,CAACO,GAAD,CAAF,KAAYN,EAAE,CAACM,GAAD,CAAlB,EAAyB;AACvB,iBAAOF,MAAM,GAAGE,GAAhB;AACD;AACF;AACF;;AACD,WAAOD,aAAP,CAbK,CAagB;AACtB;AACF,CAlBD;;AAmBAE,MAAM,CAACC,OAAP,GAAiBZ,IAAjB","sourcesContent":["const parse = require('./parse')\nconst eq = require('./eq')\n\nconst diff = (version1, version2) => {\n  if (eq(version1, version2)) {\n    return null\n  } else {\n    const v1 = parse(version1)\n    const v2 = parse(version2)\n    const hasPre = v1.prerelease.length || v2.prerelease.length\n    const prefix = hasPre ? 'pre' : ''\n    const defaultResult = hasPre ? 'prerelease' : ''\n    for (const key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key\n        }\n      }\n    }\n    return defaultResult // may be undefined\n  }\n}\nmodule.exports = diff\n"]},"metadata":{},"sourceType":"script"}