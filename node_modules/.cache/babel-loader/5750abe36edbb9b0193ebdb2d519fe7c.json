{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}\n\nexport function isBytesLike(value) {\n  return isHexString(value) && !(value.length % 2) || isBytes(value);\n}\nexport function isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (value.length == null) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n\n    if (typeof v !== \"number\" || v < 0 || v >= 256 || v % 1) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n  const objects = items.map(item => arrayify(item));\n  const length = objects.reduce((accum, item) => accum + item.length, 0);\n  const result = new Uint8Array(length);\n  objects.reduce((offset, object) => {\n    result.set(object, offset);\n    return offset + object.length;\n  }, 0);\n  return addSlice(result);\n}\nexport function stripZeros(value) {\n  let result = arrayify(value);\n\n  if (result.length === 0) {\n    return result;\n  } // Find the first non-zero entry\n\n\n  let start = 0;\n\n  while (start < result.length && result[start] === 0) {\n    start++;\n  } // If we started with zeros, strip them\n\n\n  if (start) {\n    result = result.slice(start);\n  }\n\n  return result;\n}\nexport function zeroPad(value, length) {\n  value = arrayify(value);\n\n  if (value.length > length) {\n    logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n  }\n\n  const result = new Uint8Array(length);\n  result.set(value, length - value.length);\n  return addSlice(result);\n}\nexport function isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid hexlify value\");\n    let hex = \"\";\n\n    while (value) {\n      hex = HexCharacters[value & 0x0f] + hex;\n      value = Math.floor(value / 16);\n    }\n\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = \"0\" + hex;\n      }\n\n      return \"0x\" + hex;\n    }\n\n    return \"0x00\";\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    return value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    if (value.length % 2) {\n      if (options.hexPad === \"left\") {\n        value = \"0x0\" + value.substring(2);\n      } else if (options.hexPad === \"right\") {\n        value += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    return value.toLowerCase();\n  }\n\n  if (isBytes(value)) {\n    let result = \"0x\";\n\n    for (let i = 0; i < value.length; i++) {\n      let v = value[i];\n      result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n\n    return result;\n  }\n\n  return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\n\nexport function hexDataLength(data) {\n  if (typeof data !== \"string\") {\n    data = hexlify(data);\n  } else if (!isHexString(data) || data.length % 2) {\n    return null;\n  }\n\n  return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n  if (typeof data !== \"string\") {\n    data = hexlify(data);\n  } else if (!isHexString(data) || data.length % 2) {\n    logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n  }\n\n  offset = 2 + 2 * offset;\n\n  if (endOffset != null) {\n    return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n  }\n\n  return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n  let result = \"0x\";\n  items.forEach(item => {\n    result += hexlify(item).substring(2);\n  });\n  return result;\n}\nexport function hexValue(value) {\n  const trimmed = hexStripZeros(hexlify(value, {\n    hexPad: \"left\"\n  }));\n\n  if (trimmed === \"0x\") {\n    return \"0x0\";\n  }\n\n  return trimmed;\n}\nexport function hexStripZeros(value) {\n  if (typeof value !== \"string\") {\n    value = hexlify(value);\n  }\n\n  if (!isHexString(value)) {\n    logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n  }\n\n  value = value.substring(2);\n  let offset = 0;\n\n  while (offset < value.length && value[offset] === \"0\") {\n    offset++;\n  }\n\n  return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n  if (typeof value !== \"string\") {\n    value = hexlify(value);\n  } else if (!isHexString(value)) {\n    logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n  }\n\n  if (value.length > 2 * length + 2) {\n    logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n  }\n\n  while (value.length < 2 * length + 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n\n  return value;\n}\nexport function splitSignature(signature) {\n  const result = {\n    r: \"0x\",\n    s: \"0x\",\n    _vs: \"0x\",\n    recoveryParam: 0,\n    v: 0\n  };\n\n  if (isBytesLike(signature)) {\n    const bytes = arrayify(signature);\n\n    if (bytes.length !== 65) {\n      logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n    } // Get the r, s and v\n\n\n    result.r = hexlify(bytes.slice(0, 32));\n    result.s = hexlify(bytes.slice(32, 64));\n    result.v = bytes[64]; // Allow a recid to be used as the v\n\n    if (result.v < 27) {\n      if (result.v === 0 || result.v === 1) {\n        result.v += 27;\n      } else {\n        logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n      }\n    } // Compute recoveryParam from v\n\n\n    result.recoveryParam = 1 - result.v % 2; // Compute _vs from recoveryParam and s\n\n    if (result.recoveryParam) {\n      bytes[32] |= 0x80;\n    }\n\n    result._vs = hexlify(bytes.slice(32, 64));\n  } else {\n    result.r = signature.r;\n    result.s = signature.s;\n    result.v = signature.v;\n    result.recoveryParam = signature.recoveryParam;\n    result._vs = signature._vs; // If the _vs is available, use it to populate missing s, v and recoveryParam\n    // and verify non-missing s, v and recoveryParam\n\n    if (result._vs != null) {\n      const vs = zeroPad(arrayify(result._vs), 32);\n      result._vs = hexlify(vs); // Set or check the recid\n\n      const recoveryParam = vs[0] >= 128 ? 1 : 0;\n\n      if (result.recoveryParam == null) {\n        result.recoveryParam = recoveryParam;\n      } else if (result.recoveryParam !== recoveryParam) {\n        logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n      } // Set or check the s\n\n\n      vs[0] &= 0x7f;\n      const s = hexlify(vs);\n\n      if (result.s == null) {\n        result.s = s;\n      } else if (result.s !== s) {\n        logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n      }\n    } // Use recid and v to populate each other\n\n\n    if (result.recoveryParam == null) {\n      if (result.v == null) {\n        logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n      } else if (result.v === 0 || result.v === 1) {\n        result.recoveryParam = result.v;\n      } else {\n        result.recoveryParam = 1 - result.v % 2;\n      }\n    } else {\n      if (result.v == null) {\n        result.v = 27 + result.recoveryParam;\n      } else if (result.recoveryParam !== 1 - result.v % 2) {\n        logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n      }\n    }\n\n    if (result.r == null || !isHexString(result.r)) {\n      logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n    } else {\n      result.r = hexZeroPad(result.r, 32);\n    }\n\n    if (result.s == null || !isHexString(result.s)) {\n      logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n    } else {\n      result.s = hexZeroPad(result.s, 32);\n    }\n\n    const vs = arrayify(result.s);\n\n    if (vs[0] >= 128) {\n      logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n    }\n\n    if (result.recoveryParam) {\n      vs[0] |= 0x80;\n    }\n\n    const _vs = hexlify(vs);\n\n    if (result._vs) {\n      if (!isHexString(result._vs)) {\n        logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n      }\n\n      result._vs = hexZeroPad(result._vs, 32);\n    } // Set or check the _vs\n\n\n    if (result._vs == null) {\n      result._vs = _vs;\n    } else if (result._vs !== _vs) {\n      logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n    }\n  }\n\n  return result;\n}\nexport function joinSignature(signature) {\n  signature = splitSignature(signature);\n  return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? \"0x1c\" : \"0x1b\"]));\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (value.length == null) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (typeof (v) !== \"number\" || v < 0 || v >= 256 || (v % 1)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0x0f] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else if (result.recoveryParam !== (1 - (result.v % 2))) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}