{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/names.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _localStorage$getItem,\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport EventEmitter from 'events';\nimport { useConnectionConfig, MAINNET_URL } from '../connection';\nimport { useListener } from '../utils';\nimport { clusterForEndpoint } from '../clusters';\nimport { useCallback } from 'react';\nimport { PublicKey } from '@solana/web3.js';\nimport { TokenListProvider } from '@solana/spl-token-registry'; // This list is used for deciding what to display in the popular tokens list\n// in the `AddTokenDialog`.\n//\n// Icons, names, and symbols are fetched not from here, but from the\n// @solana/spl-token-registry. To add an icon or token name to the wallet,\n// add the mints to that package. To add a token to the `AddTokenDialog`,\n// add the `mintAddress` here. The rest of the fields are not used.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst POPULAR_TOKENS = {\n  [MAINNET_URL]: [{\n    mintAddress: 'SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt',\n    tokenName: 'Serum',\n    tokenSymbol: 'SRM',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x476c5E26a75bd202a9683ffD34359C0CC15be0fF/logo.png'\n  }, {\n    mintAddress: 'MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L',\n    tokenName: 'MegaSerum',\n    tokenSymbol: 'MSRM',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x476c5E26a75bd202a9683ffD34359C0CC15be0fF/logo.png'\n  }, {\n    tokenSymbol: 'BTC',\n    mintAddress: '9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E',\n    tokenName: 'Wrapped Bitcoin',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/bitcoin/info/logo.png'\n  }, {\n    tokenSymbol: 'ETH',\n    mintAddress: '2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk',\n    tokenName: 'Wrapped Ethereum',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png'\n  }, {\n    tokenSymbol: 'FTT',\n    mintAddress: 'AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3',\n    tokenName: 'Wrapped FTT',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0x50D1c9771902476076eCFc8B2A83Ad6b9355a4c9/logo.png'\n  }, {\n    tokenSymbol: 'YFI',\n    mintAddress: '3JSf5tPeuscJGtaCp5giEiDhv51gQ4v3zWg8DGgyLfAB',\n    tokenName: 'Wrapped YFI',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e/logo.png'\n  }, {\n    tokenSymbol: 'LINK',\n    mintAddress: 'CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG',\n    tokenName: 'Wrapped Chainlink',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x514910771AF9Ca656af840dff83E8264EcF986CA/logo.png'\n  }, {\n    tokenSymbol: 'XRP',\n    mintAddress: 'Ga2AXHpfAF6mv2ekZwcsJFqu7wB4NV331qNH7fW9Nst8',\n    tokenName: 'Wrapped XRP',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ripple/info/logo.png'\n  }, {\n    tokenSymbol: 'USDT',\n    mintAddress: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',\n    tokenName: 'USDT',\n    icon: 'https://cdn.jsdelivr.net/gh/solana-labs/explorer/public/tokens/usdt.svg'\n  }, {\n    tokenSymbol: 'WUSDT',\n    mintAddress: 'BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4',\n    tokenName: 'Wrapped USD Tether',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png'\n  }, {\n    tokenSymbol: 'USDC',\n    mintAddress: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    tokenName: 'USD Coin',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'\n  }, {\n    tokenSymbol: 'WUSDC',\n    mintAddress: 'BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW',\n    tokenName: 'Wrapped USDC',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',\n    deprecated: true\n  }, {\n    tokenSymbol: 'SUSHI',\n    mintAddress: 'AR1Mtgh7zAtxuxGd2XPovXPVjcSdY3i4rQYisNadjfKy',\n    tokenName: 'Wrapped SUSHI',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B3595068778DD592e39A122f4f5a5cF09C90fE2/logo.png'\n  }, {\n    tokenSymbol: 'ALEPH',\n    mintAddress: 'CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K',\n    tokenName: 'Wrapped ALEPH',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/6996a371cd02f516506a8f092eeb29888501447c/blockchains/nuls/assets/NULSd6HgyZkiqLnBzTaeSQfx1TNg2cqbzq51h/logo.png'\n  }, {\n    tokenSymbol: 'SXP',\n    mintAddress: 'SF3oTvfWzEP3DTwGSvUXRrGTvr75pdZNnBLAH9bzMuX',\n    tokenName: 'Wrapped SXP',\n    icon: 'https://github.com/trustwallet/assets/raw/b0ab88654fe64848da80d982945e4db06e197d4f/blockchains/ethereum/assets/0x8CE9137d39326AD0cD6491fb5CC0CbA0e089b6A9/logo.png'\n  }, {\n    tokenSymbol: 'HGET',\n    mintAddress: 'BtZQfWqDGbk9Wf2rXEiWyQBdBY1etnUUn6zEphvVS7yN',\n    tokenName: 'Wrapped HGET'\n  }, {\n    tokenSymbol: 'CREAM',\n    mintAddress: '5Fu5UUgbjpUvdBveb3a1JTNirL8rXtiYeSMWvKjtUNQv',\n    tokenName: 'Wrapped CREAM',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/4c82c2a409f18a4dd96a504f967a55a8fe47026d/blockchains/smartchain/assets/0xd4CB328A82bDf5f03eB737f37Fa6B370aef3e888/logo.png'\n  }, {\n    tokenSymbol: 'UBXT',\n    mintAddress: '873KLxCbz7s9Kc4ZzgYRtNmhfkQrhfyWGZJBmyCbC3ei',\n    tokenName: 'Wrapped UBXT'\n  }, {\n    tokenSymbol: 'HNT',\n    mintAddress: 'HqB7uswoVg4suaQiDP3wjxob1G5WdZ144zhdStwMCq7e',\n    tokenName: 'Wrapped HNT'\n  }, {\n    tokenSymbol: 'FRONT',\n    mintAddress: '9S4t2NEAiJVMvPdRYKVrfJpBafPBLtvbvyS3DecojQHw',\n    tokenName: 'Wrapped FRONT',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/6e375e4e5fb0ffe09ed001bae1ef8ca1d6c86034/blockchains/ethereum/assets/0xf8C3527CC04340b208C854E985240c02F7B7793f/logo.png'\n  }, {\n    tokenSymbol: 'AKRO',\n    mintAddress: '6WNVCuxCGJzNjmMZoKyhZJwvJ5tYpsLyAtagzYASqBoF',\n    tokenName: 'Wrapped AKRO',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/878dcab0fab90e6593bcb9b7d941be4915f287dc/blockchains/ethereum/assets/0xb2734a4Cec32C81FDE26B0024Ad3ceB8C9b34037/logo.png'\n  }, {\n    tokenSymbol: 'HXRO',\n    mintAddress: 'DJafV9qemGp7mLMEn5wrfqaFwxsbLgUsGVS16zKRk9kc',\n    tokenName: 'Wrapped HXRO'\n  }, {\n    tokenSymbol: 'UNI',\n    mintAddress: 'DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw',\n    tokenName: 'Wrapped UNI',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/08d734b5e6ec95227dc50efef3a9cdfea4c398a1/blockchains/ethereum/assets/0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984/logo.png'\n  }, {\n    tokenSymbol: 'MATH',\n    mintAddress: 'GeDS162t9yGJuLEHPWXXGrb1zwkzinCgRwnT8vHYjKza',\n    tokenName: 'Wrapped MATH'\n  }, {\n    tokenSymbol: 'TOMO',\n    mintAddress: 'GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd',\n    tokenName: 'Wrapped TOMO',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/08d734b5e6ec95227dc50efef3a9cdfea4c398a1/blockchains/tomochain/info/logo.png'\n  }, {\n    tokenSymbol: 'LUA',\n    mintAddress: 'EqWCKXfs3x47uVosDpTRgFniThL9Y8iCztJaapxbEaVX',\n    tokenName: 'Wrapped LUA',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/2d2491130e6beda208ba4fc6df028a82a0106ab6/blockchains/ethereum/assets/0xB1f66997A5760428D3a87D68b90BfE0aE64121cC/logo.png'\n  }, {\n    tokenSymbol: 'FIDA',\n    mintAddress: 'EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp',\n    tokenName: 'Bonfida Token',\n    icon: 'https://raw.githubusercontent.com/dr497/awesome-serum-markets/master/icons/fida.svg'\n  }, {\n    tokenSymbol: 'LQID',\n    mintAddress: 'A6aY2ceogBz1VaXBxm1j2eJuNZMRqrWUAnKecrMH85zj',\n    tokenName: 'LQID',\n    icon: 'https://raw.githubusercontent.com/dr497/awesome-serum-markets/master/icons/lqid.svg'\n  }, {\n    tokenSymbol: 'SECO',\n    mintAddress: '7CnFGR9mZWyAtWxPcVuTewpyC3A3MDW4nLsu5NY6PDbd',\n    tokenName: 'Serum Ecosystem Pool Token'\n  }, {\n    tokenSymbol: 'HOLY',\n    mintAddress: '3GECTP7H4Tww3w8jEPJCJtXUtXxiZty31S9szs84CcwQ',\n    tokenName: 'Holy Trinity Pool'\n  }, {\n    tokenSymbol: 'KIN',\n    mintAddress: 'kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6',\n    tokenName: 'KIN',\n    icon: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/kin/info/logo.png'\n  }, {\n    tokenSymbol: 'MAPS',\n    mintAddress: 'MAPS41MDahZ9QdKXhVa4dWB9RuyfV4XqhyAZ8XcYepb',\n    tokenName: 'Maps.me Token'\n  }, {\n    tokenSymbol: 'RAY',\n    mintAddress: '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R',\n    tokenName: 'Raydium',\n    icon: 'https://raw.githubusercontent.com/raydium-io/media-assets/master/logo.svg'\n  }, {\n    tokenSymbol: 'OXY',\n    mintAddress: 'z3dn17yLaGMKffVogeFHQ9zWVcXgqgf3PQnDsNs2g6M',\n    tokenName: 'Oxygen Protocol',\n    icon: 'https://raw.githubusercontent.com/nathanielparke/awesome-serum-markets/master/icons/oxy.svg'\n  }, {\n    tokenSymbol: 'COPE',\n    mintAddress: '3K6rftdAaQYMPunrtNRHgnK2UAtjm2JwyT2oCiTDouYE',\n    tokenName: 'COPE',\n    icon: 'https://cdn.jsdelivr.net/gh/solana-labs/token-list/assets/mainnet/3K6rftdAaQYMPunrtNRHgnK2UAtjm2JwyT2oCiTDouYE/logo.jpg'\n  }, {\n    tokenSymbol: 'BRZ',\n    mintAddress: 'FtgGSFADXBtroxq8VCausXRr2of47QBf5AS1NtZCu4GD',\n    tokenName: 'Brazilian Digital Token',\n    icon: 'https://cdn.jsdelivr.net/gh/solana-labs/explorer/public/tokens/brz.png'\n  }, {\n    tokenSymbol: 'STEP',\n    mintAddress: 'StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT',\n    tokenName: 'Step',\n    icon: 'https://cdn.jsdelivr.net/gh/solana-labs/token-list/assets/mainnet/StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT/logo.png'\n  }]\n};\nconst TokenListContext = /*#__PURE__*/React.createContext({});\nexport function useTokenInfos() {\n  _s();\n\n  const {\n    tokenInfos\n  } = useContext(TokenListContext);\n  return tokenInfos;\n}\n\n_s(useTokenInfos, \"KGgMdzMPYo2VjzynSi1lo5wp+o0=\");\n\nexport function TokenRegistryProvider(props) {\n  _s2();\n\n  const {\n    endpoint\n  } = useConnectionConfig();\n  const [tokenInfos, setTokenInfos] = useState(null);\n  useEffect(() => {\n    const tokenListProvider = new TokenListProvider();\n    tokenListProvider.resolve().then(tokenListContainer => {\n      const cluster = clusterForEndpoint(endpoint);\n      const filteredTokenListContainer = tokenListContainer === null || tokenListContainer === void 0 ? void 0 : tokenListContainer.filterByClusterSlug(cluster === null || cluster === void 0 ? void 0 : cluster.name);\n      const tokenInfos = tokenListContainer !== filteredTokenListContainer ? filteredTokenListContainer === null || filteredTokenListContainer === void 0 ? void 0 : filteredTokenListContainer.getList() : null; // Workaround for filter return all on unknown slug\n\n      setTokenInfos(tokenInfos);\n    });\n  }, [endpoint]);\n  return /*#__PURE__*/_jsxDEV(TokenListContext.Provider, {\n    value: {\n      tokenInfos\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(TokenRegistryProvider, \"enExSoqctseR4TFtVYrpMCeE7Cw=\", false, function () {\n  return [useConnectionConfig];\n});\n\n_c = TokenRegistryProvider;\nconst customTokenNamesByNetwork = JSON.parse((_localStorage$getItem = localStorage.getItem('tokenNames')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : '{}');\nconst nameUpdated = new EventEmitter();\nnameUpdated.setMaxListeners(100);\nexport function useTokenInfo(mint) {\n  _s3();\n\n  const {\n    endpoint\n  } = useConnectionConfig();\n  console.log(endpoint);\n  useListener(nameUpdated, 'update');\n  const tokenInfos = useTokenInfos();\n  return getTokenInfo(mint, endpoint, tokenInfos);\n}\n\n_s3(useTokenInfo, \"fFLtMu7p3177D2Odndc6sse6xko=\", false, function () {\n  return [useConnectionConfig, useListener, useTokenInfos];\n});\n\nexport function getTokenInfo(mint, endpoint, tokenInfos) {\n  var _customTokenNamesByNe;\n\n  if (!mint) {\n    return {\n      name: null,\n      symbol: null\n    };\n  }\n\n  let info = customTokenNamesByNetwork === null || customTokenNamesByNetwork === void 0 ? void 0 : (_customTokenNamesByNe = customTokenNamesByNetwork[endpoint]) === null || _customTokenNamesByNe === void 0 ? void 0 : _customTokenNamesByNe[mint.toBase58()];\n  let match = tokenInfos === null || tokenInfos === void 0 ? void 0 : tokenInfos.find(tokenInfo => tokenInfo.address === mint.toBase58());\n\n  if (match) {\n    if (!info) {\n      info = { ...match,\n        logoUri: match.logoURI\n      };\n    } // The user has overridden a name locally.\n    else {\n        info = { ...match,\n          ...info,\n          logoUri: match.logoURI\n        };\n      }\n  }\n\n  return { ...info\n  };\n}\nexport function useUpdateTokenName() {\n  _s4();\n\n  const {\n    endpoint\n  } = useConnectionConfig();\n  return useCallback(function updateTokenName(mint, name, symbol) {\n    if (!name || !symbol) {\n      if (name) {\n        symbol = name;\n      } else if (symbol) {\n        name = symbol;\n      } else {\n        return;\n      }\n    }\n\n    if (!customTokenNamesByNetwork[endpoint]) {\n      customTokenNamesByNetwork[endpoint] = {};\n    }\n\n    customTokenNamesByNetwork[endpoint][mint.toBase58()] = {\n      name,\n      symbol\n    };\n    localStorage.setItem('tokenNames', JSON.stringify(customTokenNamesByNetwork));\n    nameUpdated.emit('update');\n  }, [endpoint]);\n} // Returns tokenInfos for the popular tokens list.\n\n_s4(useUpdateTokenName, \"Z8Q5OWMc3tbVo+rNGC7rAs2WmFg=\", false, function () {\n  return [useConnectionConfig];\n});\n\nexport function usePopularTokens() {\n  _s5();\n\n  const tokenInfos = useTokenInfos();\n  const {\n    endpoint\n  } = useConnectionConfig();\n  return (!POPULAR_TOKENS[endpoint] ? [] : POPULAR_TOKENS[endpoint]).map(tok => getTokenInfo(new PublicKey(tok.mintAddress), endpoint, tokenInfos));\n}\n\n_s5(usePopularTokens, \"ClG+iMvlFsEhyUj8LFHnV0CnQ6A=\", false, function () {\n  return [useTokenInfos, useConnectionConfig];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenRegistryProvider\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/names.js"],"names":["React","useContext","useState","useEffect","EventEmitter","useConnectionConfig","MAINNET_URL","useListener","clusterForEndpoint","useCallback","PublicKey","TokenListProvider","POPULAR_TOKENS","mintAddress","tokenName","tokenSymbol","icon","deprecated","TokenListContext","createContext","useTokenInfos","tokenInfos","TokenRegistryProvider","props","endpoint","setTokenInfos","tokenListProvider","resolve","then","tokenListContainer","cluster","filteredTokenListContainer","filterByClusterSlug","name","getList","children","customTokenNamesByNetwork","JSON","parse","localStorage","getItem","nameUpdated","setMaxListeners","useTokenInfo","mint","console","log","getTokenInfo","symbol","info","toBase58","match","find","tokenInfo","address","logoUri","logoURI","useUpdateTokenName","updateTokenName","setItem","stringify","emit","usePopularTokens","map","tok"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport EventEmitter from 'events';\nimport { useConnectionConfig, MAINNET_URL } from '../connection';\nimport { useListener } from '../utils';\nimport { clusterForEndpoint } from '../clusters';\nimport { useCallback } from 'react';\nimport { PublicKey } from '@solana/web3.js';\nimport { TokenListProvider } from '@solana/spl-token-registry';\n\n// This list is used for deciding what to display in the popular tokens list\n// in the `AddTokenDialog`.\n//\n// Icons, names, and symbols are fetched not from here, but from the\n// @solana/spl-token-registry. To add an icon or token name to the wallet,\n// add the mints to that package. To add a token to the `AddTokenDialog`,\n// add the `mintAddress` here. The rest of the fields are not used.\nconst POPULAR_TOKENS = {\n  [MAINNET_URL]: [\n    {\n      mintAddress: 'SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt',\n      tokenName: 'Serum',\n      tokenSymbol: 'SRM',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x476c5E26a75bd202a9683ffD34359C0CC15be0fF/logo.png',\n    },\n    {\n      mintAddress: 'MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L',\n      tokenName: 'MegaSerum',\n      tokenSymbol: 'MSRM',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x476c5E26a75bd202a9683ffD34359C0CC15be0fF/logo.png',\n    },\n    {\n      tokenSymbol: 'BTC',\n      mintAddress: '9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E',\n      tokenName: 'Wrapped Bitcoin',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/bitcoin/info/logo.png',\n    },\n    {\n      tokenSymbol: 'ETH',\n      mintAddress: '2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk',\n      tokenName: 'Wrapped Ethereum',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n    },\n    {\n      tokenSymbol: 'FTT',\n      mintAddress: 'AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3',\n      tokenName: 'Wrapped FTT',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0x50D1c9771902476076eCFc8B2A83Ad6b9355a4c9/logo.png',\n    },\n    {\n      tokenSymbol: 'YFI',\n      mintAddress: '3JSf5tPeuscJGtaCp5giEiDhv51gQ4v3zWg8DGgyLfAB',\n      tokenName: 'Wrapped YFI',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e/logo.png',\n    },\n    {\n      tokenSymbol: 'LINK',\n      mintAddress: 'CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG',\n      tokenName: 'Wrapped Chainlink',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x514910771AF9Ca656af840dff83E8264EcF986CA/logo.png',\n    },\n    {\n      tokenSymbol: 'XRP',\n      mintAddress: 'Ga2AXHpfAF6mv2ekZwcsJFqu7wB4NV331qNH7fW9Nst8',\n      tokenName: 'Wrapped XRP',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ripple/info/logo.png',\n    },\n    {\n      tokenSymbol: 'USDT',\n      mintAddress: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',\n      tokenName: 'USDT',\n      icon:\n        'https://cdn.jsdelivr.net/gh/solana-labs/explorer/public/tokens/usdt.svg',\n    },\n    {\n      tokenSymbol: 'WUSDT',\n      mintAddress: 'BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4',\n      tokenName: 'Wrapped USD Tether',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png',\n    },\n    {\n      tokenSymbol: 'USDC',\n      mintAddress: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n      tokenName: 'USD Coin',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',\n    },\n    {\n      tokenSymbol: 'WUSDC',\n      mintAddress: 'BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW',\n      tokenName: 'Wrapped USDC',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',\n      deprecated: true,\n    },\n    {\n      tokenSymbol: 'SUSHI',\n      mintAddress: 'AR1Mtgh7zAtxuxGd2XPovXPVjcSdY3i4rQYisNadjfKy',\n      tokenName: 'Wrapped SUSHI',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B3595068778DD592e39A122f4f5a5cF09C90fE2/logo.png',\n    },\n    {\n      tokenSymbol: 'ALEPH',\n      mintAddress: 'CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K',\n      tokenName: 'Wrapped ALEPH',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/6996a371cd02f516506a8f092eeb29888501447c/blockchains/nuls/assets/NULSd6HgyZkiqLnBzTaeSQfx1TNg2cqbzq51h/logo.png',\n    },\n    {\n      tokenSymbol: 'SXP',\n      mintAddress: 'SF3oTvfWzEP3DTwGSvUXRrGTvr75pdZNnBLAH9bzMuX',\n      tokenName: 'Wrapped SXP',\n      icon:\n        'https://github.com/trustwallet/assets/raw/b0ab88654fe64848da80d982945e4db06e197d4f/blockchains/ethereum/assets/0x8CE9137d39326AD0cD6491fb5CC0CbA0e089b6A9/logo.png',\n    },\n    {\n      tokenSymbol: 'HGET',\n      mintAddress: 'BtZQfWqDGbk9Wf2rXEiWyQBdBY1etnUUn6zEphvVS7yN',\n      tokenName: 'Wrapped HGET',\n    },\n    {\n      tokenSymbol: 'CREAM',\n      mintAddress: '5Fu5UUgbjpUvdBveb3a1JTNirL8rXtiYeSMWvKjtUNQv',\n      tokenName: 'Wrapped CREAM',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/4c82c2a409f18a4dd96a504f967a55a8fe47026d/blockchains/smartchain/assets/0xd4CB328A82bDf5f03eB737f37Fa6B370aef3e888/logo.png',\n    },\n    {\n      tokenSymbol: 'UBXT',\n      mintAddress: '873KLxCbz7s9Kc4ZzgYRtNmhfkQrhfyWGZJBmyCbC3ei',\n      tokenName: 'Wrapped UBXT',\n    },\n    {\n      tokenSymbol: 'HNT',\n      mintAddress: 'HqB7uswoVg4suaQiDP3wjxob1G5WdZ144zhdStwMCq7e',\n      tokenName: 'Wrapped HNT',\n    },\n    {\n      tokenSymbol: 'FRONT',\n      mintAddress: '9S4t2NEAiJVMvPdRYKVrfJpBafPBLtvbvyS3DecojQHw',\n      tokenName: 'Wrapped FRONT',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/6e375e4e5fb0ffe09ed001bae1ef8ca1d6c86034/blockchains/ethereum/assets/0xf8C3527CC04340b208C854E985240c02F7B7793f/logo.png',\n    },\n    {\n      tokenSymbol: 'AKRO',\n      mintAddress: '6WNVCuxCGJzNjmMZoKyhZJwvJ5tYpsLyAtagzYASqBoF',\n      tokenName: 'Wrapped AKRO',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/878dcab0fab90e6593bcb9b7d941be4915f287dc/blockchains/ethereum/assets/0xb2734a4Cec32C81FDE26B0024Ad3ceB8C9b34037/logo.png',\n    },\n    {\n      tokenSymbol: 'HXRO',\n      mintAddress: 'DJafV9qemGp7mLMEn5wrfqaFwxsbLgUsGVS16zKRk9kc',\n      tokenName: 'Wrapped HXRO',\n    },\n    {\n      tokenSymbol: 'UNI',\n      mintAddress: 'DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw',\n      tokenName: 'Wrapped UNI',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/08d734b5e6ec95227dc50efef3a9cdfea4c398a1/blockchains/ethereum/assets/0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984/logo.png',\n    },\n    {\n      tokenSymbol: 'MATH',\n      mintAddress: 'GeDS162t9yGJuLEHPWXXGrb1zwkzinCgRwnT8vHYjKza',\n      tokenName: 'Wrapped MATH',\n    },\n    {\n      tokenSymbol: 'TOMO',\n      mintAddress: 'GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd',\n      tokenName: 'Wrapped TOMO',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/08d734b5e6ec95227dc50efef3a9cdfea4c398a1/blockchains/tomochain/info/logo.png',\n    },\n    {\n      tokenSymbol: 'LUA',\n      mintAddress: 'EqWCKXfs3x47uVosDpTRgFniThL9Y8iCztJaapxbEaVX',\n      tokenName: 'Wrapped LUA',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/2d2491130e6beda208ba4fc6df028a82a0106ab6/blockchains/ethereum/assets/0xB1f66997A5760428D3a87D68b90BfE0aE64121cC/logo.png',\n    },\n    {\n      tokenSymbol: 'FIDA',\n      mintAddress: 'EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp',\n      tokenName: 'Bonfida Token',\n      icon:\n        'https://raw.githubusercontent.com/dr497/awesome-serum-markets/master/icons/fida.svg',\n    },\n    {\n      tokenSymbol: 'LQID',\n      mintAddress: 'A6aY2ceogBz1VaXBxm1j2eJuNZMRqrWUAnKecrMH85zj',\n      tokenName: 'LQID',\n      icon:\n        'https://raw.githubusercontent.com/dr497/awesome-serum-markets/master/icons/lqid.svg',\n    },\n    {\n      tokenSymbol: 'SECO',\n      mintAddress: '7CnFGR9mZWyAtWxPcVuTewpyC3A3MDW4nLsu5NY6PDbd',\n      tokenName: 'Serum Ecosystem Pool Token',\n    },\n    {\n      tokenSymbol: 'HOLY',\n      mintAddress: '3GECTP7H4Tww3w8jEPJCJtXUtXxiZty31S9szs84CcwQ',\n      tokenName: 'Holy Trinity Pool',\n    },\n    {\n      tokenSymbol: 'KIN',\n      mintAddress: 'kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6',\n      tokenName: 'KIN',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/kin/info/logo.png',\n    },\n    {\n      tokenSymbol: 'MAPS',\n      mintAddress: 'MAPS41MDahZ9QdKXhVa4dWB9RuyfV4XqhyAZ8XcYepb',\n      tokenName: 'Maps.me Token',\n    },\n    {\n      tokenSymbol: 'RAY',\n      mintAddress: '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R',\n      tokenName: 'Raydium',\n      icon:\n        'https://raw.githubusercontent.com/raydium-io/media-assets/master/logo.svg',\n    },\n    {\n      tokenSymbol: 'OXY',\n      mintAddress: 'z3dn17yLaGMKffVogeFHQ9zWVcXgqgf3PQnDsNs2g6M',\n      tokenName: 'Oxygen Protocol',\n      icon:\n        'https://raw.githubusercontent.com/nathanielparke/awesome-serum-markets/master/icons/oxy.svg',\n    },\n    {\n      tokenSymbol: 'COPE',\n      mintAddress: '3K6rftdAaQYMPunrtNRHgnK2UAtjm2JwyT2oCiTDouYE',\n      tokenName: 'COPE',\n      icon:\n        'https://cdn.jsdelivr.net/gh/solana-labs/token-list/assets/mainnet/3K6rftdAaQYMPunrtNRHgnK2UAtjm2JwyT2oCiTDouYE/logo.jpg',\n    },\n    {\n      tokenSymbol: 'BRZ',\n      mintAddress: 'FtgGSFADXBtroxq8VCausXRr2of47QBf5AS1NtZCu4GD',\n      tokenName: 'Brazilian Digital Token',\n      icon:\n        'https://cdn.jsdelivr.net/gh/solana-labs/explorer/public/tokens/brz.png',\n    },\n    {\n      tokenSymbol: 'STEP',\n      mintAddress: 'StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT',\n      tokenName: 'Step',\n      icon:\n        'https://cdn.jsdelivr.net/gh/solana-labs/token-list/assets/mainnet/StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT/logo.png',\n    },\n  ],\n};\n\nconst TokenListContext = React.createContext({});\n\nexport function useTokenInfos() {\n  const { tokenInfos } = useContext(TokenListContext);\n  return tokenInfos;\n}\n\nexport function TokenRegistryProvider(props) {\n  const { endpoint } = useConnectionConfig();\n  const [tokenInfos, setTokenInfos] = useState(null);\n  useEffect(() => {\n    const tokenListProvider = new TokenListProvider();\n    tokenListProvider.resolve().then((tokenListContainer) => {\n      const cluster = clusterForEndpoint(endpoint);\n\n      const filteredTokenListContainer = tokenListContainer?.filterByClusterSlug(\n        cluster?.name,\n      );\n      const tokenInfos =\n        tokenListContainer !== filteredTokenListContainer\n          ? filteredTokenListContainer?.getList()\n          : null; // Workaround for filter return all on unknown slug\n      setTokenInfos(tokenInfos);\n    });\n  }, [endpoint]);\n\n  return (\n    <TokenListContext.Provider value={{ tokenInfos }}>\n      {props.children}\n    </TokenListContext.Provider>\n  );\n}\n\nconst customTokenNamesByNetwork = JSON.parse(\n  localStorage.getItem('tokenNames') ?? '{}',\n);\n\nconst nameUpdated = new EventEmitter();\nnameUpdated.setMaxListeners(100);\n\nexport function useTokenInfo(mint) {\n  const { endpoint } = useConnectionConfig();\n  console.log(endpoint);\n  useListener(nameUpdated, 'update');\n  const tokenInfos = useTokenInfos();\n  return getTokenInfo(mint, endpoint, tokenInfos);\n}\n\nexport function getTokenInfo(mint, endpoint, tokenInfos) {\n  if (!mint) {\n    return { name: null, symbol: null };\n  }\n\n  let info = customTokenNamesByNetwork?.[endpoint]?.[mint.toBase58()];\n  let match = tokenInfos?.find(\n    (tokenInfo) => tokenInfo.address === mint.toBase58(),\n  );\n\n  if (match) {\n    if (!info) {\n      info = { ...match, logoUri: match.logoURI };\n    }\n    // The user has overridden a name locally.\n    else {\n      info = { ...match, ...info, logoUri: match.logoURI };\n    }\n  }\n  return { ...info };\n}\n\nexport function useUpdateTokenName() {\n  const { endpoint } = useConnectionConfig();\n  return useCallback(\n    function updateTokenName(mint, name, symbol) {\n      if (!name || !symbol) {\n        if (name) {\n          symbol = name;\n        } else if (symbol) {\n          name = symbol;\n        } else {\n          return;\n        }\n      }\n      if (!customTokenNamesByNetwork[endpoint]) {\n        customTokenNamesByNetwork[endpoint] = {};\n      }\n      customTokenNamesByNetwork[endpoint][mint.toBase58()] = { name, symbol };\n      localStorage.setItem(\n        'tokenNames',\n        JSON.stringify(customTokenNamesByNetwork),\n      );\n      nameUpdated.emit('update');\n    },\n    [endpoint],\n  );\n}\n// Returns tokenInfos for the popular tokens list.\nexport function usePopularTokens() {\n  const tokenInfos = useTokenInfos();\n  const { endpoint } = useConnectionConfig();\n  return (!POPULAR_TOKENS[endpoint]\n    ? []\n    : POPULAR_TOKENS[endpoint]\n  ).map((tok) =>\n    getTokenInfo(new PublicKey(tok.mintAddress), endpoint, tokenInfos),\n  );\n}\n"]},"metadata":{},"sourceType":"module"}