{"ast":null,"code":"// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js');\n\nconst compare = require('../functions/compare.js');\n\nmodule.exports = (versions, range, options) => {\n  const set = [];\n  let min = null;\n  let prev = null;\n  const v = versions.sort((a, b) => compare(a, b, options));\n\n  for (const version of v) {\n    const included = satisfies(version, range, options);\n\n    if (included) {\n      prev = version;\n      if (!min) min = version;\n    } else {\n      if (prev) {\n        set.push([min, prev]);\n      }\n\n      prev = null;\n      min = null;\n    }\n  }\n\n  if (min) set.push([min, null]);\n  const ranges = [];\n\n  for (const [min, max] of set) {\n    if (min === max) ranges.push(min);else if (!max && min === v[0]) ranges.push('*');else if (!max) ranges.push(`>=${min}`);else if (min === v[0]) ranges.push(`<=${max}`);else ranges.push(`${min} - ${max}`);\n  }\n\n  const simplified = ranges.join(' || ');\n  const original = typeof range.raw === 'string' ? range.raw : String(range);\n  return simplified.length < original.length ? simplified : range;\n};","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/@ledgerhq/devices/node_modules/semver/ranges/simplify.js"],"names":["satisfies","require","compare","module","exports","versions","range","options","set","min","prev","v","sort","a","b","version","included","push","ranges","max","simplified","join","original","raw","String","length"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,2BAAD,CAAzB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,yBAAD,CAAvB;;AACAE,MAAM,CAACC,OAAP,GAAiB,CAACC,QAAD,EAAWC,KAAX,EAAkBC,OAAlB,KAA8B;AAC7C,QAAMC,GAAG,GAAG,EAAZ;AACA,MAAIC,GAAG,GAAG,IAAV;AACA,MAAIC,IAAI,GAAG,IAAX;AACA,QAAMC,CAAC,GAAGN,QAAQ,CAACO,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAUZ,OAAO,CAACW,CAAD,EAAIC,CAAJ,EAAOP,OAAP,CAA/B,CAAV;;AACA,OAAK,MAAMQ,OAAX,IAAsBJ,CAAtB,EAAyB;AACvB,UAAMK,QAAQ,GAAGhB,SAAS,CAACe,OAAD,EAAUT,KAAV,EAAiBC,OAAjB,CAA1B;;AACA,QAAIS,QAAJ,EAAc;AACZN,MAAAA,IAAI,GAAGK,OAAP;AACA,UAAI,CAACN,GAAL,EACEA,GAAG,GAAGM,OAAN;AACH,KAJD,MAIO;AACL,UAAIL,IAAJ,EAAU;AACRF,QAAAA,GAAG,CAACS,IAAJ,CAAS,CAACR,GAAD,EAAMC,IAAN,CAAT;AACD;;AACDA,MAAAA,IAAI,GAAG,IAAP;AACAD,MAAAA,GAAG,GAAG,IAAN;AACD;AACF;;AACD,MAAIA,GAAJ,EACED,GAAG,CAACS,IAAJ,CAAS,CAACR,GAAD,EAAM,IAAN,CAAT;AAEF,QAAMS,MAAM,GAAG,EAAf;;AACA,OAAK,MAAM,CAACT,GAAD,EAAMU,GAAN,CAAX,IAAyBX,GAAzB,EAA8B;AAC5B,QAAIC,GAAG,KAAKU,GAAZ,EACED,MAAM,CAACD,IAAP,CAAYR,GAAZ,EADF,KAEK,IAAI,CAACU,GAAD,IAAQV,GAAG,KAAKE,CAAC,CAAC,CAAD,CAArB,EACHO,MAAM,CAACD,IAAP,CAAY,GAAZ,EADG,KAEA,IAAI,CAACE,GAAL,EACHD,MAAM,CAACD,IAAP,CAAa,KAAIR,GAAI,EAArB,EADG,KAEA,IAAIA,GAAG,KAAKE,CAAC,CAAC,CAAD,CAAb,EACHO,MAAM,CAACD,IAAP,CAAa,KAAIE,GAAI,EAArB,EADG,KAGHD,MAAM,CAACD,IAAP,CAAa,GAAER,GAAI,MAAKU,GAAI,EAA5B;AACH;;AACD,QAAMC,UAAU,GAAGF,MAAM,CAACG,IAAP,CAAY,MAAZ,CAAnB;AACA,QAAMC,QAAQ,GAAG,OAAOhB,KAAK,CAACiB,GAAb,KAAqB,QAArB,GAAgCjB,KAAK,CAACiB,GAAtC,GAA4CC,MAAM,CAAClB,KAAD,CAAnE;AACA,SAAOc,UAAU,CAACK,MAAX,GAAoBH,QAAQ,CAACG,MAA7B,GAAsCL,UAAtC,GAAmDd,KAA1D;AACD,CAtCD","sourcesContent":["// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\nmodule.exports = (versions, range, options) => {\n  const set = []\n  let min = null\n  let prev = null\n  const v = versions.sort((a, b) => compare(a, b, options))\n  for (const version of v) {\n    const included = satisfies(version, range, options)\n    if (included) {\n      prev = version\n      if (!min)\n        min = version\n    } else {\n      if (prev) {\n        set.push([min, prev])\n      }\n      prev = null\n      min = null\n    }\n  }\n  if (min)\n    set.push([min, null])\n\n  const ranges = []\n  for (const [min, max] of set) {\n    if (min === max)\n      ranges.push(min)\n    else if (!max && min === v[0])\n      ranges.push('*')\n    else if (!max)\n      ranges.push(`>=${min}`)\n    else if (min === v[0])\n      ranges.push(`<=${max}`)\n    else\n      ranges.push(`${min} - ${max}`)\n  }\n  const simplified = ranges.join(' || ')\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\n  return simplified.length < original.length ? simplified : range\n}\n"]},"metadata":{},"sourceType":"script"}