{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddTokenDialog.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport { refreshWalletPublicKeys, useWallet, useWalletTokenAccounts } from '../utils/wallet';\nimport { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\nimport { useUpdateTokenName, usePopularTokens } from '../utils/tokens/names';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport LoadingIndicator from './LoadingIndicator';\nimport { makeStyles, Tab, Tabs } from '@material-ui/core';\nimport { useSendTransaction } from '../utils/notifications';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport { abbreviateAddress } from '../utils/utils';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Collapse from '@material-ui/core/Collapse';\nimport { useSolanaExplorerUrlSuffix } from '../utils/connection';\nimport Link from '@material-ui/core/Link';\nimport CopyableDisplay from './CopyableDisplay';\nimport DialogForm from './DialogForm';\nimport { showSwapAddress } from '../utils/config';\nimport { swapApiRequest } from '../utils/swap/api';\nimport TokenIcon from './TokenIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst feeFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 6,\n  maximumFractionDigits: 6\n});\nconst useStyles = makeStyles(theme => ({\n  tabs: {\n    marginBottom: theme.spacing(1),\n    borderBottom: `1px solid ${theme.palette.background.paper}`\n  }\n}));\nexport default function AddTokenDialog({\n  open,\n  onClose\n}) {\n  _s();\n\n  let wallet = useWallet();\n  let [tokenAccountCost] = useAsyncData(wallet.tokenAccountCost, wallet.tokenAccountCost);\n  let classes = useStyles();\n  let updateTokenName = useUpdateTokenName();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [walletAccounts] = useWalletTokenAccounts();\n  const popularTokens = usePopularTokens();\n  const [tab, setTab] = useState(!!popularTokens ? 'popular' : 'manual');\n  const [mintAddress, setMintAddress] = useState('');\n  const [tokenName, setTokenName] = useState('');\n  const [tokenSymbol, setTokenSymbol] = useState('');\n  const [erc20Address, setErc20Address] = useState('');\n  useEffect(() => {\n    if (!popularTokens) {\n      setTab('manual');\n    }\n  }, [popularTokens]);\n\n  function onSubmit(params) {\n    if (tab === 'manual') {\n      params = {\n        mintAddress,\n        tokenName,\n        tokenSymbol\n      };\n    } else if (tab === 'erc20') {\n      params = {\n        erc20Address\n      };\n    }\n\n    sendTransaction(addToken(params), {\n      onSuccess: () => {\n        refreshWalletPublicKeys(wallet);\n        onClose();\n      }\n    });\n  }\n\n  async function addToken({\n    mintAddress,\n    tokenName,\n    tokenSymbol,\n    erc20Address\n  }) {\n    if (erc20Address) {\n      let tokenInfo = await swapApiRequest('POST', `coins/eth/${erc20Address}`);\n      mintAddress = tokenInfo.splMint;\n      tokenName = tokenInfo.name;\n      tokenSymbol = tokenInfo.ticker;\n\n      if (tokenInfo.blockchain !== 'sol') {\n        tokenName = 'Wrapped ' + tokenName;\n      }\n    }\n\n    let mint = new PublicKey(mintAddress);\n    updateTokenName(mint, tokenName, tokenSymbol);\n    const resp = await wallet.createAssociatedTokenAccount(mint);\n    return resp[1];\n  }\n\n  let valid = true;\n\n  if (tab === 'erc20') {\n    valid = erc20Address.length === 42 && erc20Address.startsWith('0x');\n  }\n\n  return /*#__PURE__*/_jsxDEV(DialogForm, {\n    open: open,\n    onClose: onClose,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Add Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [tokenAccountCost ? /*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: [\"Add a token to your wallet. This will cost\", ' ', feeFormat.format(tokenAccountCost / LAMPORTS_PER_SOL), \" SOL.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), !!popularTokens && /*#__PURE__*/_jsxDEV(Tabs, {\n        value: tab,\n        textColor: \"primary\",\n        indicatorColor: \"primary\",\n        className: classes.tabs,\n        onChange: (e, value) => setTab(value),\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Popular Tokens\",\n          value: \"popular\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), showSwapAddress ? /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"ERC20 Token\",\n          value: \"erc20\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 32\n        }, this) : null, /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Manual Input\",\n          value: \"manual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), tab === 'manual' || !popularTokens ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Token Mint Address\",\n          fullWidth: true,\n          variant: \"outlined\",\n          margin: \"normal\",\n          value: mintAddress,\n          onChange: e => setMintAddress(e.target.value),\n          autoFocus: true,\n          disabled: sending\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Token Name\",\n          fullWidth: true,\n          variant: \"outlined\",\n          margin: \"normal\",\n          value: tokenName,\n          onChange: e => setTokenName(e.target.value),\n          disabled: sending\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Token Symbol\",\n          fullWidth: true,\n          variant: \"outlined\",\n          margin: \"normal\",\n          value: tokenSymbol,\n          onChange: e => setTokenSymbol(e.target.value),\n          disabled: sending\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this) : tab === 'popular' ? /*#__PURE__*/_jsxDEV(List, {\n        disablePadding: true,\n        children: popularTokens.filter(tokenInfo => tokenInfo.address).map(tokenInfo => /*#__PURE__*/_jsxDEV(TokenListItem, {\n          tokenInfo: tokenInfo,\n          existingAccount: (walletAccounts || []).find(account => account.parsed.mint.toBase58() === tokenInfo.address),\n          onSubmit: onSubmit,\n          disabled: sending\n        }, tokenInfo.address, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this) : tab === 'erc20' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"ERC20 Contract Address\",\n          fullWidth: true,\n          variant: \"outlined\",\n          margin: \"normal\",\n          value: erc20Address,\n          onChange: e => setErc20Address(e.target.value.trim()),\n          autoFocus: true,\n          disabled: sending\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), erc20Address && valid ? /*#__PURE__*/_jsxDEV(Link, {\n          href: `https://etherscan.io/token/${erc20Address}`,\n          target: \"_blank\",\n          rel: \"noopener\",\n          children: \"View on Etherscan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 15\n        }, this) : null]\n      }, void 0, true) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), tab !== 'popular' && /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        color: \"primary\",\n        disabled: sending || !valid,\n        onClick: () => onSubmit({\n          tokenName,\n          tokenSymbol,\n          mintAddress\n        }),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddTokenDialog, \"LeiAsKGl8+oO7XTEqWfcuJ9VzJw=\", false, function () {\n  return [useWallet, useAsyncData, useStyles, useUpdateTokenName, useSendTransaction, useWalletTokenAccounts, usePopularTokens];\n});\n\n_c = AddTokenDialog;\n\nfunction TokenListItem({\n  tokenInfo,\n  onSubmit,\n  disabled,\n  existingAccount\n}) {\n  _s2();\n\n  var _tokenInfo$name;\n\n  const [open, setOpen] = useState(false);\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const alreadyExists = !!existingAccount;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ListItem, {\n        button: true,\n        onClick: () => setOpen(open => !open),\n        children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n          children: /*#__PURE__*/_jsxDEV(TokenIcon, {\n            url: tokenInfo.logoUri,\n            tokenName: tokenInfo.name,\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: /*#__PURE__*/_jsxDEV(Link, {\n            target: \"_blank\",\n            rel: \"noopener\",\n            href: `https://explorer.solana.com/account/${tokenInfo.address}` + urlSuffix,\n            children: [(_tokenInfo$name = tokenInfo.name) !== null && _tokenInfo$name !== void 0 ? _tokenInfo$name : abbreviateAddress(tokenInfo.address), tokenInfo.symbol ? ` (${tokenInfo.symbol})` : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), open ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 36\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        color: \"primary\",\n        disabled: disabled || alreadyExists,\n        onClick: () => onSubmit({\n          tokenName: tokenInfo.name,\n          tokenSymbol: tokenInfo.symbol,\n          mintAddress: tokenInfo.address\n        }),\n        children: alreadyExists ? 'Added' : 'Add'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, tokenInfo.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      in: open,\n      timeout: \"auto\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(CopyableDisplay, {\n        value: tokenInfo.address,\n        label: `${tokenInfo.symbol} Mint Address`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(TokenListItem, \"4Y5ZrhqezxSHla+g6gAeieO14No=\", false, function () {\n  return [useSolanaExplorerUrlSuffix];\n});\n\n_c2 = TokenListItem;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddTokenDialog\");\n$RefreshReg$(_c2, \"TokenListItem\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddTokenDialog.js"],"names":["React","useEffect","useState","DialogContentText","DialogActions","Button","DialogTitle","DialogContent","TextField","refreshWalletPublicKeys","useWallet","useWalletTokenAccounts","LAMPORTS_PER_SOL","PublicKey","useUpdateTokenName","usePopularTokens","useAsyncData","LoadingIndicator","makeStyles","Tab","Tabs","useSendTransaction","List","ListItem","ListItemText","ListItemIcon","abbreviateAddress","ExpandLess","ExpandMore","Collapse","useSolanaExplorerUrlSuffix","Link","CopyableDisplay","DialogForm","showSwapAddress","swapApiRequest","TokenIcon","feeFormat","Intl","NumberFormat","undefined","minimumFractionDigits","maximumFractionDigits","useStyles","theme","tabs","marginBottom","spacing","borderBottom","palette","background","paper","AddTokenDialog","open","onClose","wallet","tokenAccountCost","classes","updateTokenName","sendTransaction","sending","walletAccounts","popularTokens","tab","setTab","mintAddress","setMintAddress","tokenName","setTokenName","tokenSymbol","setTokenSymbol","erc20Address","setErc20Address","onSubmit","params","addToken","onSuccess","tokenInfo","splMint","name","ticker","blockchain","mint","resp","createAssociatedTokenAccount","valid","length","startsWith","format","e","value","target","filter","address","map","find","account","parsed","toBase58","trim","TokenListItem","disabled","existingAccount","setOpen","urlSuffix","alreadyExists","display","logoUri","symbol"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  refreshWalletPublicKeys,\n  useWallet,\n  useWalletTokenAccounts,\n} from '../utils/wallet';\nimport { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\nimport { useUpdateTokenName, usePopularTokens } from '../utils/tokens/names';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport LoadingIndicator from './LoadingIndicator';\nimport { makeStyles, Tab, Tabs } from '@material-ui/core';\nimport { useSendTransaction } from '../utils/notifications';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport { abbreviateAddress } from '../utils/utils';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Collapse from '@material-ui/core/Collapse';\nimport { useSolanaExplorerUrlSuffix } from '../utils/connection';\nimport Link from '@material-ui/core/Link';\nimport CopyableDisplay from './CopyableDisplay';\nimport DialogForm from './DialogForm';\nimport { showSwapAddress } from '../utils/config';\nimport { swapApiRequest } from '../utils/swap/api';\nimport TokenIcon from './TokenIcon';\n\nconst feeFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 6,\n  maximumFractionDigits: 6,\n});\n\nconst useStyles = makeStyles((theme) => ({\n  tabs: {\n    marginBottom: theme.spacing(1),\n    borderBottom: `1px solid ${theme.palette.background.paper}`,\n  },\n}));\n\nexport default function AddTokenDialog({ open, onClose }) {\n  let wallet = useWallet();\n  let [tokenAccountCost] = useAsyncData(\n    wallet.tokenAccountCost,\n    wallet.tokenAccountCost,\n  );\n  let classes = useStyles();\n  let updateTokenName = useUpdateTokenName();\n  const [sendTransaction, sending] = useSendTransaction();\n\n  const [walletAccounts] = useWalletTokenAccounts();\n  const popularTokens = usePopularTokens();\n  const [tab, setTab] = useState(!!popularTokens ? 'popular' : 'manual');\n  const [mintAddress, setMintAddress] = useState('');\n  const [tokenName, setTokenName] = useState('');\n  const [tokenSymbol, setTokenSymbol] = useState('');\n  const [erc20Address, setErc20Address] = useState('');\n\n  useEffect(() => {\n    if (!popularTokens) {\n      setTab('manual');\n    }\n  }, [popularTokens]);\n\n  function onSubmit(params) {\n    if (tab === 'manual') {\n      params = { mintAddress, tokenName, tokenSymbol };\n    } else if (tab === 'erc20') {\n      params = { erc20Address };\n    }\n    sendTransaction(addToken(params), {\n      onSuccess: () => {\n        refreshWalletPublicKeys(wallet);\n        onClose();\n      },\n    });\n  }\n\n  async function addToken({\n    mintAddress,\n    tokenName,\n    tokenSymbol,\n    erc20Address,\n  }) {\n    if (erc20Address) {\n      let tokenInfo = await swapApiRequest('POST', `coins/eth/${erc20Address}`);\n      mintAddress = tokenInfo.splMint;\n      tokenName = tokenInfo.name;\n      tokenSymbol = tokenInfo.ticker;\n      if (tokenInfo.blockchain !== 'sol') {\n        tokenName = 'Wrapped ' + tokenName;\n      }\n    }\n\n    let mint = new PublicKey(mintAddress);\n    updateTokenName(mint, tokenName, tokenSymbol);\n    const resp = await wallet.createAssociatedTokenAccount(mint);\n    return resp[1];\n  }\n\n  let valid = true;\n  if (tab === 'erc20') {\n    valid = erc20Address.length === 42 && erc20Address.startsWith('0x');\n  }\n\n  return (\n    <DialogForm open={open} onClose={onClose}>\n      <DialogTitle>Add Token</DialogTitle>\n      <DialogContent>\n        {tokenAccountCost ? (\n          <DialogContentText>\n            Add a token to your wallet. This will cost{' '}\n            {feeFormat.format(tokenAccountCost / LAMPORTS_PER_SOL)} SOL.\n          </DialogContentText>\n        ) : (\n          <LoadingIndicator />\n        )}\n        {!!popularTokens && (\n          <Tabs\n            value={tab}\n            textColor=\"primary\"\n            indicatorColor=\"primary\"\n            className={classes.tabs}\n            onChange={(e, value) => setTab(value)}\n          >\n            <Tab label=\"Popular Tokens\" value=\"popular\" />\n            {showSwapAddress ? <Tab label=\"ERC20 Token\" value=\"erc20\" /> : null}\n            <Tab label=\"Manual Input\" value=\"manual\" />\n          </Tabs>\n        )}\n        {tab === 'manual' || !popularTokens ? (\n          <React.Fragment>\n            <TextField\n              label=\"Token Mint Address\"\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              value={mintAddress}\n              onChange={(e) => setMintAddress(e.target.value)}\n              autoFocus\n              disabled={sending}\n            />\n            <TextField\n              label=\"Token Name\"\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              value={tokenName}\n              onChange={(e) => setTokenName(e.target.value)}\n              disabled={sending}\n            />\n            <TextField\n              label=\"Token Symbol\"\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              value={tokenSymbol}\n              onChange={(e) => setTokenSymbol(e.target.value)}\n              disabled={sending}\n            />\n          </React.Fragment>\n        ) : tab === 'popular' ? (\n          <List disablePadding>\n            {popularTokens.filter(tokenInfo => tokenInfo.address).map((tokenInfo) => (\n              <TokenListItem\n                key={tokenInfo.address}\n                tokenInfo={tokenInfo}\n                existingAccount={(walletAccounts || []).find(\n                  (account) =>\n                    account.parsed.mint.toBase58() === tokenInfo.address,\n                )}\n                onSubmit={onSubmit}\n                disabled={sending}\n              />\n            ))}\n          </List>\n        ) : tab === 'erc20' ? (\n          <>\n            <TextField\n              label=\"ERC20 Contract Address\"\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              value={erc20Address}\n              onChange={(e) => setErc20Address(e.target.value.trim())}\n              autoFocus\n              disabled={sending}\n            />\n            {erc20Address && valid ? (\n              <Link\n                href={`https://etherscan.io/token/${erc20Address}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Etherscan\n              </Link>\n            ) : null}\n          </>\n        ) : null}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        {tab !== 'popular' && (\n          <Button\n            type=\"submit\"\n            color=\"primary\"\n            disabled={sending || !valid}\n            onClick={() => onSubmit({ tokenName, tokenSymbol, mintAddress })}\n          >\n            Add\n          </Button>\n        )}\n      </DialogActions>\n    </DialogForm>\n  );\n}\n\nfunction TokenListItem({ tokenInfo, onSubmit, disabled, existingAccount }) {\n  const [open, setOpen] = useState(false);\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const alreadyExists = !!existingAccount;\n\n  return (\n    <React.Fragment>\n      <div style={{ display: 'flex' }} key={tokenInfo.name}>\n        <ListItem button onClick={() => setOpen((open) => !open)}>\n          <ListItemIcon>\n            <TokenIcon\n              url={tokenInfo.logoUri}\n              tokenName={tokenInfo.name}\n              size={20}\n            />\n          </ListItemIcon>\n          <ListItemText\n            primary={\n              <Link\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={\n                  `https://explorer.solana.com/account/${tokenInfo.address}` +\n                  urlSuffix\n                }\n              >\n                {tokenInfo.name ?? abbreviateAddress(tokenInfo.address)}\n                {tokenInfo.symbol ? ` (${tokenInfo.symbol})` : null}\n              </Link>\n            }\n          />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Button\n          type=\"submit\"\n          color=\"primary\"\n          disabled={disabled || alreadyExists}\n          onClick={() =>\n            onSubmit({\n              tokenName: tokenInfo.name,\n              tokenSymbol: tokenInfo.symbol,\n              mintAddress: tokenInfo.address,\n            })\n          }\n        >\n          {alreadyExists ? 'Added' : 'Add'}\n        </Button>\n      </div>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <CopyableDisplay\n          value={tokenInfo.address}\n          label={`${tokenInfo.symbol} Mint Address`}\n        />\n      </Collapse>\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}