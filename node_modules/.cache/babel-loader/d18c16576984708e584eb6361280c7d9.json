{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ErrorLogViewer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { TextareaAutosize, Paper } from '@material-ui/core';\nimport EventEmitter from \"reactjs-eventemitter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ErrorLogViewer() {\n  _s();\n\n  const spacing = 24;\n  const [errorAddresses, setErrorAddress] = useState([]);\n  const [errorAddressString, setErrorAddressString] = useState('');\n  const [lastOkAddress, setLastOkAddress] = useState('');\n  const [totalSuccess, setTotalSuccess] = useState(0);\n  const [totalErrors, setTotalErrors] = useState(0);\n  useEffect(() => {\n    EventEmitter.subscribe('ERROR_ADDRESS', errorAddress => {\n      console.log('ERROR ADDRESS', errorAddress);\n\n      if (errorAddress != null && errorAddress != '') {\n        setErrorAddressString(prevState => {\n          let addressStr = prevState;\n          addressStr += errorAddress + ',';\n          return addressStr;\n        });\n        setTotalErrors(prevState => {\n          return prevState + 1;\n        });\n      } else {}\n    });\n    EventEmitter.subscribe('SUCCESS_ADDRESS', okAddress => {\n      setLastOkAddress(okAddress);\n      setTotalSuccess(prevState => {\n        return prevState + 1;\n      });\n    });\n  }, []); // Emitter.on('ERROR_ADDRESS', (errorAddress) => {\n  //     console.log('ERROR ADDRESS', errorAddress);\n  //     if(errorAddress!=null && errorAddress!=''){\n  //         let addressStr = errorAddressString;\n  //         addressStr += errorAddress +',';\n  //         setErrorAddressString(addressStr);\n  //         let totalError = totalErrors + 1;\n  //         setTotalErrors(totalError);\n  //     }else{}\n  // });\n  // Emitter.on('SUCCESS_ADDRESS', (okAddress) => {\n  //     setLastOkAddress(okAddress);\n  //     let totalSuccessVal = totalSuccess+1;\n  //     setTotalSuccess(totalSuccessVal);\n  // });\n  // useEffect(()=> {\n  // }, [])\n\n  function updateErrorLogViewer(address) {\n    console.log('error here...', address);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        width: \"100%\"\n      },\n      children: [\"Last Successful Airdrop Address:  \", lastOkAddress, /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), \"Successfully Completed Airdrops:  \", totalSuccess, /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), \"Unsuccessful Airdrops:  \", totalErrors, /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n        \"aria-label\": \"empty textarea\",\n        defaultValue: errorAddressString,\n        placeholder: \"Unprocessed addresses will appear here.\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ErrorLogViewer, \"Ms7HyKMGPItNnS9guU7nmzSSs/Y=\");\n\n_c = ErrorLogViewer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ErrorLogViewer\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ErrorLogViewer.js"],"names":["React","useState","useMemo","useCallback","useEffect","TextareaAutosize","Paper","EventEmitter","ErrorLogViewer","spacing","errorAddresses","setErrorAddress","errorAddressString","setErrorAddressString","lastOkAddress","setLastOkAddress","totalSuccess","setTotalSuccess","totalErrors","setTotalErrors","subscribe","errorAddress","console","log","prevState","addressStr","okAddress","updateErrorLogViewer","address","display","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,WAAnC,EAAgDC,SAAhD,QAAiE,OAAjE;AACA,SAASC,gBAAT,EAA2BC,KAA3B,QAAwC,mBAAxC;AACA,OAAOC,YAAP,MAAyB,sBAAzB;;AAEA,eAAe,SAASC,cAAT,GAAyB;AAAA;;AACpC,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAM,CAACC,cAAD,EAAiBC,eAAjB,IAAoCV,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACW,kBAAD,EAAqBC,qBAArB,IAA8CZ,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,CAAD,CAA9C;AAGAG,EAAAA,SAAS,CAAE,MAAI;AAIXG,IAAAA,YAAY,CAACa,SAAb,CAAuB,eAAvB,EAAwCC,YAAY,IAAI;AAEpDC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,YAA7B;;AACA,UAAGA,YAAY,IAAE,IAAd,IAAsBA,YAAY,IAAE,EAAvC,EAA0C;AAEtCR,QAAAA,qBAAqB,CAAEW,SAAD,IAAc;AAChC,cAAIC,UAAU,GAAED,SAAhB;AACAC,UAAAA,UAAU,IAAIJ,YAAY,GAAE,GAA5B;AACA,iBAAOI,UAAP;AACH,SAJoB,CAArB;AAMAN,QAAAA,cAAc,CAAEK,SAAD,IAAc;AAEzB,iBAAOA,SAAS,GAAG,CAAnB;AACH,SAHa,CAAd;AAKH,OAbD,MAaK,CAAE;AAGV,KAnBD;AAqBAjB,IAAAA,YAAY,CAACa,SAAb,CAAuB,iBAAvB,EAA0CM,SAAS,IAAI;AAEnDX,MAAAA,gBAAgB,CAACW,SAAD,CAAhB;AAEAT,MAAAA,eAAe,CAAEO,SAAD,IAAe;AAE3B,eAAOA,SAAS,GAAG,CAAnB;AACH,OAHc,CAAf;AAMH,KAVD;AAeH,GAxCQ,EAwCN,EAxCM,CAAT,CAToC,CAwDpC;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAGA;AAEA;AAIA;;AAEA,WAASG,oBAAT,CAA8BC,OAA9B,EAAsC;AAElCN,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BK,OAA7B;AACH;;AAED,sBAEI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,KAAK,EAAE;AAA1B,KAAZ;AAAA,2BAOI,QAAC,KAAD;AAAQ,MAAA,KAAK,EAAE;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAf;AAAA,uDACuChB,aADvC,eAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,wCAGuCE,YAHvC,eAII;AAAA;AAAA;AAAA;AAAA,cAJJ,8BAK6BE,WAL7B,eAMI;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI,QAAC,gBAAD;AAAkB,sBAAW,gBAA7B;AAA8C,QAAA,YAAY,EAAEN,kBAA5D;AAAgF,QAAA,WAAW,EAAC,yCAA5F;AAAsI,QAAA,KAAK,EAAE;AAAEkB,UAAAA,KAAK,EAAE,MAAT;AAAiBC,UAAAA,MAAM,EAAC;AAAxB;AAA7I;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,UAFJ;AA2BH;;GAxHuBvB,c;;KAAAA,c","sourcesContent":["import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { TextareaAutosize, Paper } from '@material-ui/core';\nimport EventEmitter from \"reactjs-eventemitter\";\n\nexport default function ErrorLogViewer(){\n    const spacing = 24;\n    const [errorAddresses, setErrorAddress] = useState([]);\n    const [errorAddressString, setErrorAddressString] = useState('');\n    const [lastOkAddress, setLastOkAddress] = useState('');\n    const [totalSuccess, setTotalSuccess] = useState(0);\n    const [totalErrors, setTotalErrors] = useState(0);\n\n\n    useEffect( ()=>{\n\n\n\n        EventEmitter.subscribe('ERROR_ADDRESS', errorAddress => {\n\n            console.log('ERROR ADDRESS', errorAddress);\n            if(errorAddress!=null && errorAddress!=''){\n        \n                setErrorAddressString((prevState) =>{\n                    let addressStr =prevState;\n                    addressStr += errorAddress +',';\n                    return addressStr;\n                });\n              \n                setTotalErrors((prevState)=> {\n\n                    return prevState + 1;\n                });\n    \n            }else{}      \n            \n        \n        });\n    \n        EventEmitter.subscribe('SUCCESS_ADDRESS', okAddress => {\n    \n            setLastOkAddress(okAddress);\n           \n            setTotalSuccess((prevState) => {\n\n                return prevState + 1;\n            });     \n            \n        \n        })\n\n\n\n\n    }, [])\n\n\n\n\n\n\n    // Emitter.on('ERROR_ADDRESS', (errorAddress) => {\n    //     console.log('ERROR ADDRESS', errorAddress);\n    //     if(errorAddress!=null && errorAddress!=''){\n\n    //         let addressStr = errorAddressString;\n\n    //         addressStr += errorAddress +',';\n    \n    //         setErrorAddressString(addressStr);\n    //         let totalError = totalErrors + 1;\n    //         setTotalErrors(totalError);\n\n    //     }else{}\n\n    // });\n    \n    // Emitter.on('SUCCESS_ADDRESS', (okAddress) => {\n\n    //     setLastOkAddress(okAddress);\n    //     let totalSuccessVal = totalSuccess+1;\n        \n    //     setTotalSuccess(totalSuccessVal);\n\n\n    // });\n\n    // useEffect(()=> {\n\n\n\n    // }, [])\n\n    function updateErrorLogViewer(address){\n\n        console.log('error here...', address);\n    }\n\n    return (\n\n        <div style={{ display: 'flex', width: \"100%\" }}>\n                {/* Last Successful Airdrop Address:  {lastOkAddress}\n                <p></p>\n                Successfully Completed Airdrops:  {totalSuccess}\n                <p></p>\n                Unsuccessful Airdrops:  {totalErrors} */}\n\n            <Paper  style={{ width: \"100%\"}}  >\n                Last Successful Airdrop Address:  {lastOkAddress}\n                <p></p>\n                Successfully Completed Airdrops:  {totalSuccess}\n                <p></p>\n                Unsuccessful Airdrops:  {totalErrors}\n                <p></p>\n                <TextareaAutosize aria-label=\"empty textarea\" defaultValue={errorAddressString} placeholder=\"Unprocessed addresses will appear here.\" style={{ width: \"100%\", height:\"500px\" }} /> \n             </Paper>   \n                   \n        \n        </div>\n\n\n    );\n\n\n\n}"]},"metadata":{},"sourceType":"module"}