{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar formatters = require('web3-core-helpers').formatters;\n\nvar utils = require('web3-utils');\n\nvar promiEvent = require('web3-core-promievent');\n\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar EthersTransactionUtils = require('@ethersproject/transactions');\n\nvar Method = function Method(options) {\n  if (!options.call || !options.name) {\n    throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n  }\n\n  this.name = options.name;\n  this.call = options.call;\n  this.params = options.params || 0;\n  this.inputFormatter = options.inputFormatter;\n  this.outputFormatter = options.outputFormatter;\n  this.transformPayload = options.transformPayload;\n  this.extraFormatters = options.extraFormatters;\n  this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string\n\n  this.requestManager = options.requestManager; // reference to eth.accounts\n\n  this.accounts = options.accounts;\n  this.defaultBlock = options.defaultBlock || 'latest';\n  this.defaultAccount = options.defaultAccount || null;\n  this.transactionBlockTimeout = options.transactionBlockTimeout || 50;\n  this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;\n  this.transactionPollingTimeout = options.transactionPollingTimeout || 750;\n  this.defaultCommon = options.defaultCommon;\n  this.defaultChain = options.defaultChain;\n  this.defaultHardfork = options.defaultHardfork;\n  this.handleRevert = options.handleRevert;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n  this.requestManager = requestManager; // reference to eth.accounts\n\n  if (accounts) {\n    this.accounts = accounts;\n  }\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n  var func = this.buildCall();\n  func.call = this.call;\n  this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n  return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n  var func = this.buildCall();\n  func.call = this.call;\n  var name = this.name.split('.');\n\n  if (name.length > 1) {\n    obj[name[0]] = obj[name[0]] || {};\n    obj[name[0]][name[1]] = func;\n  } else {\n    obj[name[0]] = func;\n  }\n};\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\n\n\nMethod.prototype.getCall = function (args) {\n  return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\n\nMethod.prototype.extractCallback = function (args) {\n  if (_.isFunction(args[args.length - 1])) {\n    return args.pop(); // modify the args array!\n  }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\n\nMethod.prototype.validateArgs = function (args) {\n  if (args.length !== this.params) {\n    throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n  }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\n\nMethod.prototype.formatInput = function (args) {\n  var _this = this;\n\n  if (!this.inputFormatter) {\n    return args;\n  }\n\n  return this.inputFormatter.map(function (formatter, index) {\n    // bind this for defaultBlock, and defaultAccount\n    return formatter ? formatter.call(_this, args[index]) : args[index];\n  });\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\n\n\nMethod.prototype.formatOutput = function (result) {\n  var _this = this;\n\n  if (_.isArray(result)) {\n    return result.map(function (res) {\n      return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n    });\n  } else {\n    return this.outputFormatter && result ? this.outputFormatter(result) : result;\n  }\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\n\n\nMethod.prototype.toPayload = function (args) {\n  var call = this.getCall(args);\n  var callback = this.extractCallback(args);\n  var params = this.formatInput(args);\n  this.validateArgs(params);\n  var payload = {\n    method: call,\n    params: params,\n    callback: callback\n  };\n\n  if (this.transformPayload) {\n    payload = this.transformPayload(payload);\n  }\n\n  return payload;\n};\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n  var method = this,\n      promiseResolved = false,\n      canUnsubscribe = true,\n      timeoutCount = 0,\n      confirmationCount = 0,\n      intervalId = null,\n      lastBlock = null,\n      receiptJSON = '',\n      gasProvided = _.isObject(payload.params[0]) && payload.params[0].gas ? payload.params[0].gas : null,\n      isContractDeployment = _.isObject(payload.params[0]) && payload.params[0].data && payload.params[0].from && !payload.params[0].to,\n      hasBytecode = isContractDeployment && payload.params[0].data.length > 2; // add custom send Methods\n\n  var _ethereumCalls = [new Method({\n    name: 'getBlockByNumber',\n    call: 'eth_getBlockByNumber',\n    params: 2,\n    inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {\n      return !!val;\n    }],\n    outputFormatter: formatters.outputBlockFormatter\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatters.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getCode',\n    call: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getTransactionByHash',\n    call: 'eth_getTransactionByHash',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatters.outputTransactionFormatter\n  }), new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        subscriptionName: 'newHeads',\n        params: 0,\n        outputFormatter: formatters.outputBlockFormatter\n      }\n    }\n  })]; // attach methods to this._ethereumCall\n\n  var _ethereumCall = {};\n\n  _.each(_ethereumCalls, function (mthd) {\n    mthd.attachToObject(_ethereumCall);\n    mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n  }); // fire \"receipt\" and confirmation events and resolve after\n\n\n  var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n    if (!err) {\n      // create fake unsubscribe\n      if (!sub) {\n        sub = {\n          unsubscribe: function () {\n            clearInterval(intervalId);\n          }\n        };\n      } // if we have a valid receipt we don't need to send a request\n\n\n      return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result)). // catch error from requesting receipt\n      catch(function (err) {\n        sub.unsubscribe();\n        promiseResolved = true;\n\n        utils._fireError({\n          message: 'Failed to check for transaction receipt:',\n          data: err\n        }, defer.eventEmitter, defer.reject);\n      }) // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n      .then(async function (receipt) {\n        if (!receipt || !receipt.blockHash) {\n          throw new Error('Receipt missing or blockHash null');\n        } // apply extra formatters\n\n\n        if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n          receipt = method.extraFormatters.receiptFormatter(receipt);\n        } // check if confirmation listener exists\n\n\n        if (defer.eventEmitter.listeners('confirmation').length > 0) {\n          var block; // If there was an immediately retrieved receipt, it's already\n          // been confirmed by the direct call to checkConfirmation needed\n          // for parity instant-seal\n\n          if (existingReceipt === undefined || confirmationCount !== 0) {\n            // Get latest block to emit with confirmation\n            var latestBlock = await _ethereumCall.getBlockByNumber('latest');\n            var latestBlockHash = latestBlock ? latestBlock.hash : null;\n\n            if (isPolling) {\n              // Check if actually a new block is existing on polling\n              if (lastBlock) {\n                block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);\n\n                if (block) {\n                  lastBlock = block;\n                  defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                }\n              } else {\n                block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);\n                lastBlock = block;\n                defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n              }\n            } else {\n              defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n            }\n          }\n\n          if (isPolling && block || !isPolling) {\n            confirmationCount++;\n          }\n\n          canUnsubscribe = false;\n\n          if (confirmationCount === method.transactionConfirmationBlocks + 1) {\n            // add 1 so we account for conf 0\n            sub.unsubscribe();\n            defer.eventEmitter.removeAllListeners();\n          }\n        }\n\n        return receipt;\n      }) // CHECK for CONTRACT DEPLOYMENT\n      .then(async function (receipt) {\n        if (isContractDeployment && !promiseResolved) {\n          if (!receipt.contractAddress) {\n            if (canUnsubscribe) {\n              sub.unsubscribe();\n              promiseResolved = true;\n            }\n\n            utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n\n            return;\n          }\n\n          var code;\n\n          try {\n            code = await _ethereumCall.getCode(receipt.contractAddress);\n          } catch (err) {// ignore;\n          }\n\n          if (!code) {\n            return;\n          } // If deployment is status.true and there was a real\n          // bytecode string, assume it was successful.\n\n\n          var deploymentSuccess = receipt.status === true && hasBytecode;\n\n          if (deploymentSuccess || code.length > 2) {\n            defer.eventEmitter.emit('receipt', receipt); // if contract, return instance instead of receipt\n\n            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n              defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n            } else {\n              defer.resolve(receipt);\n            } // need to remove listeners, as they aren't removed automatically when succesfull\n\n\n            if (canUnsubscribe) {\n              defer.eventEmitter.removeAllListeners();\n            }\n          } else {\n            utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n          }\n\n          if (canUnsubscribe) {\n            sub.unsubscribe();\n          }\n\n          promiseResolved = true;\n        }\n\n        return receipt;\n      }) // CHECK for normal tx check for receipt only\n      .then(async function (receipt) {\n        if (!isContractDeployment && !promiseResolved) {\n          if (!receipt.outOfGas && (!gasProvided || gasProvided !== receipt.gasUsed) && (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n            defer.eventEmitter.emit('receipt', receipt);\n            defer.resolve(receipt); // need to remove listeners, as they aren't removed automatically when succesfull\n\n            if (canUnsubscribe) {\n              defer.eventEmitter.removeAllListeners();\n            }\n          } else {\n            receiptJSON = JSON.stringify(receipt, null, 2);\n\n            if (receipt.status === false || receipt.status === '0x0') {\n              try {\n                var revertMessage = null;\n\n                if (method.handleRevert && (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction')) {\n                  var txReplayOptions = payload.params[0]; // If send was raw, fetch the transaction and reconstitute the\n                  // original params so they can be replayed with `eth_call`\n\n                  if (method.call === 'eth_sendRawTransaction') {\n                    var rawTransactionHex = payload.params[0];\n                    var parsedTx = EthersTransactionUtils.parse(rawTransactionHex);\n                    txReplayOptions = formatters.inputTransactionFormatter({\n                      data: parsedTx.data,\n                      to: parsedTx.to,\n                      from: parsedTx.from,\n                      gas: parsedTx.gasLimit.toHexString(),\n                      gasPrice: parsedTx.gasPrice.toHexString(),\n                      value: parsedTx.value.toHexString()\n                    });\n                  } // Get revert reason string with eth_call\n\n\n                  revertMessage = await method.getRevertReason(txReplayOptions, receipt.blockNumber);\n\n                  if (revertMessage) {\n                    // Only throw a revert error if a revert reason is existing\n                    utils._fireError(errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);\n                  } else {\n                    throw false; // Throw false and let the try/catch statement handle the error correctly after\n                  }\n                } else {\n                  throw false; // Throw false and let the try/catch statement handle the error correctly after\n                }\n              } catch (error) {\n                // Throw an normal revert error if no revert reason is given or the detection of it is disabled\n                utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n              }\n            } else {\n              // Throw OOG if status is not existing and provided gas and used gas are equal\n              utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n            }\n          }\n\n          if (canUnsubscribe) {\n            sub.unsubscribe();\n          }\n\n          promiseResolved = true;\n        }\n      }) // time out the transaction if not mined after 50 blocks\n      .catch(function () {\n        timeoutCount++; // check to see if we are http polling\n\n        if (!!isPolling) {\n          // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second\n          if (timeoutCount - 1 >= method.transactionPollingTimeout) {\n            sub.unsubscribe();\n            promiseResolved = true;\n\n            utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n          }\n        } else {\n          if (timeoutCount - 1 >= method.transactionBlockTimeout) {\n            sub.unsubscribe();\n            promiseResolved = true;\n\n            utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n          }\n        }\n      });\n    } else {\n      sub.unsubscribe();\n      promiseResolved = true;\n\n      utils._fireError({\n        message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n        data: err\n      }, defer.eventEmitter, defer.reject);\n    }\n  }; // start watching for confirmation depending on the support features of the provider\n\n\n  var startWatching = function (existingReceipt) {\n    const startInterval = () => {\n      intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n    };\n\n    if (!this.requestManager.provider.on) {\n      startInterval();\n    } else {\n      _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {\n        if (err || !blockHeader) {\n          // fall back to polling\n          startInterval();\n        } else {\n          checkConfirmation(existingReceipt, false, err, blockHeader, sub);\n        }\n      });\n    }\n  }.bind(this); // first check if we already have a confirmed transaction\n\n\n  _ethereumCall.getTransactionReceipt(result).then(function (receipt) {\n    if (receipt && receipt.blockHash) {\n      if (defer.eventEmitter.listeners('confirmation').length > 0) {\n        // We must keep on watching for new Blocks, if a confirmation listener is present\n        startWatching(receipt);\n      }\n\n      checkConfirmation(receipt, false);\n    } else if (!promiseResolved) {\n      startWatching();\n    }\n  }).catch(function () {\n    if (!promiseResolved) startWatching();\n  });\n};\n\nvar getWallet = function (from, accounts) {\n  var wallet = null; // is index given\n\n  if (_.isNumber(from)) {\n    wallet = accounts.wallet[from]; // is account given\n  } else if (_.isObject(from) && from.address && from.privateKey) {\n    wallet = from; // search in wallet for address\n  } else {\n    wallet = accounts.wallet[from.toLowerCase()];\n  }\n\n  return wallet;\n};\n\nMethod.prototype.buildCall = function () {\n  var method = this,\n      isSendTx = method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction',\n      // || method.call === 'personal_sendTransaction'\n  isCall = method.call === 'eth_call'; // actual send function\n\n  var send = function () {\n    var defer = promiEvent(!isSendTx),\n        payload = method.toPayload(Array.prototype.slice.call(arguments)); // CALLBACK function\n\n    var sendTxCallback = function (err, result) {\n      if (method.handleRevert && isCall && method.abiCoder) {\n        var reasonData; // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response\n        // Geth >= 1.9.15 attaches the reason data to an error object.\n        // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)\n\n        if (!err && method.isRevertReasonString(result)) {\n          reasonData = result.substring(10);\n        } else if (err && err.data) {\n          reasonData = err.data.substring(10);\n        }\n\n        if (reasonData) {\n          var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);\n          var signature = 'Error(String)';\n\n          utils._fireError(errors.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {\n            reason: reason,\n            signature: signature\n          });\n\n          return;\n        }\n      }\n\n      try {\n        result = method.formatOutput(result);\n      } catch (e) {\n        err = e;\n      }\n\n      if (result instanceof Error) {\n        err = result;\n      }\n\n      if (!err) {\n        if (payload.callback) {\n          payload.callback(null, result);\n        }\n      } else {\n        if (err.error) {\n          err = err.error;\n        }\n\n        return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n      } // return PROMISE\n\n\n      if (!isSendTx) {\n        if (!err) {\n          defer.resolve(result);\n        } // return PROMIEVENT\n\n      } else {\n        defer.eventEmitter.emit('transactionHash', result);\n\n        method._confirmTransaction(defer, result, payload);\n      }\n    }; // SENDS the SIGNED SIGNATURE\n\n\n    var sendSignedTx = function (sign) {\n      var signedPayload = _.extend({}, payload, {\n        method: 'eth_sendRawTransaction',\n        params: [sign.rawTransaction]\n      });\n\n      method.requestManager.send(signedPayload, sendTxCallback);\n    };\n\n    var sendRequest = function (payload, method) {\n      if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n        var wallet; // ETH_SENDTRANSACTION\n\n        if (payload.method === 'eth_sendTransaction') {\n          var tx = payload.params[0];\n          wallet = getWallet(_.isObject(tx) ? tx.from : null, method.accounts); // If wallet was found, sign tx, and send using sendRawTransaction\n\n          if (wallet && wallet.privateKey) {\n            var txOptions = _.omit(tx, 'from');\n\n            if (method.defaultChain && !txOptions.chain) {\n              txOptions.chain = method.defaultChain;\n            }\n\n            if (method.defaultHardfork && !txOptions.hardfork) {\n              txOptions.hardfork = method.defaultHardfork;\n            }\n\n            if (method.defaultCommon && !txOptions.common) {\n              txOptions.common = method.defaultCommon;\n            }\n\n            method.accounts.signTransaction(txOptions, wallet.privateKey).then(sendSignedTx).catch(function (err) {\n              if (_.isFunction(defer.eventEmitter.listeners) && defer.eventEmitter.listeners('error').length) {\n                try {\n                  defer.eventEmitter.emit('error', err);\n                } catch (err) {// Ignore userland error prevent it to bubble up within web3.\n                }\n\n                defer.eventEmitter.removeAllListeners();\n                defer.eventEmitter.catch(function () {});\n              }\n\n              defer.reject(err);\n            });\n            return;\n          } // ETH_SIGN\n\n        } else if (payload.method === 'eth_sign') {\n          var data = payload.params[1];\n          wallet = getWallet(payload.params[0], method.accounts); // If wallet was found, sign tx, and send using sendRawTransaction\n\n          if (wallet && wallet.privateKey) {\n            var sign = method.accounts.sign(data, wallet.privateKey);\n\n            if (payload.callback) {\n              payload.callback(null, sign.signature);\n            }\n\n            defer.resolve(sign.signature);\n            return;\n          }\n        }\n      }\n\n      return method.requestManager.send(payload, sendTxCallback);\n    }; // Send the actual transaction\n\n\n    if (isSendTx && _.isObject(payload.params[0]) && typeof payload.params[0].gasPrice === 'undefined') {\n      var getGasPrice = new Method({\n        name: 'getGasPrice',\n        call: 'eth_gasPrice',\n        params: 0\n      }).createFunction(method.requestManager);\n      getGasPrice(function (err, gasPrice) {\n        if (gasPrice) {\n          payload.params[0].gasPrice = gasPrice;\n        }\n\n        if (isSendTx) {\n          setTimeout(() => {\n            defer.eventEmitter.emit('sending', payload);\n          }, 0);\n        }\n\n        sendRequest(payload, method);\n      });\n    } else {\n      if (isSendTx) {\n        setTimeout(() => {\n          defer.eventEmitter.emit('sending', payload);\n        }, 0);\n      }\n\n      sendRequest(payload, method);\n    }\n\n    if (isSendTx) {\n      setTimeout(() => {\n        defer.eventEmitter.emit('sent', payload);\n      }, 0);\n    }\n\n    return defer.eventEmitter;\n  }; // necessary to attach things to the method\n\n\n  send.method = method; // necessary for batch requests\n\n  send.request = this.request.bind(this);\n  return send;\n};\n/**\n * Returns the revert reason string if existing or otherwise false.\n *\n * @method getRevertReason\n *\n * @param {Object} txOptions\n * @param {Number} blockNumber\n *\n * @returns {Promise<Boolean|String>}\n */\n\n\nMethod.prototype.getRevertReason = function (txOptions, blockNumber) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    new Method({\n      name: 'call',\n      call: 'eth_call',\n      params: 2,\n      abiCoder: self.abiCoder,\n      handleRevert: true\n    }).createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber)).then(function () {\n      resolve(false);\n    }).catch(function (error) {\n      if (error.reason) {\n        resolve({\n          reason: error.reason,\n          signature: error.signature\n        });\n      } else {\n        reject(error);\n      }\n    });\n  });\n};\n/**\n * Checks if the given hex string is a revert message from the EVM\n *\n * @method isRevertReasonString\n *\n * @param {String} data - Hex string prefixed with 0x\n *\n * @returns {Boolean}\n */\n\n\nMethod.prototype.isRevertReasonString = function (data) {\n  return _.isString(data) && (data.length - 2) / 2 % 32 === 4 && data.substring(0, 10) === '0x08c379a0';\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\n\n\nMethod.prototype.request = function () {\n  var payload = this.toPayload(Array.prototype.slice.call(arguments));\n  payload.format = this.formatOutput.bind(this);\n  return payload;\n};\n\nmodule.exports = Method;","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/web3-core-method/lib/index.js"],"names":["_","require","errors","formatters","utils","promiEvent","Subscriptions","subscriptions","EthersTransactionUtils","Method","options","call","name","Error","params","inputFormatter","outputFormatter","transformPayload","extraFormatters","abiCoder","requestManager","accounts","defaultBlock","defaultAccount","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","defaultCommon","defaultChain","defaultHardfork","handleRevert","prototype","setRequestManager","createFunction","func","buildCall","attachToObject","obj","split","length","getCall","args","isFunction","extractCallback","pop","validateArgs","InvalidNumberOfParams","formatInput","_this","map","formatter","index","formatOutput","result","isArray","res","toPayload","callback","payload","method","_confirmTransaction","defer","promiseResolved","canUnsubscribe","timeoutCount","confirmationCount","intervalId","lastBlock","receiptJSON","gasProvided","isObject","gas","isContractDeployment","data","from","to","hasBytecode","_ethereumCalls","inputBlockNumberFormatter","val","outputBlockFormatter","outputTransactionReceiptFormatter","inputAddressFormatter","inputDefaultBlockNumberFormatter","outputTransactionFormatter","type","subscriptionName","_ethereumCall","each","mthd","checkConfirmation","existingReceipt","isPolling","err","blockHeader","sub","unsubscribe","clearInterval","resolve","getTransactionReceipt","catch","_fireError","message","eventEmitter","reject","then","receipt","blockHash","receiptFormatter","listeners","block","undefined","latestBlock","getBlockByNumber","latestBlockHash","hash","number","emit","blockNumber","removeAllListeners","contractAddress","NoContractAddressFoundError","code","getCode","deploymentSuccess","status","contractDeployFormatter","ContractCodeNotStoredError","outOfGas","gasUsed","JSON","stringify","revertMessage","txReplayOptions","rawTransactionHex","parsedTx","parse","inputTransactionFormatter","gasLimit","toHexString","gasPrice","value","getRevertReason","TransactionRevertInstructionError","reason","signature","error","TransactionRevertedWithoutReasonError","TransactionOutOfGasError","TransactionError","startWatching","startInterval","setInterval","bind","provider","on","subscribe","getWallet","wallet","isNumber","address","privateKey","toLowerCase","isSendTx","isCall","send","Array","slice","arguments","sendTxCallback","reasonData","isRevertReasonString","substring","decodeParameter","RevertInstructionError","e","sendSignedTx","sign","signedPayload","extend","rawTransaction","sendRequest","tx","txOptions","omit","chain","hardfork","common","signTransaction","getGasPrice","setTimeout","request","self","Promise","numberToHex","isString","format","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n'use strict';\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar EthersTransactionUtils = require('@ethersproject/transactions');\nvar Method = function Method(options) {\n    if (!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n    this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string\n    this.requestManager = options.requestManager;\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n    this.transactionBlockTimeout = options.transactionBlockTimeout || 50;\n    this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;\n    this.transactionPollingTimeout = options.transactionPollingTimeout || 750;\n    this.defaultCommon = options.defaultCommon;\n    this.defaultChain = options.defaultChain;\n    this.defaultHardfork = options.defaultHardfork;\n    this.handleRevert = options.handleRevert;\n};\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n};\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n    return func;\n};\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    }\n    else {\n        obj[name[0]] = func;\n    }\n};\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n    if (!this.inputFormatter) {\n        return args;\n    }\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n    if (_.isArray(result)) {\n        return result.map(function (res) {\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    }\n    else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n    return payload;\n};\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this, promiseResolved = false, canUnsubscribe = true, timeoutCount = 0, confirmationCount = 0, intervalId = null, lastBlock = null, receiptJSON = '', gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null, isContractDeployment = _.isObject(payload.params[0]) &&\n        payload.params[0].data &&\n        payload.params[0].from &&\n        !payload.params[0].to, hasBytecode = isContractDeployment && payload.params[0].data.length > 2;\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getBlockByNumber',\n            call: 'eth_getBlockByNumber',\n            params: 2,\n            inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {\n                    return !!val;\n                }],\n            outputFormatter: formatters.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getTransactionByHash',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionFormatter\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads',\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _.each(_ethereumCalls, function (mthd) {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n                // catch error from requesting receipt\n                .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({\n                    message: 'Failed to check for transaction receipt:',\n                    data: err\n                }, defer.eventEmitter, defer.reject);\n            })\n                // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n                .then(async function (receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                    var block;\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0) {\n                        // Get latest block to emit with confirmation\n                        var latestBlock = await _ethereumCall.getBlockByNumber('latest');\n                        var latestBlockHash = latestBlock ? latestBlock.hash : null;\n                        if (isPolling) { // Check if actually a new block is existing on polling\n                            if (lastBlock) {\n                                block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);\n                                if (block) {\n                                    lastBlock = block;\n                                    defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                                }\n                            }\n                            else {\n                                block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);\n                                lastBlock = block;\n                                defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                            }\n                        }\n                        else {\n                            defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                        }\n                    }\n                    if ((isPolling && block) || !isPolling) {\n                        confirmationCount++;\n                    }\n                    canUnsubscribe = false;\n                    if (confirmationCount === method.transactionConfirmationBlocks + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n                return receipt;\n            })\n                // CHECK for CONTRACT DEPLOYMENT\n                .then(async function (receipt) {\n                if (isContractDeployment && !promiseResolved) {\n                    if (!receipt.contractAddress) {\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n                        utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                        return;\n                    }\n                    var code;\n                    try {\n                        code = await _ethereumCall.getCode(receipt.contractAddress);\n                    }\n                    catch (err) {\n                        // ignore;\n                    }\n                    if (!code) {\n                        return;\n                    }\n                    // If deployment is status.true and there was a real\n                    // bytecode string, assume it was successful.\n                    var deploymentSuccess = receipt.status === true && hasBytecode;\n                    if (deploymentSuccess || code.length > 2) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        // if contract, return instance instead of receipt\n                        if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                            defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                        }\n                        else {\n                            defer.resolve(receipt);\n                        }\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n                    }\n                    else {\n                        utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                    }\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n                return receipt;\n            })\n                // CHECK for normal tx check for receipt only\n                .then(async function (receipt) {\n                if (!isContractDeployment && !promiseResolved) {\n                    if (!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n                    }\n                    else {\n                        receiptJSON = JSON.stringify(receipt, null, 2);\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            try {\n                                var revertMessage = null;\n                                if (method.handleRevert &&\n                                    (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction')) {\n                                    var txReplayOptions = payload.params[0];\n                                    // If send was raw, fetch the transaction and reconstitute the\n                                    // original params so they can be replayed with `eth_call`\n                                    if (method.call === 'eth_sendRawTransaction') {\n                                        var rawTransactionHex = payload.params[0];\n                                        var parsedTx = EthersTransactionUtils.parse(rawTransactionHex);\n                                        txReplayOptions = formatters.inputTransactionFormatter({\n                                            data: parsedTx.data,\n                                            to: parsedTx.to,\n                                            from: parsedTx.from,\n                                            gas: parsedTx.gasLimit.toHexString(),\n                                            gasPrice: parsedTx.gasPrice.toHexString(),\n                                            value: parsedTx.value.toHexString()\n                                        });\n                                    }\n                                    // Get revert reason string with eth_call\n                                    revertMessage = await method.getRevertReason(txReplayOptions, receipt.blockNumber);\n                                    if (revertMessage) { // Only throw a revert error if a revert reason is existing\n                                        utils._fireError(errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);\n                                    }\n                                    else {\n                                        throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                    }\n                                }\n                                else {\n                                    throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                }\n                            }\n                            catch (error) {\n                                // Throw an normal revert error if no revert reason is given or the detection of it is disabled\n                                utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                            }\n                        }\n                        else {\n                            // Throw OOG if status is not existing and provided gas and used gas are equal\n                            utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                        }\n                    }\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n            })\n                // time out the transaction if not mined after 50 blocks\n                .catch(function () {\n                timeoutCount++;\n                // check to see if we are http polling\n                if (!!isPolling) {\n                    // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second\n                    if (timeoutCount - 1 >= method.transactionPollingTimeout) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n                else {\n                    if (timeoutCount - 1 >= method.transactionBlockTimeout) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n        }\n        else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({\n                message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n                data: err\n            }, defer.eventEmitter, defer.reject);\n        }\n    };\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function (existingReceipt) {\n        const startInterval = () => {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        };\n        if (!this.requestManager.provider.on) {\n            startInterval();\n        }\n        else {\n            _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {\n                if (err || !blockHeader) {\n                    // fall back to polling\n                    startInterval();\n                }\n                else {\n                    checkConfirmation(existingReceipt, false, err, blockHeader, sub);\n                }\n            });\n        }\n    }.bind(this);\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n        .then(function (receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n        }\n        else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n        .catch(function () {\n        if (!promiseResolved)\n            startWatching();\n    });\n};\nvar getWallet = function (from, accounts) {\n    var wallet = null;\n    // is index given\n    if (_.isNumber(from)) {\n        wallet = accounts.wallet[from];\n        // is account given\n    }\n    else if (_.isObject(from) && from.address && from.privateKey) {\n        wallet = from;\n        // search in wallet for address\n    }\n    else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n    return wallet;\n};\nMethod.prototype.buildCall = function () {\n    var method = this, isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'), // || method.call === 'personal_sendTransaction'\n    isCall = (method.call === 'eth_call');\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx), payload = method.toPayload(Array.prototype.slice.call(arguments));\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            if (method.handleRevert && isCall && method.abiCoder) {\n                var reasonData;\n                // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response\n                // Geth >= 1.9.15 attaches the reason data to an error object.\n                // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)\n                if (!err && method.isRevertReasonString(result)) {\n                    reasonData = result.substring(10);\n                }\n                else if (err && err.data) {\n                    reasonData = err.data.substring(10);\n                }\n                if (reasonData) {\n                    var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);\n                    var signature = 'Error(String)';\n                    utils._fireError(errors.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {\n                        reason: reason,\n                        signature: signature\n                    });\n                    return;\n                }\n            }\n            try {\n                result = method.formatOutput(result);\n            }\n            catch (e) {\n                err = e;\n            }\n            if (result instanceof Error) {\n                err = result;\n            }\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            }\n            else {\n                if (err.error) {\n                    err = err.error;\n                }\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n            // return PROMISE\n            if (!isSendTx) {\n                if (!err) {\n                    defer.resolve(result);\n                }\n                // return PROMIEVENT\n            }\n            else {\n                defer.eventEmitter.emit('transactionHash', result);\n                method._confirmTransaction(defer, result, payload);\n            }\n        };\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function (sign) {\n            var signedPayload = _.extend({}, payload, {\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            });\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n        var sendRequest = function (payload, method) {\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var txOptions = _.omit(tx, 'from');\n                        if (method.defaultChain && !txOptions.chain) {\n                            txOptions.chain = method.defaultChain;\n                        }\n                        if (method.defaultHardfork && !txOptions.hardfork) {\n                            txOptions.hardfork = method.defaultHardfork;\n                        }\n                        if (method.defaultCommon && !txOptions.common) {\n                            txOptions.common = method.defaultCommon;\n                        }\n                        method.accounts.signTransaction(txOptions, wallet.privateKey)\n                            .then(sendSignedTx)\n                            .catch(function (err) {\n                            if (_.isFunction(defer.eventEmitter.listeners) && defer.eventEmitter.listeners('error').length) {\n                                try {\n                                    defer.eventEmitter.emit('error', err);\n                                }\n                                catch (err) {\n                                    // Ignore userland error prevent it to bubble up within web3.\n                                }\n                                defer.eventEmitter.removeAllListeners();\n                                defer.eventEmitter.catch(function () {\n                                });\n                            }\n                            defer.reject(err);\n                        });\n                        return;\n                    }\n                    // ETH_SIGN\n                }\n                else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n                }\n            }\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n        // Send the actual transaction\n        if (isSendTx && _.isObject(payload.params[0]) && typeof payload.params[0].gasPrice === 'undefined') {\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n            getGasPrice(function (err, gasPrice) {\n                if (gasPrice) {\n                    payload.params[0].gasPrice = gasPrice;\n                }\n                if (isSendTx) {\n                    setTimeout(() => {\n                        defer.eventEmitter.emit('sending', payload);\n                    }, 0);\n                }\n                sendRequest(payload, method);\n            });\n        }\n        else {\n            if (isSendTx) {\n                setTimeout(() => {\n                    defer.eventEmitter.emit('sending', payload);\n                }, 0);\n            }\n            sendRequest(payload, method);\n        }\n        if (isSendTx) {\n            setTimeout(() => {\n                defer.eventEmitter.emit('sent', payload);\n            }, 0);\n        }\n        return defer.eventEmitter;\n    };\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\n/**\n * Returns the revert reason string if existing or otherwise false.\n *\n * @method getRevertReason\n *\n * @param {Object} txOptions\n * @param {Number} blockNumber\n *\n * @returns {Promise<Boolean|String>}\n */\nMethod.prototype.getRevertReason = function (txOptions, blockNumber) {\n    var self = this;\n    return new Promise(function (resolve, reject) {\n        (new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            abiCoder: self.abiCoder,\n            handleRevert: true\n        }))\n            .createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber))\n            .then(function () {\n            resolve(false);\n        })\n            .catch(function (error) {\n            if (error.reason) {\n                resolve({\n                    reason: error.reason,\n                    signature: error.signature\n                });\n            }\n            else {\n                reject(error);\n            }\n        });\n    });\n};\n/**\n * Checks if the given hex string is a revert message from the EVM\n *\n * @method isRevertReasonString\n *\n * @param {String} data - Hex string prefixed with 0x\n *\n * @returns {Boolean}\n */\nMethod.prototype.isRevertReasonString = function (data) {\n    return _.isString(data) && ((data.length - 2) / 2) % 32 === 4 && data.substring(0, 10) === '0x08c379a0';\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\nmodule.exports = Method;\n"]},"metadata":{},"sourceType":"script"}