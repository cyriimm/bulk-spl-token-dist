{"ast":null,"code":"/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nvar _ = require('underscore');\n\nvar BN = require('bn.js');\n\nvar utils = require('./utils.js');\n\nvar _elementaryName = function (name) {\n  /*jshint maxcomplexity:false */\n  if (name.startsWith('int[')) {\n    return 'int256' + name.slice(3);\n  } else if (name === 'int') {\n    return 'int256';\n  } else if (name.startsWith('uint[')) {\n    return 'uint256' + name.slice(4);\n  } else if (name === 'uint') {\n    return 'uint256';\n  } else if (name.startsWith('fixed[')) {\n    return 'fixed128x128' + name.slice(5);\n  } else if (name === 'fixed') {\n    return 'fixed128x128';\n  } else if (name.startsWith('ufixed[')) {\n    return 'ufixed128x128' + name.slice(6);\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n\n  return name;\n}; // Parse N from type<N>\n\n\nvar _parseTypeN = function (type) {\n  var typesize = /^\\D+(\\d+).*$/.exec(type);\n  return typesize ? parseInt(typesize[1], 10) : null;\n}; // Parse N from type[<N>]\n\n\nvar _parseTypeNArray = function (type) {\n  var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n  return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n  var type = typeof arg;\n\n  if (type === 'string') {\n    if (utils.isHexStrict(arg)) {\n      return new BN(arg.replace(/0x/i, ''), 16);\n    } else {\n      return new BN(arg, 10);\n    }\n  } else if (type === 'number') {\n    return new BN(arg);\n  } else if (utils.isBigNumber(arg)) {\n    return new BN(arg.toString(10));\n  } else if (utils.isBN(arg)) {\n    return arg;\n  } else {\n    throw new Error(arg + ' is not a number');\n  }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n  /*jshint maxcomplexity:false */\n  var size, num;\n  type = _elementaryName(type);\n\n  if (type === 'bytes') {\n    if (value.replace(/^0x/i, '').length % 2 !== 0) {\n      throw new Error('Invalid bytes characters ' + value.length);\n    }\n\n    return value;\n  } else if (type === 'string') {\n    return utils.utf8ToHex(value);\n  } else if (type === 'bool') {\n    return value ? '01' : '00';\n  } else if (type.startsWith('address')) {\n    if (arraySize) {\n      size = 64;\n    } else {\n      size = 40;\n    }\n\n    if (!utils.isAddress(value)) {\n      throw new Error(value + ' is not a valid address, or the checksum is invalid.');\n    }\n\n    return utils.leftPad(value.toLowerCase(), size);\n  }\n\n  size = _parseTypeN(type);\n\n  if (type.startsWith('bytes')) {\n    if (!size) {\n      throw new Error('bytes[] not yet supported in solidity');\n    } // must be 32 byte slices when in an array\n\n\n    if (arraySize) {\n      size = 32;\n    }\n\n    if (size < 1 || size > 32 || size < value.replace(/^0x/i, '').length / 2) {\n      throw new Error('Invalid bytes' + size + ' for ' + value);\n    }\n\n    return utils.rightPad(value, size * 2);\n  } else if (type.startsWith('uint')) {\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error('Invalid uint' + size + ' size');\n    }\n\n    num = _parseNumber(value);\n\n    if (num.bitLength() > size) {\n      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n    }\n\n    if (num.lt(new BN(0))) {\n      throw new Error('Supplied uint ' + num.toString() + ' is negative');\n    }\n\n    return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n  } else if (type.startsWith('int')) {\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error('Invalid int' + size + ' size');\n    }\n\n    num = _parseNumber(value);\n\n    if (num.bitLength() > size) {\n      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n    }\n\n    if (num.lt(new BN(0))) {\n      return num.toTwos(size).toString('hex');\n    } else {\n      return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n    }\n  } else {\n    // FIXME: support all other types\n    throw new Error('Unsupported or invalid type: ' + type);\n  }\n};\n\nvar _processSolidityEncodePackedArgs = function (arg) {\n  /*jshint maxcomplexity:false */\n  if (_.isArray(arg)) {\n    throw new Error('Autodetection of array types is not supported.');\n  }\n\n  var type,\n      value = '';\n  var hexArg, arraySize; // if type is given\n\n  if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n    type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n    value = arg.hasOwnProperty('v') ? arg.v : arg.value; // otherwise try to guess the type\n  } else {\n    type = utils.toHex(arg, true);\n    value = utils.toHex(arg);\n\n    if (!type.startsWith('int') && !type.startsWith('uint')) {\n      type = 'bytes';\n    }\n  }\n\n  if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n    value = new BN(value);\n  } // get the array size\n\n\n  if (_.isArray(value)) {\n    arraySize = _parseTypeNArray(type);\n\n    if (arraySize && value.length !== arraySize) {\n      throw new Error(type + ' is not matching the given array ' + JSON.stringify(value));\n    } else {\n      arraySize = value.length;\n    }\n  }\n\n  if (_.isArray(value)) {\n    hexArg = value.map(function (val) {\n      return _solidityPack(type, val, arraySize).toString('hex').replace('0x', '');\n    });\n    return hexArg.join('');\n  } else {\n    hexArg = _solidityPack(type, value, arraySize);\n    return hexArg.toString('hex').replace('0x', '');\n  }\n};\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\n\n\nvar soliditySha3 = function () {\n  /*jshint maxcomplexity:false */\n  var args = Array.prototype.slice.call(arguments);\n\n  var hexArgs = _.map(args, _processSolidityEncodePackedArgs); // console.log(args, hexArgs);\n  // console.log('0x'+ hexArgs.join(''));\n\n\n  return utils.sha3('0x' + hexArgs.join(''));\n};\n/**\n * Hashes solidity values to a sha3 hash using keccak 256 but does return the hash of value `null` instead of `null`\n *\n * @method soliditySha3Raw\n * @return {Object} the sha3\n */\n\n\nvar soliditySha3Raw = function () {\n  return utils.sha3Raw('0x' + _.map(Array.prototype.slice.call(arguments), _processSolidityEncodePackedArgs).join(''));\n};\n/**\n * Encode packed args to hex\n *\n * @method encodePacked\n * @return {String} the hex encoded arguments\n */\n\n\nvar encodePacked = function () {\n  /*jshint maxcomplexity:false */\n  var args = Array.prototype.slice.call(arguments);\n\n  var hexArgs = _.map(args, _processSolidityEncodePackedArgs);\n\n  return '0x' + hexArgs.join('').toLowerCase();\n};\n\nmodule.exports = {\n  soliditySha3: soliditySha3,\n  soliditySha3Raw: soliditySha3Raw,\n  encodePacked: encodePacked\n};","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/web3-utils/lib/soliditySha3.js"],"names":["_","require","BN","utils","_elementaryName","name","startsWith","slice","_parseTypeN","type","typesize","exec","parseInt","_parseTypeNArray","arraySize","_parseNumber","arg","isHexStrict","replace","isBigNumber","toString","isBN","Error","_solidityPack","value","size","num","length","utf8ToHex","isAddress","leftPad","toLowerCase","rightPad","bitLength","lt","toTwos","_processSolidityEncodePackedArgs","isArray","hexArg","isObject","hasOwnProperty","t","v","toHex","test","JSON","stringify","map","val","join","soliditySha3","args","Array","prototype","call","arguments","hexArgs","sha3","soliditySha3Raw","sha3Raw","encodePacked","module","exports"],"mappings":"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","sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    }\n    else if (name === 'int') {\n        return 'int256';\n    }\n    else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    }\n    else if (name === 'uint') {\n        return 'uint256';\n    }\n    else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    }\n    else if (name === 'fixed') {\n        return 'fixed128x128';\n    }\n    else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    }\n    else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i, ''), 16);\n        }\n        else {\n            return new BN(arg, 10);\n        }\n    }\n    else if (type === 'number') {\n        return new BN(arg);\n    }\n    else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    }\n    else if (utils.isBN(arg)) {\n        return arg;\n    }\n    else {\n        throw new Error(arg + ' is not a number');\n    }\n};\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n    var size, num;\n    type = _elementaryName(type);\n    if (type === 'bytes') {\n        if (value.replace(/^0x/i, '').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters ' + value.length);\n        }\n        return value;\n    }\n    else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    }\n    else if (type === 'bool') {\n        return value ? '01' : '00';\n    }\n    else if (type.startsWith('address')) {\n        if (arraySize) {\n            size = 64;\n        }\n        else {\n            size = 40;\n        }\n        if (!utils.isAddress(value)) {\n            throw new Error(value + ' is not a valid address, or the checksum is invalid.');\n        }\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n    size = _parseTypeN(type);\n    if (type.startsWith('bytes')) {\n        if (!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n        // must be 32 byte slices when in an array\n        if (arraySize) {\n            size = 32;\n        }\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i, '').length / 2) {\n            throw new Error('Invalid bytes' + size + ' for ' + value);\n        }\n        return utils.rightPad(value, size * 2);\n    }\n    else if (type.startsWith('uint')) {\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint' + size + ' size');\n        }\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n        if (num.lt(new BN(0))) {\n            throw new Error('Supplied uint ' + num.toString() + ' is negative');\n        }\n        return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n    }\n    else if (type.startsWith('int')) {\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int' + size + ' size');\n        }\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n        if (num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        }\n        else {\n            return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n        }\n    }\n    else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\nvar _processSolidityEncodePackedArgs = function (arg) {\n    /*jshint maxcomplexity:false */\n    if (_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n    var type, value = '';\n    var hexArg, arraySize;\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n        // otherwise try to guess the type\n    }\n    else {\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n    if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n    // get the array size\n    if (_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if (arraySize && value.length !== arraySize) {\n            throw new Error(type + ' is not matching the given array ' + JSON.stringify(value));\n        }\n        else {\n            arraySize = value.length;\n        }\n    }\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x', '');\n        });\n        return hexArg.join('');\n    }\n    else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x', '');\n    }\n};\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n    var args = Array.prototype.slice.call(arguments);\n    var hexArgs = _.map(args, _processSolidityEncodePackedArgs);\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n    return utils.sha3('0x' + hexArgs.join(''));\n};\n/**\n * Hashes solidity values to a sha3 hash using keccak 256 but does return the hash of value `null` instead of `null`\n *\n * @method soliditySha3Raw\n * @return {Object} the sha3\n */\nvar soliditySha3Raw = function () {\n    return utils.sha3Raw('0x' + _.map(Array.prototype.slice.call(arguments), _processSolidityEncodePackedArgs).join(''));\n};\n/**\n * Encode packed args to hex\n *\n * @method encodePacked\n * @return {String} the hex encoded arguments\n */\nvar encodePacked = function () {\n    /*jshint maxcomplexity:false */\n    var args = Array.prototype.slice.call(arguments);\n    var hexArgs = _.map(args, _processSolidityEncodePackedArgs);\n    return '0x' + hexArgs.join('').toLowerCase();\n};\nmodule.exports = {\n    soliditySha3: soliditySha3,\n    soliditySha3Raw: soliditySha3Raw,\n    encodePacked: encodePacked\n};\n"]},"metadata":{},"sourceType":"script"}