{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/BalancesList.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback, useEffect, useContext } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport { refreshWalletPublicKeys, useBalanceInfo, useWallet, useWalletPublicKeys, useWalletSelector } from '../utils/wallet';\nimport { findAssociatedTokenAddress } from '../utils/tokens';\nimport LoadingIndicator from './LoadingIndicator';\nimport Collapse from '@material-ui/core/Collapse';\nimport { Typography } from '@material-ui/core';\nimport TokenInfoDialog from './TokenInfoDialog';\nimport Link from '@material-ui/core/Link';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { abbreviateAddress, useIsExtensionWidth } from '../utils/utils';\nimport Button from '@material-ui/core/Button';\nimport SendIcon from '@material-ui/icons/Send';\nimport ReceiveIcon from '@material-ui/icons/WorkOutline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AddIcon from '@material-ui/icons/Add';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport EditIcon from '@material-ui/icons/Edit';\nimport MergeType from '@material-ui/icons/MergeType';\nimport SortIcon from '@material-ui/icons/Sort';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddTokenDialog from './AddTokenDialog';\nimport ExportAccountDialog from './ExportAccountDialog';\nimport SendDialog from './SendDialog';\nimport DepositDialog from './DepositDialog';\nimport { useIsProdNetwork, refreshAccountInfo, useSolanaExplorerUrlSuffix, useConnectionConfig, ConnectionContext } from '../utils/connection';\nimport { serumMarkets, priceStore } from '../utils/markets';\nimport { swapApiRequest } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport { showTokenInfoDialog } from '../utils/config';\nimport CloseTokenAccountDialog from './CloseTokenAccountButton';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport TokenIcon from './TokenIcon';\nimport EditAccountNameDialog from './EditAccountNameDialog';\nimport MergeAccountsDialog from './MergeAccountsDialog'; //imports\n\nimport { PublicKey } from '@solana/web3.js';\nimport { useConnection } from '../utils/connection';\nimport { parseMintData, parseTokenAccountData } from '../utils/tokens/data';\nimport { TOKEN_PROGRAM_ID } from '../utils/tokens/instructions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst balanceFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n  useGrouping: true\n});\nconst SortAccounts = {\n  None: 0,\n  Ascending: 1,\n  Descending: 2\n}; // Aggregated $USD values of all child BalanceListItems child components.\n//\n// Values:\n// * undefined => loading.\n// * null => no market exists.\n// * float => done.\n//\n// For a given set of publicKeys, we know all the USD values have been loaded when\n// all of their values in this object are not `undefined`.\n\nconst usdValues = {}; // Calculating associated token addresses is an asynchronous operation, so we cache\n// the values so that we can quickly render components using them. This prevents\n// flickering for the associated token fingerprint icon.\n\nconst associatedTokensCache = {};\nconst numberFormat = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n});\n\nfunction fairsIsLoaded(publicKeys) {\n  return publicKeys.filter(pk => usdValues[pk.toString()] !== undefined).length === publicKeys.length;\n}\n\nexport default function BalancesList() {\n  _s();\n\n  const wallet = useWallet();\n  const [publicKeys, loaded] = useWalletPublicKeys();\n  const [showAddTokenDialog, setShowAddTokenDialog] = useState(false);\n  const [showEditAccountNameDialog, setShowEditAccountNameDialog] = useState(false);\n  const [showMergeAccounts, setShowMergeAccounts] = useState(false);\n  const [sortAccounts, setSortAccounts] = useState(SortAccounts.None);\n  const {\n    accounts,\n    setAccountName\n  } = useWalletSelector();\n  const isExtensionWidth = useIsExtensionWidth(); // Dummy var to force rerenders on demand.\n\n  const [, setForceUpdate] = useState(false);\n  const selectedAccount = accounts.find(a => a.isSelected);\n  const allTokensLoaded = loaded && fairsIsLoaded(publicKeys);\n  let sortedPublicKeys = publicKeys;\n\n  if (allTokensLoaded && sortAccounts !== SortAccounts.None) {\n    sortedPublicKeys = [...publicKeys];\n    sortedPublicKeys.sort((a, b) => {\n      const aVal = usdValues[a.toString()];\n      const bVal = usdValues[b.toString()];\n      a = aVal === undefined || aVal === null ? -1 : aVal;\n      b = bVal === undefined || bVal === null ? -1 : bVal;\n\n      if (sortAccounts === SortAccounts.Descending) {\n        if (a < b) {\n          return -1;\n        } else if (a > b) {\n          return 1;\n        } else {\n          return 0;\n        }\n      } else {\n        if (b < a) {\n          return -1;\n        } else if (b > a) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n  }\n\n  const totalUsdValue = publicKeys.filter(pk => usdValues[pk.toString()]).map(pk => usdValues[pk.toString()]).reduce((a, b) => a + b, 0.0); // Memoized callback and component for the `BalanceListItems`.\n  //\n  // The `BalancesList` fetches data, e.g., fairs for tokens using React hooks\n  // in each of the child `BalanceListItem` components. However, we want the\n  // parent component, to aggregate all of this data together, for example,\n  // to show the cumulative USD amount in the wallet.\n  //\n  // To achieve this, we need to pass a callback from the parent to the chlid,\n  // so that the parent can collect the results of all the async network requests.\n  // However, this can cause a render loop, since invoking the callback can cause\n  // the parent to rerender, which causese the child to rerender, which causes\n  // the callback to be invoked.\n  //\n  // To solve this, we memoize all the `BalanceListItem` children components.\n\n  const setUsdValuesCallback = useCallback((publicKey, usdValue) => {\n    if (usdValues[publicKey.toString()] !== usdValue) {\n      usdValues[publicKey.toString()] = usdValue;\n\n      if (fairsIsLoaded(publicKeys)) {\n        setForceUpdate(forceUpdate => !forceUpdate);\n      }\n    }\n  }, [publicKeys]);\n  const balanceListItemsMemo = useMemo(() => {\n    return sortedPublicKeys.map(pk => {\n      return /*#__PURE__*/React.memo(props => {\n        return /*#__PURE__*/_jsxDEV(BalanceListItem, {\n          publicKey: pk,\n          setUsdValue: setUsdValuesCallback\n        }, pk.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this);\n      });\n    });\n  }, [sortedPublicKeys, setUsdValuesCallback]);\n  const iconSize = isExtensionWidth ? 'small' : 'medium';\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      color: \"default\",\n      elevation: 1,\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          style: {\n            flexGrow: 1,\n            fontSize: isExtensionWidth && '1rem'\n          },\n          component: \"h2\",\n          children: [selectedAccount && selectedAccount.name, isExtensionWidth ? '' : ' Balances', ' ', allTokensLoaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"(\", numberFormat.format(totalUsdValue.toFixed(2)), \")\"]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), selectedAccount && selectedAccount.name !== 'Main account' && selectedAccount.name !== 'Hardware wallet' && /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Edit Account Name\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => setShowEditAccountNameDialog(true),\n            children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Merge Tokens\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => setShowMergeAccounts(true),\n            children: /*#__PURE__*/_jsxDEV(MergeType, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Add Token\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => setShowAddTokenDialog(true),\n            children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Sort Tokens\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => {\n              switch (sortAccounts) {\n                case SortAccounts.None:\n                  setSortAccounts(SortAccounts.Ascending);\n                  return;\n\n                case SortAccounts.Ascending:\n                  setSortAccounts(SortAccounts.Descending);\n                  return;\n\n                case SortAccounts.Descending:\n                  setSortAccounts(SortAccounts.None);\n                  return;\n\n                default:\n                  console.error('invalid sort type', sortAccounts);\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(SortIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Refresh\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => {\n              refreshWalletPublicKeys(wallet);\n              publicKeys.map(publicKey => refreshAccountInfo(wallet.connection, publicKey, true));\n            },\n            style: {\n              marginRight: -12\n            },\n            children: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      disablePadding: true,\n      children: [balanceListItemsMemo.map(Memoized => /*#__PURE__*/_jsxDEV(Memoized, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this)), loaded ? null : /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTokenDialog, {\n      open: showAddTokenDialog,\n      onClose: () => setShowAddTokenDialog(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditAccountNameDialog, {\n      open: showEditAccountNameDialog,\n      onClose: () => setShowEditAccountNameDialog(false),\n      oldName: selectedAccount ? selectedAccount.name : '',\n      onEdit: name => {\n        setAccountName(selectedAccount.selector, name);\n        setShowEditAccountNameDialog(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MergeAccountsDialog, {\n      open: showMergeAccounts,\n      onClose: () => setShowMergeAccounts(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BulkSend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BalancesList, \"ZkIq238p6GN/GA7KhVHyW8ZhlTk=\", false, function () {\n  return [useWallet, useWalletPublicKeys, useWalletSelector, useIsExtensionWidth];\n});\n\n_c = BalancesList;\n\nfunction BulkSend() {\n  _s2();\n\n  const [items, setItems] = useState([{\n    name: 'usdc',\n    toAddress: '83848484844',\n    spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    amount: '300'\n  }, {\n    name: 'usdt',\n    to: '83848484844',\n    spl_address: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',\n    amount: '28383'\n  }, {\n    name: 'serum',\n    to: '83848484844',\n    spl_address: 'SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt',\n    amount: '28383'\n  }]); // const connection = useConnection();\n\n  let context = useContext(ConnectionContext);\n  const {\n    endpoint,\n    setEndpoint,\n    connection\n  } = context;\n  useEffect(() => {\n    // Promise.all(\n    //   items.map(async (item) => {\n    const func = async () => {\n      const accountInfo = await connection.getAccountInfo(new PublicKey(items[0].spl_address));\n      let {\n        mint,\n        owner,\n        amount\n      } = (accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.owner.equals(TOKEN_PROGRAM_ID)) ? parseTokenAccountData(accountInfo.data) : {};\n      console.log(mint.toBase58(), items[0].name);\n      const res = await connection.getAccountInfo(x);\n      console.log(connection);\n      console.log(res); // let { decimals } = parseMintData(mintInfo.data);\n      // console.log(mintInfo, decimals);\n      // const balanceInfo = useBalanceInfoMin(new PublicKey(item.spl_address));\n      // console.log(balanceInfo);\n    };\n\n    func(); //   }),\n    // );\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"davik\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 10\n  }, this);\n}\n\n_s2(BulkSend, \"3J4ET8ERaQBwmT0JgW/Mnip8MNQ=\");\n\n_c2 = BulkSend;\nconst useStyles = makeStyles(theme => ({\n  address: {\n    textOverflow: 'ellipsis',\n    overflowX: 'hidden'\n  },\n  itemDetails: {\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    marginBottom: theme.spacing(2)\n  },\n  buttonContainer: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\nexport function BalanceListItem({\n  publicKey,\n  expandable,\n  setUsdValue\n}) {\n  _s3();\n\n  var _tokenName;\n\n  const wallet = useWallet();\n  const balanceInfo = useBalanceInfo(publicKey);\n  const classes = useStyles();\n  const connection = useConnection();\n  const [open, setOpen] = useState(false);\n  const isExtensionWidth = useIsExtensionWidth();\n  const [, setForceUpdate] = useState(false); // Valid states:\n  //   * undefined => loading.\n  //   * null => not found.\n  //   * else => price is loaded.\n\n  const [price, setPrice] = useState(undefined);\n  useEffect(() => {\n    if (balanceInfo) {\n      if (balanceInfo.tokenSymbol) {\n        const coin = balanceInfo.tokenSymbol.toUpperCase(); // Don't fetch USD stable coins. Mark to 1 USD.\n\n        if (coin === 'USDT' || coin === 'USDC') {\n          setPrice(1);\n        } // A Serum market exists. Fetch the price.\n        else if (serumMarkets[coin]) {\n            let m = serumMarkets[coin];\n            priceStore.getPrice(connection, m.name).then(price => {\n              setPrice(price);\n            }).catch(err => {\n              console.error(err);\n              setPrice(null);\n            });\n          } // No Serum market exists.\n          else {\n              setPrice(null);\n            }\n      } // No token symbol so don't fetch market data.\n      else {\n          setPrice(null);\n        }\n    }\n  }, [price, balanceInfo, connection]);\n  expandable = expandable === undefined ? true : expandable;\n\n  if (!balanceInfo) {\n    return /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n      delay: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 12\n    }, this);\n  }\n\n  let {\n    amount,\n    decimals,\n    mint,\n    tokenName,\n    tokenSymbol,\n    tokenLogoUri\n  } = balanceInfo;\n  tokenName = (_tokenName = tokenName) !== null && _tokenName !== void 0 ? _tokenName : abbreviateAddress(mint);\n  let displayName;\n\n  if (isExtensionWidth) {\n    displayName = tokenSymbol !== null && tokenSymbol !== void 0 ? tokenSymbol : tokenName;\n  } else {\n    displayName = tokenName + (tokenSymbol ? ` (${tokenSymbol})` : '');\n  } // Fetch and cache the associated token address.\n\n\n  if (wallet && wallet.publicKey && mint) {\n    if (associatedTokensCache[wallet.publicKey.toString()] === undefined || associatedTokensCache[wallet.publicKey.toString()][mint.toString()] === undefined) {\n      findAssociatedTokenAddress(wallet.publicKey, mint).then(assocTok => {\n        let walletAccounts = Object.assign({}, associatedTokensCache[wallet.publicKey.toString()]);\n        walletAccounts[mint.toString()] = assocTok;\n        associatedTokensCache[wallet.publicKey.toString()] = walletAccounts;\n\n        if (assocTok.equals(publicKey)) {\n          // Force a rerender now that we've cached the value.\n          setForceUpdate(forceUpdate => !forceUpdate);\n        }\n      });\n    }\n  } // undefined => not loaded.\n\n\n  let isAssociatedToken = mint ? undefined : false;\n\n  if (wallet && wallet.publicKey && mint && associatedTokensCache[wallet.publicKey.toString()]) {\n    let acc = associatedTokensCache[wallet.publicKey.toString()][mint.toString()];\n\n    if (acc) {\n      if (acc.equals(publicKey)) {\n        isAssociatedToken = true;\n      } else {\n        isAssociatedToken = false;\n      }\n    }\n  }\n\n  const subtitle = isExtensionWidth || !publicKey.equals(balanceInfo.owner) ? undefined : /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      height: '20px',\n      overflow: 'hidden'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column'\n      },\n      children: publicKey.toBase58()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 501,\n    columnNumber: 7\n  }, this);\n  const usdValue = price === undefined // Not yet loaded.\n  ? undefined : price === null // Loaded and empty.\n  ? null : (amount / Math.pow(10, decimals) * price).toFixed(2); // Loaded.\n\n  if (setUsdValue && usdValue !== undefined) {\n    setUsdValue(publicKey, usdValue === null ? null : parseFloat(usdValue));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListItem, {\n      button: true,\n      onClick: () => expandable && setOpen(open => !open),\n      children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n        children: /*#__PURE__*/_jsxDEV(TokenIcon, {\n          mint: mint,\n          tokenName: tokenName,\n          url: tokenLogoUri,\n          size: 28\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [balanceFormat.format(amount / Math.pow(10, decimals)), ' ', displayName]\n          }, void 0, true),\n          secondary: subtitle,\n          secondaryTypographyProps: {\n            className: classes.address\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column'\n          },\n          children: price && /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"textSecondary\",\n            children: numberFormat.format(usdValue)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this), expandable ? open ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 47\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this), expandable && /*#__PURE__*/_jsxDEV(Collapse, {\n      in: open,\n      timeout: \"auto\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(BalanceListItemDetails, {\n        isAssociatedToken: isAssociatedToken,\n        publicKey: publicKey,\n        serumMarkets: serumMarkets,\n        balanceInfo: balanceInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s3(BalanceListItem, \"Hrfd84COwnSZjCOTUnRdna8oWIE=\", false, function () {\n  return [useWallet, useBalanceInfo, useStyles, useConnection, useIsExtensionWidth];\n});\n\n_c3 = BalanceListItem;\n\nfunction BalanceListItemDetails({\n  publicKey,\n  serumMarkets,\n  balanceInfo,\n  isAssociatedToken\n}) {\n  _s4();\n\n  var _balanceInfo$mint2;\n\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const classes = useStyles();\n  const [sendDialogOpen, setSendDialogOpen] = useState(false);\n  const [depositDialogOpen, setDepositDialogOpen] = useState(false);\n  const [tokenInfoDialogOpen, setTokenInfoDialogOpen] = useState(false);\n  const [exportAccDialogOpen, setExportAccDialogOpen] = useState(false);\n  const [closeTokenAccountDialogOpen, setCloseTokenAccountDialogOpen] = useState(false);\n  const wallet = useWallet();\n  const isProdNetwork = useIsProdNetwork();\n  const [swapInfo] = useAsyncData(async () => {\n    var _balanceInfo$mint;\n\n    if (!showSwapAddress || !isProdNetwork) {\n      return null;\n    }\n\n    return await swapApiRequest('POST', 'swap_to', {\n      blockchain: 'sol',\n      coin: (_balanceInfo$mint = balanceInfo.mint) === null || _balanceInfo$mint === void 0 ? void 0 : _balanceInfo$mint.toBase58(),\n      address: publicKey.toBase58()\n    }, {\n      ignoreUserErrors: true\n    });\n  }, ['swapInfo', isProdNetwork, (_balanceInfo$mint2 = balanceInfo.mint) === null || _balanceInfo$mint2 === void 0 ? void 0 : _balanceInfo$mint2.toBase58(), publicKey.toBase58()]);\n  const isExtensionWidth = useIsExtensionWidth();\n\n  if (!balanceInfo) {\n    return /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n      delay: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 12\n    }, this);\n  }\n\n  let {\n    mint,\n    tokenName,\n    tokenSymbol,\n    owner,\n    amount\n  } = balanceInfo; // Only show the export UI for the native SOL coin.\n\n  const exportNeedsDisplay = mint === null && tokenName === 'SOL' && tokenSymbol === 'SOL';\n  const market = tokenSymbol ? serumMarkets[tokenSymbol.toUpperCase()] ? serumMarkets[tokenSymbol.toUpperCase()].publicKey : undefined : undefined;\n  const isSolAddress = publicKey.equals(owner);\n  const additionalInfo = isExtensionWidth ? undefined : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      children: [\"Token Name: \", tokenName !== null && tokenName !== void 0 ? tokenName : 'Unknown']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      children: [\"Token Symbol: \", tokenSymbol !== null && tokenSymbol !== void 0 ? tokenSymbol : 'Unknown']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 7\n    }, this), mint ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      className: classes.address,\n      children: [\"Token Address: \", mint.toBase58()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 9\n    }, this) : null, !isSolAddress && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      className: classes.address,\n      children: [isAssociatedToken ? 'Associated' : '', \" Token Metadata:\", ' ', publicKey.toBase58()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 9\n    }, this), !isSolAddress && isAssociatedToken === false && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: \"This is an auxiliary token account.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: `https://explorer.solana.com/account/${publicKey.toBase58()}` + urlSuffix,\n            target: \"_blank\",\n            rel: \"noopener\",\n            children: \"View on Solana\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this), market && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: `https://dex.projectserum.com/#/market/${market}`,\n            target: \"_blank\",\n            rel: \"noopener\",\n            children: \"View on Serum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 13\n        }, this), swapInfo && swapInfo.coin.erc20Contract && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: `https://etherscan.io/token/${swapInfo.coin.erc20Contract}` + urlSuffix,\n            target: \"_blank\",\n            rel: \"noopener\",\n            children: \"View on Ethereum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }, this), exportNeedsDisplay && wallet.allowsExport && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: '#',\n            onClick: e => setExportAccDialogOpen(true),\n            children: \"Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 656,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [wallet.allowsExport && /*#__PURE__*/_jsxDEV(ExportAccountDialog, {\n      onClose: () => setExportAccDialogOpen(false),\n      open: exportAccDialogOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.itemDetails,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.buttonContainer,\n        children: [!publicKey.equals(owner) && showTokenInfoDialog ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"default\",\n          startIcon: /*#__PURE__*/_jsxDEV(InfoIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 26\n          }, this),\n          onClick: () => setTokenInfoDialogOpen(true),\n          children: \"Token Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(ReceiveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 24\n          }, this),\n          onClick: () => setDepositDialogOpen(true),\n          children: \"Receive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 24\n          }, this),\n          onClick: () => setSendDialogOpen(true),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 11\n        }, this), localStorage.getItem('warning-close-account') && mint && amount === 0 ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"secondary\",\n          size: \"small\",\n          startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 752,\n            columnNumber: 26\n          }, this),\n          onClick: () => setCloseTokenAccountDialogOpen(true),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 9\n      }, this), additionalInfo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendDialog, {\n      open: sendDialogOpen,\n      onClose: () => setSendDialogOpen(false),\n      balanceInfo: balanceInfo,\n      publicKey: publicKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DepositDialog, {\n      open: depositDialogOpen,\n      onClose: () => setDepositDialogOpen(false),\n      balanceInfo: balanceInfo,\n      publicKey: publicKey,\n      swapInfo: swapInfo,\n      isAssociatedToken: isAssociatedToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 767,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TokenInfoDialog, {\n      open: tokenInfoDialogOpen,\n      onClose: () => setTokenInfoDialogOpen(false),\n      balanceInfo: balanceInfo,\n      publicKey: publicKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CloseTokenAccountDialog, {\n      open: closeTokenAccountDialogOpen,\n      onClose: () => setCloseTokenAccountDialogOpen(false),\n      balanceInfo: balanceInfo,\n      publicKey: publicKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 781,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s4(BalanceListItemDetails, \"gEmeB5mJ51l71x33xHMYZB3w4uI=\", false, function () {\n  return [useSolanaExplorerUrlSuffix, useStyles, useWallet, useIsProdNetwork, useAsyncData, useIsExtensionWidth];\n});\n\n_c4 = BalanceListItemDetails;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"BalancesList\");\n$RefreshReg$(_c2, \"BulkSend\");\n$RefreshReg$(_c3, \"BalanceListItem\");\n$RefreshReg$(_c4, \"BalanceListItemDetails\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/BalancesList.js"],"names":["React","useState","useMemo","useCallback","useEffect","useContext","List","ListItem","ListItemText","Paper","refreshWalletPublicKeys","useBalanceInfo","useWallet","useWalletPublicKeys","useWalletSelector","findAssociatedTokenAddress","LoadingIndicator","Collapse","Typography","TokenInfoDialog","Link","ExpandLess","ExpandMore","makeStyles","abbreviateAddress","useIsExtensionWidth","Button","SendIcon","ReceiveIcon","AppBar","Toolbar","AddIcon","RefreshIcon","IconButton","InfoIcon","Tooltip","EditIcon","MergeType","SortIcon","DeleteIcon","AddTokenDialog","ExportAccountDialog","SendDialog","DepositDialog","useIsProdNetwork","refreshAccountInfo","useSolanaExplorerUrlSuffix","useConnectionConfig","ConnectionContext","serumMarkets","priceStore","swapApiRequest","showSwapAddress","useAsyncData","showTokenInfoDialog","CloseTokenAccountDialog","ListItemIcon","TokenIcon","EditAccountNameDialog","MergeAccountsDialog","PublicKey","useConnection","parseMintData","parseTokenAccountData","TOKEN_PROGRAM_ID","balanceFormat","Intl","NumberFormat","undefined","minimumFractionDigits","maximumFractionDigits","useGrouping","SortAccounts","None","Ascending","Descending","usdValues","associatedTokensCache","numberFormat","style","currency","fairsIsLoaded","publicKeys","filter","pk","toString","length","BalancesList","wallet","loaded","showAddTokenDialog","setShowAddTokenDialog","showEditAccountNameDialog","setShowEditAccountNameDialog","showMergeAccounts","setShowMergeAccounts","sortAccounts","setSortAccounts","accounts","setAccountName","isExtensionWidth","setForceUpdate","selectedAccount","find","a","isSelected","allTokensLoaded","sortedPublicKeys","sort","b","aVal","bVal","totalUsdValue","map","reduce","setUsdValuesCallback","publicKey","usdValue","forceUpdate","balanceListItemsMemo","memo","props","iconSize","flexGrow","fontSize","name","format","toFixed","console","error","connection","marginRight","Memoized","selector","BulkSend","items","setItems","toAddress","spl_address","amount","to","context","endpoint","setEndpoint","func","accountInfo","getAccountInfo","mint","owner","equals","data","log","toBase58","res","x","useStyles","theme","address","textOverflow","overflowX","itemDetails","marginLeft","spacing","marginBottom","buttonContainer","display","justifyContent","marginTop","BalanceListItem","expandable","setUsdValue","balanceInfo","classes","open","setOpen","price","setPrice","tokenSymbol","coin","toUpperCase","m","getPrice","then","catch","err","decimals","tokenName","tokenLogoUri","displayName","assocTok","walletAccounts","Object","assign","isAssociatedToken","acc","subtitle","height","overflow","flexDirection","Math","pow","parseFloat","flex","className","BalanceListItemDetails","urlSuffix","sendDialogOpen","setSendDialogOpen","depositDialogOpen","setDepositDialogOpen","tokenInfoDialogOpen","setTokenInfoDialogOpen","exportAccDialogOpen","setExportAccDialogOpen","closeTokenAccountDialogOpen","setCloseTokenAccountDialogOpen","isProdNetwork","swapInfo","blockchain","ignoreUserErrors","exportNeedsDisplay","market","isSolAddress","additionalInfo","erc20Contract","allowsExport","e","localStorage","getItem"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useMemo,\n  useCallback,\n  useEffect,\n  useContext,\n} from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet,\n  useWalletPublicKeys,\n  useWalletSelector,\n} from '../utils/wallet';\nimport { findAssociatedTokenAddress } from '../utils/tokens';\nimport LoadingIndicator from './LoadingIndicator';\nimport Collapse from '@material-ui/core/Collapse';\nimport { Typography } from '@material-ui/core';\nimport TokenInfoDialog from './TokenInfoDialog';\nimport Link from '@material-ui/core/Link';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { abbreviateAddress, useIsExtensionWidth } from '../utils/utils';\nimport Button from '@material-ui/core/Button';\nimport SendIcon from '@material-ui/icons/Send';\nimport ReceiveIcon from '@material-ui/icons/WorkOutline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AddIcon from '@material-ui/icons/Add';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport EditIcon from '@material-ui/icons/Edit';\nimport MergeType from '@material-ui/icons/MergeType';\nimport SortIcon from '@material-ui/icons/Sort';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddTokenDialog from './AddTokenDialog';\nimport ExportAccountDialog from './ExportAccountDialog';\nimport SendDialog from './SendDialog';\nimport DepositDialog from './DepositDialog';\nimport {\n  useIsProdNetwork,\n  refreshAccountInfo,\n  useSolanaExplorerUrlSuffix,\n  useConnectionConfig,\n  ConnectionContext,\n} from '../utils/connection';\nimport { serumMarkets, priceStore } from '../utils/markets';\nimport { swapApiRequest } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport { showTokenInfoDialog } from '../utils/config';\n\nimport CloseTokenAccountDialog from './CloseTokenAccountButton';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport TokenIcon from './TokenIcon';\nimport EditAccountNameDialog from './EditAccountNameDialog';\nimport MergeAccountsDialog from './MergeAccountsDialog';\n\n//imports\n\nimport { PublicKey } from '@solana/web3.js';\nimport { useConnection } from '../utils/connection';\nimport { parseMintData, parseTokenAccountData } from '../utils/tokens/data';\nimport { TOKEN_PROGRAM_ID } from '../utils/tokens/instructions';\n\nconst balanceFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n  useGrouping: true,\n});\n\nconst SortAccounts = {\n  None: 0,\n  Ascending: 1,\n  Descending: 2,\n};\n\n// Aggregated $USD values of all child BalanceListItems child components.\n//\n// Values:\n// * undefined => loading.\n// * null => no market exists.\n// * float => done.\n//\n// For a given set of publicKeys, we know all the USD values have been loaded when\n// all of their values in this object are not `undefined`.\nconst usdValues = {};\n\n// Calculating associated token addresses is an asynchronous operation, so we cache\n// the values so that we can quickly render components using them. This prevents\n// flickering for the associated token fingerprint icon.\nconst associatedTokensCache = {};\n\nconst numberFormat = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nfunction fairsIsLoaded(publicKeys) {\n  return (\n    publicKeys.filter((pk) => usdValues[pk.toString()] !== undefined).length ===\n    publicKeys.length\n  );\n}\n\nexport default function BalancesList() {\n  const wallet = useWallet();\n  const [publicKeys, loaded] = useWalletPublicKeys();\n  const [showAddTokenDialog, setShowAddTokenDialog] = useState(false);\n  const [showEditAccountNameDialog, setShowEditAccountNameDialog] = useState(\n    false,\n  );\n  const [showMergeAccounts, setShowMergeAccounts] = useState(false);\n  const [sortAccounts, setSortAccounts] = useState(SortAccounts.None);\n  const { accounts, setAccountName } = useWalletSelector();\n  const isExtensionWidth = useIsExtensionWidth();\n  // Dummy var to force rerenders on demand.\n  const [, setForceUpdate] = useState(false);\n  const selectedAccount = accounts.find((a) => a.isSelected);\n  const allTokensLoaded = loaded && fairsIsLoaded(publicKeys);\n  let sortedPublicKeys = publicKeys;\n  if (allTokensLoaded && sortAccounts !== SortAccounts.None) {\n    sortedPublicKeys = [...publicKeys];\n    sortedPublicKeys.sort((a, b) => {\n      const aVal = usdValues[a.toString()];\n      const bVal = usdValues[b.toString()];\n\n      a = aVal === undefined || aVal === null ? -1 : aVal;\n      b = bVal === undefined || bVal === null ? -1 : bVal;\n      if (sortAccounts === SortAccounts.Descending) {\n        if (a < b) {\n          return -1;\n        } else if (a > b) {\n          return 1;\n        } else {\n          return 0;\n        }\n      } else {\n        if (b < a) {\n          return -1;\n        } else if (b > a) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n  }\n  const totalUsdValue = publicKeys\n    .filter((pk) => usdValues[pk.toString()])\n    .map((pk) => usdValues[pk.toString()])\n    .reduce((a, b) => a + b, 0.0);\n\n  // Memoized callback and component for the `BalanceListItems`.\n  //\n  // The `BalancesList` fetches data, e.g., fairs for tokens using React hooks\n  // in each of the child `BalanceListItem` components. However, we want the\n  // parent component, to aggregate all of this data together, for example,\n  // to show the cumulative USD amount in the wallet.\n  //\n  // To achieve this, we need to pass a callback from the parent to the chlid,\n  // so that the parent can collect the results of all the async network requests.\n  // However, this can cause a render loop, since invoking the callback can cause\n  // the parent to rerender, which causese the child to rerender, which causes\n  // the callback to be invoked.\n  //\n  // To solve this, we memoize all the `BalanceListItem` children components.\n  const setUsdValuesCallback = useCallback(\n    (publicKey, usdValue) => {\n      if (usdValues[publicKey.toString()] !== usdValue) {\n        usdValues[publicKey.toString()] = usdValue;\n        if (fairsIsLoaded(publicKeys)) {\n          setForceUpdate((forceUpdate) => !forceUpdate);\n        }\n      }\n    },\n    [publicKeys],\n  );\n  const balanceListItemsMemo = useMemo(() => {\n    return sortedPublicKeys.map((pk) => {\n      return React.memo((props) => {\n        return (\n          <BalanceListItem\n            key={pk.toString()}\n            publicKey={pk}\n            setUsdValue={setUsdValuesCallback}\n          />\n        );\n      });\n    });\n  }, [sortedPublicKeys, setUsdValuesCallback]);\n\n  const iconSize = isExtensionWidth ? 'small' : 'medium';\n\n  return (\n    <Paper>\n      <AppBar position=\"static\" color=\"default\" elevation={1}>\n        <Toolbar>\n          <Typography\n            variant=\"h6\"\n            style={{ flexGrow: 1, fontSize: isExtensionWidth && '1rem' }}\n            component=\"h2\"\n          >\n            {selectedAccount && selectedAccount.name}\n            {isExtensionWidth ? '' : ' Balances'}{' '}\n            {allTokensLoaded && (\n              <>({numberFormat.format(totalUsdValue.toFixed(2))})</>\n            )}\n          </Typography>\n          {selectedAccount &&\n            selectedAccount.name !== 'Main account' &&\n            selectedAccount.name !== 'Hardware wallet' && (\n              <Tooltip title=\"Edit Account Name\" arrow>\n                <IconButton\n                  size={iconSize}\n                  onClick={() => setShowEditAccountNameDialog(true)}\n                >\n                  <EditIcon />\n                </IconButton>\n              </Tooltip>\n            )}\n          <Tooltip title=\"Merge Tokens\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowMergeAccounts(true)}\n            >\n              <MergeType />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Add Token\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowAddTokenDialog(true)}\n            >\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Sort Tokens\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => {\n                switch (sortAccounts) {\n                  case SortAccounts.None:\n                    setSortAccounts(SortAccounts.Ascending);\n                    return;\n                  case SortAccounts.Ascending:\n                    setSortAccounts(SortAccounts.Descending);\n                    return;\n                  case SortAccounts.Descending:\n                    setSortAccounts(SortAccounts.None);\n                    return;\n                  default:\n                    console.error('invalid sort type', sortAccounts);\n                }\n              }}\n            >\n              <SortIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Refresh\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => {\n                refreshWalletPublicKeys(wallet);\n                publicKeys.map((publicKey) =>\n                  refreshAccountInfo(wallet.connection, publicKey, true),\n                );\n              }}\n              style={{ marginRight: -12 }}\n            >\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n      <List disablePadding>\n        {balanceListItemsMemo.map((Memoized) => (\n          <Memoized />\n        ))}\n        {loaded ? null : <LoadingIndicator />}\n      </List>\n      <AddTokenDialog\n        open={showAddTokenDialog}\n        onClose={() => setShowAddTokenDialog(false)}\n      />\n      <EditAccountNameDialog\n        open={showEditAccountNameDialog}\n        onClose={() => setShowEditAccountNameDialog(false)}\n        oldName={selectedAccount ? selectedAccount.name : ''}\n        onEdit={(name) => {\n          setAccountName(selectedAccount.selector, name);\n          setShowEditAccountNameDialog(false);\n        }}\n      />\n      <MergeAccountsDialog\n        open={showMergeAccounts}\n        onClose={() => setShowMergeAccounts(false)}\n      />\n      <BulkSend />\n    </Paper>\n  );\n}\n\nfunction BulkSend() {\n  const [items, setItems] = useState([\n    {\n      name: 'usdc',\n      toAddress: '83848484844',\n      spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n      amount: '300',\n    },\n    {\n      name: 'usdt',\n\n      to: '83848484844',\n      spl_address: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',\n      amount: '28383',\n    },\n    {\n      name: 'serum',\n      to: '83848484844',\n      spl_address: 'SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt',\n      amount: '28383',\n    },\n  ]);\n  // const connection = useConnection();\n  let context = useContext(ConnectionContext);\n\n  const { endpoint, setEndpoint, connection } = context;\n\n  useEffect(() => {\n    // Promise.all(\n    //   items.map(async (item) => {\n    const func = async () => {\n      const accountInfo = await connection.getAccountInfo(\n        new PublicKey(items[0].spl_address),\n      );\n\n      let { mint, owner, amount } = accountInfo?.owner.equals(TOKEN_PROGRAM_ID)\n        ? parseTokenAccountData(accountInfo.data)\n        : {};\n      console.log(mint.toBase58(), items[0].name);\n\n      const res = await connection.getAccountInfo(x);\n      console.log(connection);\n\n      console.log(res);\n      // let { decimals } = parseMintData(mintInfo.data);\n\n      // console.log(mintInfo, decimals);\n\n      // const balanceInfo = useBalanceInfoMin(new PublicKey(item.spl_address));\n      // console.log(balanceInfo);\n    };\n\n    func();\n\n    //   }),\n    // );\n  }, []);\n\n  return <div>davik</div>;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  address: {\n    textOverflow: 'ellipsis',\n    overflowX: 'hidden',\n  },\n  itemDetails: {\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    marginBottom: theme.spacing(2),\n  },\n  buttonContainer: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport function BalanceListItem({ publicKey, expandable, setUsdValue }) {\n  const wallet = useWallet();\n  const balanceInfo = useBalanceInfo(publicKey);\n  const classes = useStyles();\n  const connection = useConnection();\n  const [open, setOpen] = useState(false);\n  const isExtensionWidth = useIsExtensionWidth();\n  const [, setForceUpdate] = useState(false);\n  // Valid states:\n  //   * undefined => loading.\n  //   * null => not found.\n  //   * else => price is loaded.\n  const [price, setPrice] = useState(undefined);\n  useEffect(() => {\n    if (balanceInfo) {\n      if (balanceInfo.tokenSymbol) {\n        const coin = balanceInfo.tokenSymbol.toUpperCase();\n        // Don't fetch USD stable coins. Mark to 1 USD.\n        if (coin === 'USDT' || coin === 'USDC') {\n          setPrice(1);\n        }\n        // A Serum market exists. Fetch the price.\n        else if (serumMarkets[coin]) {\n          let m = serumMarkets[coin];\n          priceStore\n            .getPrice(connection, m.name)\n            .then((price) => {\n              setPrice(price);\n            })\n            .catch((err) => {\n              console.error(err);\n              setPrice(null);\n            });\n        }\n        // No Serum market exists.\n        else {\n          setPrice(null);\n        }\n      }\n      // No token symbol so don't fetch market data.\n      else {\n        setPrice(null);\n      }\n    }\n  }, [price, balanceInfo, connection]);\n\n  expandable = expandable === undefined ? true : expandable;\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let {\n    amount,\n    decimals,\n    mint,\n    tokenName,\n    tokenSymbol,\n    tokenLogoUri,\n  } = balanceInfo;\n  tokenName = tokenName ?? abbreviateAddress(mint);\n  let displayName;\n  if (isExtensionWidth) {\n    displayName = tokenSymbol ?? tokenName;\n  } else {\n    displayName = tokenName + (tokenSymbol ? ` (${tokenSymbol})` : '');\n  }\n\n  // Fetch and cache the associated token address.\n  if (wallet && wallet.publicKey && mint) {\n    if (\n      associatedTokensCache[wallet.publicKey.toString()] === undefined ||\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()] ===\n        undefined\n    ) {\n      findAssociatedTokenAddress(wallet.publicKey, mint).then((assocTok) => {\n        let walletAccounts = Object.assign(\n          {},\n          associatedTokensCache[wallet.publicKey.toString()],\n        );\n        walletAccounts[mint.toString()] = assocTok;\n        associatedTokensCache[wallet.publicKey.toString()] = walletAccounts;\n        if (assocTok.equals(publicKey)) {\n          // Force a rerender now that we've cached the value.\n          setForceUpdate((forceUpdate) => !forceUpdate);\n        }\n      });\n    }\n  }\n\n  // undefined => not loaded.\n  let isAssociatedToken = mint ? undefined : false;\n  if (\n    wallet &&\n    wallet.publicKey &&\n    mint &&\n    associatedTokensCache[wallet.publicKey.toString()]\n  ) {\n    let acc =\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()];\n    if (acc) {\n      if (acc.equals(publicKey)) {\n        isAssociatedToken = true;\n      } else {\n        isAssociatedToken = false;\n      }\n    }\n  }\n\n  const subtitle =\n    isExtensionWidth || !publicKey.equals(balanceInfo.owner) ? undefined : (\n      <div style={{ display: 'flex', height: '20px', overflow: 'hidden' }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          {publicKey.toBase58()}\n        </div>\n      </div>\n    );\n\n  const usdValue =\n    price === undefined // Not yet loaded.\n      ? undefined\n      : price === null // Loaded and empty.\n      ? null\n      : ((amount / Math.pow(10, decimals)) * price).toFixed(2); // Loaded.\n  if (setUsdValue && usdValue !== undefined) {\n    setUsdValue(publicKey, usdValue === null ? null : parseFloat(usdValue));\n  }\n\n  return (\n    <>\n      <ListItem button onClick={() => expandable && setOpen((open) => !open)}>\n        <ListItemIcon>\n          <TokenIcon\n            mint={mint}\n            tokenName={tokenName}\n            url={tokenLogoUri}\n            size={28}\n          />\n        </ListItemIcon>\n        <div style={{ display: 'flex', flex: 1 }}>\n          <ListItemText\n            primary={\n              <>\n                {balanceFormat.format(amount / Math.pow(10, decimals))}{' '}\n                {displayName}\n              </>\n            }\n            secondary={subtitle}\n            secondaryTypographyProps={{ className: classes.address }}\n          />\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              flexDirection: 'column',\n            }}\n          >\n            {price && (\n              <Typography color=\"textSecondary\">\n                {numberFormat.format(usdValue)}\n              </Typography>\n            )}\n          </div>\n        </div>\n        {expandable ? open ? <ExpandLess /> : <ExpandMore /> : <></>}\n      </ListItem>\n      {expandable && (\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <BalanceListItemDetails\n            isAssociatedToken={isAssociatedToken}\n            publicKey={publicKey}\n            serumMarkets={serumMarkets}\n            balanceInfo={balanceInfo}\n          />\n        </Collapse>\n      )}\n    </>\n  );\n}\n\nfunction BalanceListItemDetails({\n  publicKey,\n  serumMarkets,\n  balanceInfo,\n  isAssociatedToken,\n}) {\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const classes = useStyles();\n  const [sendDialogOpen, setSendDialogOpen] = useState(false);\n  const [depositDialogOpen, setDepositDialogOpen] = useState(false);\n  const [tokenInfoDialogOpen, setTokenInfoDialogOpen] = useState(false);\n  const [exportAccDialogOpen, setExportAccDialogOpen] = useState(false);\n  const [\n    closeTokenAccountDialogOpen,\n    setCloseTokenAccountDialogOpen,\n  ] = useState(false);\n  const wallet = useWallet();\n  const isProdNetwork = useIsProdNetwork();\n  const [swapInfo] = useAsyncData(async () => {\n    if (!showSwapAddress || !isProdNetwork) {\n      return null;\n    }\n    return await swapApiRequest(\n      'POST',\n      'swap_to',\n      {\n        blockchain: 'sol',\n        coin: balanceInfo.mint?.toBase58(),\n        address: publicKey.toBase58(),\n      },\n      { ignoreUserErrors: true },\n    );\n  }, [\n    'swapInfo',\n    isProdNetwork,\n    balanceInfo.mint?.toBase58(),\n    publicKey.toBase58(),\n  ]);\n  const isExtensionWidth = useIsExtensionWidth();\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let { mint, tokenName, tokenSymbol, owner, amount } = balanceInfo;\n\n  // Only show the export UI for the native SOL coin.\n  const exportNeedsDisplay =\n    mint === null && tokenName === 'SOL' && tokenSymbol === 'SOL';\n\n  const market = tokenSymbol\n    ? serumMarkets[tokenSymbol.toUpperCase()]\n      ? serumMarkets[tokenSymbol.toUpperCase()].publicKey\n      : undefined\n    : undefined;\n  const isSolAddress = publicKey.equals(owner);\n  const additionalInfo = isExtensionWidth ? undefined : (\n    <>\n      <Typography variant=\"body2\">\n        Token Name: {tokenName ?? 'Unknown'}\n      </Typography>\n      <Typography variant=\"body2\">\n        Token Symbol: {tokenSymbol ?? 'Unknown'}\n      </Typography>\n      {mint ? (\n        <Typography variant=\"body2\" className={classes.address}>\n          Token Address: {mint.toBase58()}\n        </Typography>\n      ) : null}\n      {!isSolAddress && (\n        <Typography variant=\"body2\" className={classes.address}>\n          {isAssociatedToken ? 'Associated' : ''} Token Metadata:{' '}\n          {publicKey.toBase58()}\n        </Typography>\n      )}\n      {!isSolAddress && isAssociatedToken === false && (\n        <div style={{ display: 'flex' }}>\n          This is an auxiliary token account.\n        </div>\n      )}\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div>\n          <Typography variant=\"body2\">\n            <Link\n              href={\n                `https://explorer.solana.com/account/${publicKey.toBase58()}` +\n                urlSuffix\n              }\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              View on Solana\n            </Link>\n          </Typography>\n          {market && (\n            <Typography variant=\"body2\">\n              <Link\n                href={`https://dex.projectserum.com/#/market/${market}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Serum\n              </Link>\n            </Typography>\n          )}\n          {swapInfo && swapInfo.coin.erc20Contract && (\n            <Typography variant=\"body2\">\n              <Link\n                href={\n                  `https://etherscan.io/token/${swapInfo.coin.erc20Contract}` +\n                  urlSuffix\n                }\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Ethereum\n              </Link>\n            </Typography>\n          )}\n        </div>\n        {exportNeedsDisplay && wallet.allowsExport && (\n          <div>\n            <Typography variant=\"body2\">\n              <Link href={'#'} onClick={(e) => setExportAccDialogOpen(true)}>\n                Export\n              </Link>\n            </Typography>\n          </div>\n        )}\n      </div>\n    </>\n  );\n\n  return (\n    <>\n      {wallet.allowsExport && (\n        <ExportAccountDialog\n          onClose={() => setExportAccDialogOpen(false)}\n          open={exportAccDialogOpen}\n        />\n      )}\n      <div className={classes.itemDetails}>\n        <div className={classes.buttonContainer}>\n          {!publicKey.equals(owner) && showTokenInfoDialog ? (\n            <Button\n              variant=\"outlined\"\n              color=\"default\"\n              startIcon={<InfoIcon />}\n              onClick={() => setTokenInfoDialogOpen(true)}\n            >\n              Token Info\n            </Button>\n          ) : null}\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<ReceiveIcon />}\n            onClick={() => setDepositDialogOpen(true)}\n          >\n            Receive\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<SendIcon />}\n            onClick={() => setSendDialogOpen(true)}\n          >\n            Send\n          </Button>\n          {localStorage.getItem('warning-close-account') &&\n          mint &&\n          amount === 0 ? (\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              size=\"small\"\n              startIcon={<DeleteIcon />}\n              onClick={() => setCloseTokenAccountDialogOpen(true)}\n            >\n              Delete\n            </Button>\n          ) : null}\n        </div>\n        {additionalInfo}\n      </div>\n      <SendDialog\n        open={sendDialogOpen}\n        onClose={() => setSendDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <DepositDialog\n        open={depositDialogOpen}\n        onClose={() => setDepositDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n        swapInfo={swapInfo}\n        isAssociatedToken={isAssociatedToken}\n      />\n      <TokenInfoDialog\n        open={tokenInfoDialogOpen}\n        onClose={() => setTokenInfoDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <CloseTokenAccountDialog\n        open={closeTokenAccountDialogOpen}\n        onClose={() => setCloseTokenAccountDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}