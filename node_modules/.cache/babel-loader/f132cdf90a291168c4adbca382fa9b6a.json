{"ast":null,"code":"import { getUnlockedMnemonicAndSeed } from './../wallet-seed';\nimport * as bip32 from 'bip32';\nimport nacl from 'tweetnacl';\nimport { Account } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { derivePath } from 'ed25519-hd-key';\nexport const DERIVATION_PATH = {\n  deprecated: undefined,\n  bip44: 'bip44',\n  bip44Change: 'bip44Change',\n  bip44Root: 'bip44Root' // Ledger only.\n\n};\nexport function getAccountFromSeed(seed, walletIndex, dPath = undefined, accountIndex = 0) {\n  const derivedSeed = deriveSeed(seed, walletIndex, dPath, accountIndex);\n  return new Account(nacl.sign.keyPair.fromSeed(derivedSeed).secretKey);\n}\n\nfunction deriveSeed(seed, walletIndex, derivationPath, accountIndex) {\n  switch (derivationPath) {\n    case DERIVATION_PATH.deprecated:\n      const path = `m/501'/${walletIndex}'/0/${accountIndex}`;\n      return bip32.fromSeed(seed).derivePath(path).privateKey;\n\n    case DERIVATION_PATH.bip44:\n      const path44 = `m/44'/501'/${walletIndex}'`;\n      return derivePath(path44, seed).key;\n\n    case DERIVATION_PATH.bip44Change:\n      const path44Change = `m/44'/501'/${walletIndex}'/0'`;\n      return derivePath(path44Change, seed).key;\n\n    default:\n      throw new Error(`invalid derivation path: ${derivationPath}`);\n  }\n}\n\nexport class LocalStorageWalletProvider {\n  constructor(args) {\n    this.init = async () => {\n      const {\n        seed\n      } = await getUnlockedMnemonicAndSeed();\n\n      this.listAddresses = async walletCount => {\n        const seedBuffer = Buffer.from(seed, 'hex');\n        return [...Array(walletCount).keys()].map(walletIndex => {\n          let address = getAccountFromSeed(seedBuffer, walletIndex).publicKey;\n          let name = localStorage.getItem(`name${walletIndex}`);\n          return {\n            index: walletIndex,\n            address,\n            name\n          };\n        });\n      };\n\n      return this;\n    };\n\n    this.signTransaction = async transaction => {\n      transaction.partialSign(this.account);\n      return transaction;\n    };\n\n    this.createSignature = message => {\n      return bs58.encode(nacl.sign.detached(message, this.account.secretKey));\n    };\n\n    this.account = args.account;\n  }\n\n  get publicKey() {\n    return this.account.publicKey;\n  }\n\n}","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/localStorage.js"],"names":["getUnlockedMnemonicAndSeed","bip32","nacl","Account","bs58","derivePath","DERIVATION_PATH","deprecated","undefined","bip44","bip44Change","bip44Root","getAccountFromSeed","seed","walletIndex","dPath","accountIndex","derivedSeed","deriveSeed","sign","keyPair","fromSeed","secretKey","derivationPath","path","privateKey","path44","key","path44Change","Error","LocalStorageWalletProvider","constructor","args","init","listAddresses","walletCount","seedBuffer","Buffer","from","Array","keys","map","address","publicKey","name","localStorage","getItem","index","signTransaction","transaction","partialSign","account","createSignature","message","encode","detached"],"mappings":"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","sourcesContent":["import { getUnlockedMnemonicAndSeed } from './../wallet-seed';\nimport * as bip32 from 'bip32';\nimport nacl from 'tweetnacl';\nimport { Account } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { derivePath } from 'ed25519-hd-key';\n\nexport const DERIVATION_PATH = {\n  deprecated: undefined,\n  bip44: 'bip44',\n  bip44Change: 'bip44Change',\n  bip44Root: 'bip44Root', // Ledger only.\n};\n\nexport function getAccountFromSeed(\n  seed,\n  walletIndex,\n  dPath = undefined,\n  accountIndex = 0,\n) {\n  const derivedSeed = deriveSeed(seed, walletIndex, dPath, accountIndex);\n  return new Account(nacl.sign.keyPair.fromSeed(derivedSeed).secretKey);\n}\n\nfunction deriveSeed(seed, walletIndex, derivationPath, accountIndex) {\n  switch (derivationPath) {\n    case DERIVATION_PATH.deprecated:\n      const path = `m/501'/${walletIndex}'/0/${accountIndex}`;\n      return bip32.fromSeed(seed).derivePath(path).privateKey;\n    case DERIVATION_PATH.bip44:\n      const path44 = `m/44'/501'/${walletIndex}'`;\n      return derivePath(path44, seed).key;\n    case DERIVATION_PATH.bip44Change:\n      const path44Change = `m/44'/501'/${walletIndex}'/0'`;\n      return derivePath(path44Change, seed).key;\n    default:\n      throw new Error(`invalid derivation path: ${derivationPath}`);\n  }\n}\n\nexport class LocalStorageWalletProvider {\n  constructor(args) {\n    this.account = args.account;\n  }\n\n  init = async () => {\n    const { seed } = await getUnlockedMnemonicAndSeed();\n    this.listAddresses = async (walletCount) => {\n      const seedBuffer = Buffer.from(seed, 'hex');\n      return [...Array(walletCount).keys()].map((walletIndex) => {\n        let address = getAccountFromSeed(seedBuffer, walletIndex).publicKey;\n        let name = localStorage.getItem(`name${walletIndex}`);\n        return { index: walletIndex, address, name };\n      });\n    };\n    return this;\n  };\n\n  get publicKey() {\n    return this.account.publicKey;\n  }\n\n  signTransaction = async (transaction) => {\n    transaction.partialSign(this.account);\n    return transaction;\n  };\n\n  createSignature = (message) => {\n    return bs58.encode(nacl.sign.detached(message, this.account.secretKey));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}