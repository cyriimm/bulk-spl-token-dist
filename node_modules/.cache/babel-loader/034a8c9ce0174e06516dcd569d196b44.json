{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignTransactionFormContent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport bs58 from 'bs58';\nimport { Divider, Typography } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport { decodeMessage } from '../utils/transactions';\nimport { useConnection, useSolanaExplorerUrlSuffix } from '../utils/connection';\nimport { useWallet, useWalletPublicKeys } from '../utils/wallet';\nimport NewOrder from './instructions/NewOrder';\nimport UnknownInstruction from './instructions/UnknownInstruction';\nimport SystemInstruction from '../components/instructions/SystemInstruction';\nimport DexInstruction from '../components/instructions/DexInstruction';\nimport TokenInstruction from '../components/instructions/TokenInstruction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction isSafeInstruction(publicKeys, owner, txInstructions) {\n  let unsafe = false;\n  const states = {\n    CREATED: 0,\n    OWNED: 1,\n    CLOSED_TO_OWNED_DESTINATION: 2\n  };\n  const accountStates = {};\n\n  function isOwned(pubkey) {\n    if (!pubkey) {\n      return false;\n    }\n\n    if (publicKeys === null || publicKeys === void 0 ? void 0 : publicKeys.some(ownedAccountPubkey => ownedAccountPubkey.equals(pubkey))) {\n      return true;\n    }\n\n    return accountStates[pubkey.toBase58()] === states.OWNED;\n  }\n\n  txInstructions.forEach(instructions => {\n    instructions.forEach(instruction => {\n      if (!instruction) {\n        unsafe = true;\n      } else {\n        if (instruction.type === 'raydium') {// Whitelist raydium for now.\n        } else if (instruction.type === 'mango') {// Whitelist mango for now.\n        } else if (['cancelOrder', 'matchOrders', 'cancelOrderV3'].includes(instruction.type)) {// It is always considered safe to cancel orders, match orders\n        } else if (instruction.type === 'systemCreate') {\n          let {\n            newAccountPubkey\n          } = instruction.data;\n\n          if (!newAccountPubkey) {\n            unsafe = true;\n          } else {\n            accountStates[newAccountPubkey.toBase58()] = states.CREATED;\n          }\n        } else if (['newOrder', 'newOrderV3'].includes(instruction.type)) {\n          // New order instructions are safe if the owner is this wallet\n          let {\n            openOrdersPubkey,\n            ownerPubkey\n          } = instruction.data;\n\n          if (ownerPubkey && owner.equals(ownerPubkey)) {\n            accountStates[openOrdersPubkey.toBase58()] = states.OWNED;\n          } else {\n            unsafe = true;\n          }\n        } else if (instruction.type === 'initializeAccount') {\n          // New SPL token accounts are only considered safe if they are owned by this wallet and newly created\n          let {\n            ownerPubkey,\n            accountPubkey\n          } = instruction.data;\n\n          if (owner && ownerPubkey && owner.equals(ownerPubkey) && accountPubkey && accountStates[accountPubkey.toBase58()] === states.CREATED) {\n            accountStates[accountPubkey.toBase58()] = states.OWNED;\n          } else {\n            unsafe = true;\n          }\n        } else if (instruction.type === 'settleFunds') {\n          // Settling funds is only safe if the destinations are owned\n          let {\n            basePubkey,\n            quotePubkey\n          } = instruction.data;\n\n          if (!isOwned(basePubkey) || !isOwned(quotePubkey)) {\n            unsafe = true;\n          }\n        } else if (instruction.type === 'closeAccount') {\n          // Closing is only safe if the destination is owned\n          let {\n            sourcePubkey,\n            destinationPubkey\n          } = instruction.data;\n\n          if (isOwned(destinationPubkey)) {\n            accountStates[sourcePubkey.toBase58()] = states.CLOSED_TO_OWNED_DESTINATION;\n          } else {\n            unsafe = true;\n          }\n        } else {\n          unsafe = true;\n        }\n      }\n    });\n  }); // Check that all accounts are owned\n\n  if (Object.values(accountStates).some(state => ![states.CLOSED_TO_OWNED_DESTINATION, states.OWNED].includes(state))) {\n    unsafe = true;\n  }\n\n  return !unsafe;\n}\n\nexport default function SignTransactionFormContent({\n  origin,\n  messages,\n  onApprove,\n  autoApprove,\n  buttonRef\n}) {\n  _s();\n\n  const explorerUrlSuffix = useSolanaExplorerUrlSuffix();\n  const connection = useConnection();\n  const wallet = useWallet();\n  const [publicKeys] = useWalletPublicKeys();\n  const [parsing, setParsing] = useState(true); // An array of arrays, where each element is the set of instructions for a\n  // single transaction.\n\n  const [txInstructions, setTxInstructions] = useState(null);\n  const isMultiTx = messages.length > 1;\n  useEffect(() => {\n    Promise.all(messages.map(m => decodeMessage(connection, wallet, m))).then(txInstructions => {\n      setTxInstructions(txInstructions);\n      setParsing(false);\n    });\n  }, [messages, connection, wallet]);\n  const validator = useMemo(() => {\n    return {\n      safe: publicKeys && txInstructions && isSafeInstruction(publicKeys, wallet.publicKey, txInstructions)\n    };\n  }, [publicKeys, txInstructions, wallet]);\n  useEffect(() => {\n    if (validator.safe && autoApprove) {\n      console.log('Auto approving safe transaction');\n      onApprove();\n    } else {\n      // brings window to front when we receive new instructions\n      // this needs to be executed from wallet instead of adapter\n      // to ensure chrome brings window to front\n      window.focus(); // Scroll to approve button and focus it to enable approve with enter.\n      // Keep currentButtonRef in local variable, so the reference can't become\n      // invalid until the timeout is over. this was happening to all auto-\n      // approvals for unknown reasons.\n\n      let currentButtonRef = buttonRef.current;\n\n      if (currentButtonRef) {\n        currentButtonRef.scrollIntoView({\n          behavior: 'smooth'\n        });\n        setTimeout(() => currentButtonRef.focus(), 50);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [validator, autoApprove, buttonRef]);\n\n  const onOpenAddress = address => {\n    address && window.open('https://explorer.solana.com/address/' + address + explorerUrlSuffix, '_blank');\n  };\n\n  const getContent = instruction => {\n    switch (instruction === null || instruction === void 0 ? void 0 : instruction.type) {\n      case 'cancelOrder':\n      case 'cancelOrderV2':\n      case 'matchOrders':\n      case 'settleFunds':\n        return /*#__PURE__*/_jsxDEV(DexInstruction, {\n          instruction: instruction,\n          onOpenAddress: onOpenAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this);\n\n      case 'closeAccount':\n      case 'initializeAccount':\n      case 'transfer':\n      case 'approve':\n      case 'mintTo':\n        return /*#__PURE__*/_jsxDEV(TokenInstruction, {\n          instruction: instruction,\n          onOpenAddress: onOpenAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this);\n\n      case 'systemCreateWithSeed':\n      case 'systemCreate':\n      case 'systemTransfer':\n        return /*#__PURE__*/_jsxDEV(SystemInstruction, {\n          instruction: instruction,\n          onOpenAddress: onOpenAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this);\n\n      case 'newOrder':\n        return /*#__PURE__*/_jsxDEV(NewOrder, {\n          instruction: instruction,\n          onOpenAddress: onOpenAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this);\n\n      case 'newOrderV3':\n        return /*#__PURE__*/_jsxDEV(NewOrder, {\n          instruction: instruction,\n          onOpenAddress: onOpenAddress,\n          v3: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(UnknownInstruction, {\n          instruction: instruction,\n          onOpenAddress: onOpenAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this);\n    }\n  };\n\n  const txLabel = idx => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: [\"Transaction \", idx.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        style: {\n          marginTop: 20\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  const txListItem = (instructions, txIdx) => {\n    const ixs = instructions.map((instruction, i) => /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        marginTop: 20\n      },\n      children: [getContent(instruction), /*#__PURE__*/_jsxDEV(Divider, {\n        style: {\n          marginTop: 20\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this));\n\n    if (!isMultiTx) {\n      return ixs;\n    }\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        marginTop: 20\n      },\n      children: [txLabel(txIdx), ixs]\n    }, txIdx, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CardContent, {\n    children: parsing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'flex-end',\n          marginBottom: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n          style: {\n            marginRight: 20\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          style: {\n            fontWeight: 'bold'\n          },\n          gutterBottom: true,\n          children: [\"Parsing transaction\", isMultiTx > 0 ? 's' : '', \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), messages.map((message, idx) => /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          wordBreak: 'break-all'\n        },\n        children: bs58.encode(message)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: txInstructions ? `${origin} wants to:` : `Unknown transaction data`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this), txInstructions ? txInstructions.map((instructions, txIdx) => txListItem(instructions, txIdx)) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          style: {\n            fontWeight: 'bold'\n          },\n          gutterBottom: true,\n          children: [\"Unknown transaction\", isMultiTx > 0 ? 's' : '', \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 15\n        }, this), messages.map(message => /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            wordBreak: 'break-all'\n          },\n          children: bs58.encode(message)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignTransactionFormContent, \"vpF+Jve6wQHtpyAQLmk7zqbhlCY=\", false, function () {\n  return [useSolanaExplorerUrlSuffix, useConnection, useWallet, useWalletPublicKeys];\n});\n\n_c = SignTransactionFormContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignTransactionFormContent\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignTransactionFormContent.js"],"names":["React","useEffect","useMemo","useState","bs58","Divider","Typography","CardContent","CircularProgress","Box","decodeMessage","useConnection","useSolanaExplorerUrlSuffix","useWallet","useWalletPublicKeys","NewOrder","UnknownInstruction","SystemInstruction","DexInstruction","TokenInstruction","isSafeInstruction","publicKeys","owner","txInstructions","unsafe","states","CREATED","OWNED","CLOSED_TO_OWNED_DESTINATION","accountStates","isOwned","pubkey","some","ownedAccountPubkey","equals","toBase58","forEach","instructions","instruction","type","includes","newAccountPubkey","data","openOrdersPubkey","ownerPubkey","accountPubkey","basePubkey","quotePubkey","sourcePubkey","destinationPubkey","Object","values","state","SignTransactionFormContent","origin","messages","onApprove","autoApprove","buttonRef","explorerUrlSuffix","connection","wallet","parsing","setParsing","setTxInstructions","isMultiTx","length","Promise","all","map","m","then","validator","safe","publicKey","console","log","window","focus","currentButtonRef","current","scrollIntoView","behavior","setTimeout","onOpenAddress","address","open","getContent","txLabel","idx","toString","marginTop","txListItem","txIdx","ixs","i","display","alignItems","marginBottom","marginRight","fontWeight","message","wordBreak","encode"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport bs58 from 'bs58';\nimport { Divider, Typography } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport { decodeMessage } from '../utils/transactions';\nimport { useConnection, useSolanaExplorerUrlSuffix } from '../utils/connection';\nimport { useWallet, useWalletPublicKeys } from '../utils/wallet';\nimport NewOrder from './instructions/NewOrder';\nimport UnknownInstruction from './instructions/UnknownInstruction';\nimport SystemInstruction from '../components/instructions/SystemInstruction';\nimport DexInstruction from '../components/instructions/DexInstruction';\nimport TokenInstruction from '../components/instructions/TokenInstruction';\n\nfunction isSafeInstruction(publicKeys, owner, txInstructions) {\n  let unsafe = false;\n  const states = {\n    CREATED: 0,\n    OWNED: 1,\n    CLOSED_TO_OWNED_DESTINATION: 2,\n  };\n  const accountStates = {};\n\n  function isOwned(pubkey) {\n    if (!pubkey) {\n      return false;\n    }\n    if (\n      publicKeys?.some((ownedAccountPubkey) =>\n        ownedAccountPubkey.equals(pubkey),\n      )\n    ) {\n      return true;\n    }\n    return accountStates[pubkey.toBase58()] === states.OWNED;\n  }\n\n  txInstructions.forEach((instructions) => {\n    instructions.forEach((instruction) => {\n      if (!instruction) {\n        unsafe = true;\n      } else {\n        if (instruction.type === 'raydium') {\n          // Whitelist raydium for now.\n        } else if (instruction.type === 'mango') {\n          // Whitelist mango for now.\n        } else if (\n          ['cancelOrder', 'matchOrders', 'cancelOrderV3'].includes(\n            instruction.type,\n          )\n        ) {\n          // It is always considered safe to cancel orders, match orders\n        } else if (instruction.type === 'systemCreate') {\n          let { newAccountPubkey } = instruction.data;\n          if (!newAccountPubkey) {\n            unsafe = true;\n          } else {\n            accountStates[newAccountPubkey.toBase58()] = states.CREATED;\n          }\n        } else if (['newOrder', 'newOrderV3'].includes(instruction.type)) {\n          // New order instructions are safe if the owner is this wallet\n          let { openOrdersPubkey, ownerPubkey } = instruction.data;\n          if (ownerPubkey && owner.equals(ownerPubkey)) {\n            accountStates[openOrdersPubkey.toBase58()] = states.OWNED;\n          } else {\n            unsafe = true;\n          }\n        } else if (instruction.type === 'initializeAccount') {\n          // New SPL token accounts are only considered safe if they are owned by this wallet and newly created\n          let { ownerPubkey, accountPubkey } = instruction.data;\n          if (\n            owner &&\n            ownerPubkey &&\n            owner.equals(ownerPubkey) &&\n            accountPubkey &&\n            accountStates[accountPubkey.toBase58()] === states.CREATED\n          ) {\n            accountStates[accountPubkey.toBase58()] = states.OWNED;\n          } else {\n            unsafe = true;\n          }\n        } else if (instruction.type === 'settleFunds') {\n          // Settling funds is only safe if the destinations are owned\n          let { basePubkey, quotePubkey } = instruction.data;\n          if (!isOwned(basePubkey) || !isOwned(quotePubkey)) {\n            unsafe = true;\n          }\n        } else if (instruction.type === 'closeAccount') {\n          // Closing is only safe if the destination is owned\n          let { sourcePubkey, destinationPubkey } = instruction.data;\n          if (isOwned(destinationPubkey)) {\n            accountStates[sourcePubkey.toBase58()] =\n              states.CLOSED_TO_OWNED_DESTINATION;\n          } else {\n            unsafe = true;\n          }\n        } else {\n          unsafe = true;\n        }\n      }\n    });\n  });\n\n  // Check that all accounts are owned\n  if (\n    Object.values(accountStates).some(\n      (state) =>\n        ![states.CLOSED_TO_OWNED_DESTINATION, states.OWNED].includes(state),\n    )\n  ) {\n    unsafe = true;\n  }\n\n  return !unsafe;\n}\n\nexport default function SignTransactionFormContent({\n  origin,\n  messages,\n  onApprove,\n  autoApprove,\n  buttonRef,\n}) {\n  const explorerUrlSuffix = useSolanaExplorerUrlSuffix();\n  const connection = useConnection();\n  const wallet = useWallet();\n  const [publicKeys] = useWalletPublicKeys();\n\n  const [parsing, setParsing] = useState(true);\n  // An array of arrays, where each element is the set of instructions for a\n  // single transaction.\n  const [txInstructions, setTxInstructions] = useState(null);\n\n  const isMultiTx = messages.length > 1;\n\n  useEffect(() => {\n    Promise.all(messages.map((m) => decodeMessage(connection, wallet, m))).then(\n      (txInstructions) => {\n        setTxInstructions(txInstructions);\n        setParsing(false);\n      },\n    );\n  }, [messages, connection, wallet]);\n\n  const validator = useMemo(() => {\n    return {\n      safe:\n        publicKeys &&\n        txInstructions &&\n        isSafeInstruction(publicKeys, wallet.publicKey, txInstructions),\n    };\n  }, [publicKeys, txInstructions, wallet]);\n\n  useEffect(() => {\n    if (validator.safe && autoApprove) {\n      console.log('Auto approving safe transaction');\n      onApprove();\n    } else {\n      // brings window to front when we receive new instructions\n      // this needs to be executed from wallet instead of adapter\n      // to ensure chrome brings window to front\n      window.focus();\n\n      // Scroll to approve button and focus it to enable approve with enter.\n      // Keep currentButtonRef in local variable, so the reference can't become\n      // invalid until the timeout is over. this was happening to all auto-\n      // approvals for unknown reasons.\n      let currentButtonRef = buttonRef.current;\n      if (currentButtonRef) {\n        currentButtonRef.scrollIntoView({ behavior: 'smooth' });\n        setTimeout(() => currentButtonRef.focus(), 50);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [validator, autoApprove, buttonRef]);\n\n  const onOpenAddress = (address) => {\n    address &&\n      window.open(\n        'https://explorer.solana.com/address/' + address + explorerUrlSuffix,\n        '_blank',\n      );\n  };\n\n  const getContent = (instruction) => {\n    switch (instruction?.type) {\n      case 'cancelOrder':\n      case 'cancelOrderV2':\n      case 'matchOrders':\n      case 'settleFunds':\n        return (\n          <DexInstruction\n            instruction={instruction}\n            onOpenAddress={onOpenAddress}\n          />\n        );\n      case 'closeAccount':\n      case 'initializeAccount':\n      case 'transfer':\n      case 'approve':\n      case 'mintTo':\n        return (\n          <TokenInstruction\n            instruction={instruction}\n            onOpenAddress={onOpenAddress}\n          />\n        );\n      case 'systemCreateWithSeed':\n      case 'systemCreate':\n      case 'systemTransfer':\n        return (\n          <SystemInstruction\n            instruction={instruction}\n            onOpenAddress={onOpenAddress}\n          />\n        );\n      case 'newOrder':\n        return (\n          <NewOrder instruction={instruction} onOpenAddress={onOpenAddress} />\n        );\n      case 'newOrderV3':\n        return (\n          <NewOrder\n            instruction={instruction}\n            onOpenAddress={onOpenAddress}\n            v3={true}\n          />\n        );\n      default:\n        return (\n          <UnknownInstruction\n            instruction={instruction}\n            onOpenAddress={onOpenAddress}\n          />\n        );\n    }\n  };\n\n  const txLabel = (idx) => {\n    return (\n      <>\n        <Typography variant=\"h6\" gutterBottom>\n          Transaction {idx.toString()}\n        </Typography>\n        <Divider style={{ marginTop: 20 }} />\n      </>\n    );\n  };\n\n  const txListItem = (instructions, txIdx) => {\n    const ixs = instructions.map((instruction, i) => (\n      <Box style={{ marginTop: 20 }} key={i}>\n        {getContent(instruction)}\n        <Divider style={{ marginTop: 20 }} />\n      </Box>\n    ));\n\n    if (!isMultiTx) {\n      return ixs;\n    }\n\n    return (\n      <Box style={{ marginTop: 20 }} key={txIdx}>\n        {txLabel(txIdx)}\n        {ixs}\n      </Box>\n    );\n  };\n\n  return (\n    <CardContent>\n      {parsing ? (\n        <>\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'flex-end',\n              marginBottom: 20,\n            }}\n          >\n            <CircularProgress style={{ marginRight: 20 }} />\n            <Typography\n              variant=\"subtitle1\"\n              style={{ fontWeight: 'bold' }}\n              gutterBottom\n            >\n              Parsing transaction{isMultiTx > 0 ? 's' : ''}:\n            </Typography>\n          </div>\n          {messages.map((message, idx) => (\n            <Typography key={idx} style={{ wordBreak: 'break-all' }}>\n              {bs58.encode(message)}\n            </Typography>\n          ))}\n        </>\n      ) : (\n        <>\n          <Typography variant=\"h6\" gutterBottom>\n            {txInstructions\n              ? `${origin} wants to:`\n              : `Unknown transaction data`}\n          </Typography>\n          {txInstructions ? (\n            txInstructions.map((instructions, txIdx) =>\n              txListItem(instructions, txIdx),\n            )\n          ) : (\n            <>\n              <Typography\n                variant=\"subtitle1\"\n                style={{ fontWeight: 'bold' }}\n                gutterBottom\n              >\n                Unknown transaction{isMultiTx > 0 ? 's' : ''}:\n              </Typography>\n              {messages.map((message) => (\n                <Typography style={{ wordBreak: 'break-all' }}>\n                  {bs58.encode(message)}\n                </Typography>\n              ))}\n            </>\n          )}\n        </>\n      )}\n    </CardContent>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}