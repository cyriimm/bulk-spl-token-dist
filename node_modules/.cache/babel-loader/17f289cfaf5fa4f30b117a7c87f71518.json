{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar utils = require('web3-utils');\n\nvar Iban = require('web3-eth-iban');\n/**\n * Will format the given storage key array values to hex strings.\n *\n * @method inputStorageKeysFormatter\n *\n * @param {Array<Number|String|BN|BigNumber>} keys\n *\n * @returns {Array<String>}\n */\n\n\nvar inputStorageKeysFormatter = function (keys) {\n  return keys.map(utils.numberToHex);\n};\n/**\n * Will format the given proof response from the node.\n *\n * @method outputProofFormatter\n *\n * @param {object} proof\n *\n * @returns {object}\n */\n\n\nvar outputProofFormatter = function (proof) {\n  proof.address = utils.toChecksumAddress(proof.address);\n  proof.nonce = utils.hexToNumberString(proof.nonce);\n  proof.balance = utils.hexToNumberString(proof.balance);\n  return proof;\n};\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n *\n * @param {String|Number|BigNumber|BN} number\n *\n * @returns {BN} object\n */\n\n\nvar outputBigNumberFormatter = function (number) {\n  return utils.toBN(number).toString(10);\n};\n/**\n * Returns true if the given blockNumber is 'latest', 'pending', or 'earliest.\n *\n * @method isPredefinedBlockNumber\n *\n * @param {String} blockNumber\n *\n * @returns {Boolean}\n */\n\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n  return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n/**\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n *\n * @method inputDefaultBlockNumberFormatter\n *\n * @param {String|Number|BN|BigNumber} blockNumber\n *\n * @returns {String}\n */\n\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n  if (this && (blockNumber === undefined || blockNumber === null)) {\n    return inputBlockNumberFormatter(this.defaultBlock);\n  }\n\n  return inputBlockNumberFormatter(blockNumber);\n};\n/**\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n *\n * @param {String|Number|BN|BigNumber} blockNumber\n *\n * @returns {String}\n */\n\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n  if (blockNumber === undefined) {\n    return undefined;\n  }\n\n  if (isPredefinedBlockNumber(blockNumber)) {\n    return blockNumber;\n  }\n\n  if (blockNumber === 'genesis') {\n    return '0x0';\n  }\n\n  return utils.isHexStrict(blockNumber) ? _.isString(blockNumber) ? blockNumber.toLowerCase() : blockNumber : utils.numberToHex(blockNumber);\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\n\n\nvar _txInputFormatter = function (options) {\n  if (options.to) {\n    // it might be contract creation\n    options.to = inputAddressFormatter(options.to);\n  }\n\n  if (options.data && options.input) {\n    throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n  }\n\n  if (!options.data && options.input) {\n    options.data = options.input;\n    delete options.input;\n  }\n\n  if (options.data && !options.data.startsWith('0x')) {\n    options.data = '0x' + options.data;\n  }\n\n  if (options.data && !utils.isHex(options.data)) {\n    throw new Error('The data field must be HEX encoded data.');\n  } // allow both\n\n\n  if (options.gas || options.gasLimit) {\n    options.gas = options.gas || options.gasLimit;\n  }\n\n  ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n    return options[key] !== undefined;\n  }).forEach(function (key) {\n    options[key] = utils.numberToHex(options[key]);\n  });\n  return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n */\n\n\nvar inputCallFormatter = function (options) {\n  options = _txInputFormatter(options);\n  var from = options.from || (this ? this.defaultAccount : null);\n\n  if (from) {\n    options.from = inputAddressFormatter(from);\n  }\n\n  return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n */\n\n\nvar inputTransactionFormatter = function (options) {\n  options = _txInputFormatter(options); // check from, only if not number, or object\n\n  if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n    options.from = options.from || (this ? this.defaultAccount : null);\n\n    if (!options.from && !_.isNumber(options.from)) {\n      throw new Error('The send transactions \"from\" field must be defined!');\n    }\n\n    options.from = inputAddressFormatter(options.from);\n  }\n\n  return options;\n};\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\n\n\nvar inputSignFormatter = function (data) {\n  return utils.isHexStrict(data) ? data : utils.utf8ToHex(data);\n};\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n */\n\n\nvar outputTransactionFormatter = function (tx) {\n  if (tx.blockNumber !== null) tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n  if (tx.transactionIndex !== null) tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n  tx.nonce = utils.hexToNumber(tx.nonce);\n  tx.gas = utils.hexToNumber(tx.gas);\n  tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n  tx.value = outputBigNumberFormatter(tx.value);\n\n  if (tx.to && utils.isAddress(tx.to)) {\n    // tx.to could be `0x0` or `null` while contract creation\n    tx.to = utils.toChecksumAddress(tx.to);\n  } else {\n    tx.to = null; // set to `null` if invalid address\n  }\n\n  if (tx.from) {\n    tx.from = utils.toChecksumAddress(tx.from);\n  }\n\n  return tx;\n};\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n */\n\n\nvar outputTransactionReceiptFormatter = function (receipt) {\n  if (typeof receipt !== 'object') {\n    throw new Error('Received receipt is invalid: ' + receipt);\n  }\n\n  if (receipt.blockNumber !== null) receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n  if (receipt.transactionIndex !== null) receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n  receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n  receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n  if (_.isArray(receipt.logs)) {\n    receipt.logs = receipt.logs.map(outputLogFormatter);\n  }\n\n  if (receipt.contractAddress) {\n    receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n  }\n\n  if (typeof receipt.status !== 'undefined' && receipt.status !== null) {\n    receipt.status = Boolean(parseInt(receipt.status));\n  }\n\n  return receipt;\n};\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n */\n\n\nvar outputBlockFormatter = function (block) {\n  // transform to number\n  block.gasLimit = utils.hexToNumber(block.gasLimit);\n  block.gasUsed = utils.hexToNumber(block.gasUsed);\n  block.size = utils.hexToNumber(block.size);\n  block.timestamp = utils.hexToNumber(block.timestamp);\n  if (block.number !== null) block.number = utils.hexToNumber(block.number);\n  if (block.difficulty) block.difficulty = outputBigNumberFormatter(block.difficulty);\n  if (block.totalDifficulty) block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n  if (_.isArray(block.transactions)) {\n    block.transactions.forEach(function (item) {\n      if (!_.isString(item)) return outputTransactionFormatter(item);\n    });\n  }\n\n  if (block.miner) block.miner = utils.toChecksumAddress(block.miner);\n  return block;\n};\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\n\n\nvar inputLogFormatter = function (options) {\n  var toTopic = function (value) {\n    if (value === null || typeof value === 'undefined') return null;\n    value = String(value);\n    if (value.indexOf('0x') === 0) return value;else return utils.fromUtf8(value);\n  };\n\n  if (options === undefined) options = {}; // If options !== undefined, don't blow out existing data\n\n  if (options.fromBlock === undefined) options = { ...options,\n    fromBlock: 'latest'\n  };\n  if (options.fromBlock || options.fromBlock === 0) options.fromBlock = inputBlockNumberFormatter(options.fromBlock);\n  if (options.toBlock || options.toBlock === 0) options.toBlock = inputBlockNumberFormatter(options.toBlock); // make sure topics, get converted to hex\n\n  options.topics = options.topics || [];\n  options.topics = options.topics.map(function (topic) {\n    return _.isArray(topic) ? topic.map(toTopic) : toTopic(topic);\n  });\n  toTopic = null;\n\n  if (options.address) {\n    options.address = _.isArray(options.address) ? options.address.map(function (addr) {\n      return inputAddressFormatter(addr);\n    }) : inputAddressFormatter(options.address);\n  }\n\n  return options;\n};\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\n\n\nvar outputLogFormatter = function (log) {\n  // generate a custom log id\n  if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string' && typeof log.logIndex === 'string') {\n    var shaId = utils.sha3(log.blockHash.replace('0x', '') + log.transactionHash.replace('0x', '') + log.logIndex.replace('0x', ''));\n    log.id = 'log_' + shaId.replace('0x', '').substr(0, 8);\n  } else if (!log.id) {\n    log.id = null;\n  }\n\n  if (log.blockNumber !== null) log.blockNumber = utils.hexToNumber(log.blockNumber);\n  if (log.transactionIndex !== null) log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n  if (log.logIndex !== null) log.logIndex = utils.hexToNumber(log.logIndex);\n\n  if (log.address) {\n    log.address = utils.toChecksumAddress(log.address);\n  }\n\n  return log;\n};\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n */\n\n\nvar inputPostFormatter = function (post) {\n  // post.payload = utils.toHex(post.payload);\n  if (post.ttl) post.ttl = utils.numberToHex(post.ttl);\n  if (post.workToProve) post.workToProve = utils.numberToHex(post.workToProve);\n  if (post.priority) post.priority = utils.numberToHex(post.priority); // fallback\n\n  if (!_.isArray(post.topics)) {\n    post.topics = post.topics ? [post.topics] : [];\n  } // format the following options\n\n\n  post.topics = post.topics.map(function (topic) {\n    // convert only if not hex\n    return topic.indexOf('0x') === 0 ? topic : utils.fromUtf8(topic);\n  });\n  return post;\n};\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\n\n\nvar outputPostFormatter = function (post) {\n  post.expiry = utils.hexToNumber(post.expiry);\n  post.sent = utils.hexToNumber(post.sent);\n  post.ttl = utils.hexToNumber(post.ttl);\n  post.workProved = utils.hexToNumber(post.workProved); // post.payloadRaw = post.payload;\n  // post.payload = utils.hexToAscii(post.payload);\n  // if (utils.isJson(post.payload)) {\n  //     post.payload = JSON.parse(post.payload);\n  // }\n  // format the following options\n\n  if (!post.topics) {\n    post.topics = [];\n  }\n\n  post.topics = post.topics.map(function (topic) {\n    return utils.toUtf8(topic);\n  });\n  return post;\n};\n\nvar inputAddressFormatter = function (address) {\n  var iban = new Iban(address);\n\n  if (iban.isValid() && iban.isDirect()) {\n    return iban.toAddress().toLowerCase();\n  } else if (utils.isAddress(address)) {\n    return '0x' + address.toLowerCase().replace('0x', '');\n  }\n\n  throw new Error(`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);\n};\n\nvar outputSyncingFormatter = function (result) {\n  result.startingBlock = utils.hexToNumber(result.startingBlock);\n  result.currentBlock = utils.hexToNumber(result.currentBlock);\n  result.highestBlock = utils.hexToNumber(result.highestBlock);\n\n  if (result.knownStates) {\n    result.knownStates = utils.hexToNumber(result.knownStates);\n    result.pulledStates = utils.hexToNumber(result.pulledStates);\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n  inputBlockNumberFormatter: inputBlockNumberFormatter,\n  inputCallFormatter: inputCallFormatter,\n  inputTransactionFormatter: inputTransactionFormatter,\n  inputAddressFormatter: inputAddressFormatter,\n  inputPostFormatter: inputPostFormatter,\n  inputLogFormatter: inputLogFormatter,\n  inputSignFormatter: inputSignFormatter,\n  inputStorageKeysFormatter: inputStorageKeysFormatter,\n  outputProofFormatter: outputProofFormatter,\n  outputBigNumberFormatter: outputBigNumberFormatter,\n  outputTransactionFormatter: outputTransactionFormatter,\n  outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n  outputBlockFormatter: outputBlockFormatter,\n  outputLogFormatter: outputLogFormatter,\n  outputPostFormatter: outputPostFormatter,\n  outputSyncingFormatter: outputSyncingFormatter\n};","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/web3-core-helpers/lib/formatters.js"],"names":["_","require","utils","Iban","inputStorageKeysFormatter","keys","map","numberToHex","outputProofFormatter","proof","address","toChecksumAddress","nonce","hexToNumberString","balance","outputBigNumberFormatter","number","toBN","toString","isPredefinedBlockNumber","blockNumber","inputDefaultBlockNumberFormatter","undefined","inputBlockNumberFormatter","defaultBlock","isHexStrict","isString","toLowerCase","_txInputFormatter","options","to","inputAddressFormatter","data","input","Error","startsWith","isHex","gas","gasLimit","filter","key","forEach","inputCallFormatter","from","defaultAccount","inputTransactionFormatter","isNumber","isObject","inputSignFormatter","utf8ToHex","outputTransactionFormatter","tx","hexToNumber","transactionIndex","gasPrice","value","isAddress","outputTransactionReceiptFormatter","receipt","cumulativeGasUsed","gasUsed","isArray","logs","outputLogFormatter","contractAddress","status","Boolean","parseInt","outputBlockFormatter","block","size","timestamp","difficulty","totalDifficulty","transactions","item","miner","inputLogFormatter","toTopic","String","indexOf","fromUtf8","fromBlock","toBlock","topics","topic","addr","log","blockHash","transactionHash","logIndex","shaId","sha3","replace","id","substr","inputPostFormatter","post","ttl","workToProve","priority","outputPostFormatter","expiry","sent","workProved","toUtf8","iban","isValid","isDirect","toAddress","outputSyncingFormatter","result","startingBlock","currentBlock","highestBlock","knownStates","pulledStates","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\"use strict\";\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n/**\n * Will format the given storage key array values to hex strings.\n *\n * @method inputStorageKeysFormatter\n *\n * @param {Array<Number|String|BN|BigNumber>} keys\n *\n * @returns {Array<String>}\n */\nvar inputStorageKeysFormatter = function (keys) {\n    return keys.map(utils.numberToHex);\n};\n/**\n * Will format the given proof response from the node.\n *\n * @method outputProofFormatter\n *\n * @param {object} proof\n *\n * @returns {object}\n */\nvar outputProofFormatter = function (proof) {\n    proof.address = utils.toChecksumAddress(proof.address);\n    proof.nonce = utils.hexToNumberString(proof.nonce);\n    proof.balance = utils.hexToNumberString(proof.balance);\n    return proof;\n};\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n *\n * @param {String|Number|BigNumber|BN} number\n *\n * @returns {BN} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n/**\n * Returns true if the given blockNumber is 'latest', 'pending', or 'earliest.\n *\n * @method isPredefinedBlockNumber\n *\n * @param {String} blockNumber\n *\n * @returns {Boolean}\n */\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n/**\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n *\n * @method inputDefaultBlockNumberFormatter\n *\n * @param {String|Number|BN|BigNumber} blockNumber\n *\n * @returns {String}\n */\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return inputBlockNumberFormatter(this.defaultBlock);\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n/**\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n *\n * @param {String|Number|BN|BigNumber} blockNumber\n *\n * @returns {String}\n */\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    }\n    if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    if (blockNumber === 'genesis') {\n        return '0x0';\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options) {\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n    if (options.data && !options.data.startsWith('0x')) {\n        options.data = '0x' + options.data;\n    }\n    if (options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function (key) {\n        options[key] = utils.numberToHex(options[key]);\n    });\n    return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar inputCallFormatter = function (options) {\n    options = _txInputFormatter(options);\n    var from = options.from || (this ? this.defaultAccount : null);\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n    return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n */\nvar inputTransactionFormatter = function (options) {\n    options = _txInputFormatter(options);\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n        options.from = inputAddressFormatter(options.from);\n    }\n    return options;\n};\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n */\nvar outputTransactionFormatter = function (tx) {\n    if (tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if (tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n    if (tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    }\n    else {\n        tx.to = null; // set to `null` if invalid address\n    }\n    if (tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n    return tx;\n};\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n */\nvar outputTransactionReceiptFormatter = function (receipt) {\n    if (typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: ' + receipt);\n    }\n    if (receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if (receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n    if (_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n    if (receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n    if (typeof receipt.status !== 'undefined' && receipt.status !== null) {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n    return receipt;\n};\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n */\nvar outputBlockFormatter = function (block) {\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n    if (block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if (block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function (item) {\n            if (!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n    return block;\n};\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\nvar inputLogFormatter = function (options) {\n    var toTopic = function (value) {\n        if (value === null || typeof value === 'undefined')\n            return null;\n        value = String(value);\n        if (value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n    if (options === undefined)\n        options = {};\n    // If options !== undefined, don't blow out existing data\n    if (options.fromBlock === undefined)\n        options = { ...options, fromBlock: 'latest' };\n    if (options.fromBlock || options.fromBlock === 0)\n        options.fromBlock = inputBlockNumberFormatter(options.fromBlock);\n    if (options.toBlock || options.toBlock === 0)\n        options.toBlock = inputBlockNumberFormatter(options.toBlock);\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function (topic) {\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n    toTopic = null;\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n    return options;\n};\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\nvar outputLogFormatter = function (log) {\n    // generate a custom log id\n    if (typeof log.blockHash === 'string' &&\n        typeof log.transactionHash === 'string' &&\n        typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x', '') + log.transactionHash.replace('0x', '') + log.logIndex.replace('0x', ''));\n        log.id = 'log_' + shaId.replace('0x', '').substr(0, 8);\n    }\n    else if (!log.id) {\n        log.id = null;\n    }\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n    return log;\n};\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n */\nvar inputPostFormatter = function (post) {\n    // post.payload = utils.toHex(post.payload);\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n    // format the following options\n    post.topics = post.topics.map(function (topic) {\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n    return post;\n};\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function (post) {\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function (topic) {\n        return utils.toUtf8(topic);\n    });\n    return post;\n};\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    }\n    else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x', '');\n    }\n    throw new Error(`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);\n};\nvar outputSyncingFormatter = function (result) {\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n    return result;\n};\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    inputStorageKeysFormatter: inputStorageKeysFormatter,\n    outputProofFormatter: outputProofFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n"]},"metadata":{},"sourceType":"script"}