{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar ethereumjs_common_1 = require(\"ethereumjs-common\");\n\nvar buffer_1 = require(\"buffer\"); // secp256k1n/2\n\n\nvar N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\n * An Ethereum transaction.\n */\n\nvar Transaction =\n/** @class */\nfunction () {\n  /**\n   * Creates a new transaction from an object with its fields' values.\n   *\n   * @param data - A transaction can be initialized with its rlp representation, an array containing\n   * the value of its fields in order, or an object containing them by name.\n   *\n   * @param opts - The transaction's options, used to indicate the chain and hardfork the\n   * transactions belongs to.\n   *\n   * @note Transaction objects implement EIP155 by default. To disable it, use the constructor's\n   * second parameter to set a chain and hardfork before EIP155 activation (i.e. before Spurious\n   * Dragon.)\n   *\n   * @example\n   * ```js\n   * const txData = {\n   *   nonce: '0x00',\n   *   gasPrice: '0x09184e72a000',\n   *   gasLimit: '0x2710',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: '0x00',\n   *   data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',\n   *   v: '0x1c',\n   *   r: '0x5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n   *   s: '0x5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n   * };\n   * const tx = new Transaction(txData);\n   * ```\n   */\n  function Transaction(data, opts) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    if (opts === void 0) {\n      opts = {};\n    } // instantiate Common class instance based on passed options\n\n\n    if (opts.common) {\n      if (opts.chain || opts.hardfork) {\n        throw new Error('Instantiation with both opts.common, and opts.chain and opts.hardfork parameter not allowed!');\n      }\n\n      this._common = opts.common;\n    } else {\n      var chain = opts.chain ? opts.chain : 'mainnet';\n      var hardfork = opts.hardfork ? opts.hardfork : 'petersburg';\n      this._common = new ethereumjs_common_1.default(chain, hardfork);\n    } // Define Properties\n\n\n    var fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }]; // attached serialize\n\n    ethereumjs_util_1.defineProperties(this, fields, data);\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    });\n\n    this._validateV(this.v);\n\n    this._overrideVSetterWithValidation();\n  }\n  /**\n   * If the tx's `to` is to the creation address\n   */\n\n\n  Transaction.prototype.toCreationAddress = function () {\n    return this.to.toString('hex') === '';\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param includeSignature - Whether or not to include the signature\n   */\n\n\n  Transaction.prototype.hash = function (includeSignature) {\n    if (includeSignature === void 0) {\n      includeSignature = true;\n    }\n\n    var items;\n\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      if (this._implementsEIP155()) {\n        items = this.raw.slice(0, 6).concat([ethereumjs_util_1.toBuffer(this.getChainId()), // TODO: stripping zeros should probably be a responsibility of the rlp module\n        ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)), ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0))]);\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    } // create hash\n\n\n    return ethereumjs_util_1.rlphash(items);\n  };\n  /**\n   * returns chain ID\n   */\n\n\n  Transaction.prototype.getChainId = function () {\n    return this._common.chainId();\n  };\n  /**\n   * returns the sender's address\n   */\n\n\n  Transaction.prototype.getSenderAddress = function () {\n    if (this._from) {\n      return this._from;\n    }\n\n    var pubkey = this.getSenderPublicKey();\n    this._from = ethereumjs_util_1.publicToAddress(pubkey);\n    return this._from;\n  };\n  /**\n   * returns the public key of the sender\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function () {\n    if (!this.verifySignature()) {\n      throw new Error('Invalid Signature');\n    } // If the signature was verified successfully the _senderPubKey field is defined\n\n\n    return this._senderPubKey;\n  };\n  /**\n   * Determines if the signature is valid\n   */\n\n\n  Transaction.prototype.verifySignature = function () {\n    var msgHash = this.hash(false); // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n\n    if (this._common.gteHardfork('homestead') && new ethereumjs_util_1.BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n\n    try {\n      var v = ethereumjs_util_1.bufferToInt(this.v);\n\n      var useChainIdWhileRecoveringPubKey = v >= this.getChainId() * 2 + 35 && this._common.gteHardfork('spuriousDragon');\n\n      this._senderPubKey = ethereumjs_util_1.ecrecover(msgHash, v, this.r, this.s, useChainIdWhileRecoveringPubKey ? this.getChainId() : undefined);\n    } catch (e) {\n      return false;\n    }\n\n    return !!this._senderPubKey;\n  };\n  /**\n   * sign a transaction with a given private key\n   * @param privateKey - Must be 32 bytes in length\n   */\n\n\n  Transaction.prototype.sign = function (privateKey) {\n    // We clear any previous signature before signing it. Otherwise, _implementsEIP155's can give\n    // different results if this tx was already signed.\n    this.v = new buffer_1.Buffer([]);\n    this.s = new buffer_1.Buffer([]);\n    this.r = new buffer_1.Buffer([]);\n    var msgHash = this.hash(false);\n    var sig = ethereumjs_util_1.ecsign(msgHash, privateKey);\n\n    if (this._implementsEIP155()) {\n      sig.v += this.getChainId() * 2 + 8;\n    }\n\n    Object.assign(this, sig);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  Transaction.prototype.getDataFee = function () {\n    var data = this.raw[5];\n    var cost = new ethereumjs_util_1.BN(0);\n\n    for (var i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(this._common.param('gasPrices', 'txDataZero')) : cost.iaddn(this._common.param('gasPrices', 'txDataNonZero'));\n    }\n\n    return cost;\n  };\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n\n\n  Transaction.prototype.getBaseFee = function () {\n    var fee = this.getDataFee().iaddn(this._common.param('gasPrices', 'tx'));\n\n    if (this._common.gteHardfork('homestead') && this.toCreationAddress()) {\n      fee.iaddn(this._common.param('gasPrices', 'txCreation'));\n    }\n\n    return fee;\n  };\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function () {\n    return new ethereumjs_util_1.BN(this.gasLimit).imul(new ethereumjs_util_1.BN(this.gasPrice)).iadd(new ethereumjs_util_1.BN(this.value));\n  };\n\n  Transaction.prototype.validate = function (stringError) {\n    if (stringError === void 0) {\n      stringError = false;\n    }\n\n    var errors = [];\n\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().cmp(new ethereumjs_util_1.BN(this.gasLimit)) > 0) {\n      errors.push([\"gas limit is too low. Need at least \" + this.getBaseFee()]);\n    }\n\n    if (stringError === false) {\n      return errors.length === 0;\n    } else {\n      return errors.join(' ');\n    }\n  };\n  /**\n   * Returns the rlp encoding of the transaction\n   */\n\n\n  Transaction.prototype.serialize = function () {\n    // Note: This never gets executed, defineProperties overwrites it.\n    return ethereumjs_util_1.rlp.encode(this.raw);\n  };\n  /**\n   * Returns the transaction in JSON format\n   * @see {@link https://github.com/ethereumjs/ethereumjs-util/blob/master/docs/index.md#defineproperties|ethereumjs-util}\n   */\n\n\n  Transaction.prototype.toJSON = function (labels) {\n    if (labels === void 0) {\n      labels = false;\n    } // Note: This never gets executed, defineProperties overwrites it.\n\n\n    return {};\n  };\n\n  Transaction.prototype._validateV = function (v) {\n    if (v === undefined || v.length === 0) {\n      return;\n    }\n\n    if (!this._common.gteHardfork('spuriousDragon')) {\n      return;\n    }\n\n    var vInt = ethereumjs_util_1.bufferToInt(v);\n\n    if (vInt === 27 || vInt === 28) {\n      return;\n    }\n\n    var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;\n\n    if (!isValidEIP155V) {\n      throw new Error(\"Incompatible EIP155-based V \" + vInt + \" and chain id \" + this.getChainId() + \". See the second parameter of the Transaction constructor to set the chain id.\");\n    }\n  };\n\n  Transaction.prototype._isSigned = function () {\n    return this.v.length > 0 && this.r.length > 0 && this.s.length > 0;\n  };\n\n  Transaction.prototype._overrideVSetterWithValidation = function () {\n    var _this = this;\n\n    var vDescriptor = Object.getOwnPropertyDescriptor(this, 'v');\n    Object.defineProperty(this, 'v', __assign({}, vDescriptor, {\n      set: function (v) {\n        if (v !== undefined) {\n          _this._validateV(ethereumjs_util_1.toBuffer(v));\n        }\n\n        vDescriptor.set(v);\n      }\n    }));\n  };\n\n  Transaction.prototype._implementsEIP155 = function () {\n    var onEIP155BlockOrLater = this._common.gteHardfork('spuriousDragon');\n\n    if (!this._isSigned()) {\n      // We sign with EIP155 all unsigned transactions after spuriousDragon\n      return onEIP155BlockOrLater;\n    } // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing\n    // the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six\n    // elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by\n    // CHAIN_ID, r = 0 and s = 0.\n\n\n    var v = ethereumjs_util_1.bufferToInt(this.v);\n    var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n\n  return Transaction;\n}();\n\nexports.default = Transaction;","map":{"version":3,"sources":["../src/transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar ethereumjs_common_1 = require(\"ethereumjs-common\");\nvar buffer_1 = require(\"buffer\");\n// secp256k1n/2\nvar N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\n * An Ethereum transaction.\n */\nvar Transaction = /** @class */ (function () {\n    /**\n     * Creates a new transaction from an object with its fields' values.\n     *\n     * @param data - A transaction can be initialized with its rlp representation, an array containing\n     * the value of its fields in order, or an object containing them by name.\n     *\n     * @param opts - The transaction's options, used to indicate the chain and hardfork the\n     * transactions belongs to.\n     *\n     * @note Transaction objects implement EIP155 by default. To disable it, use the constructor's\n     * second parameter to set a chain and hardfork before EIP155 activation (i.e. before Spurious\n     * Dragon.)\n     *\n     * @example\n     * ```js\n     * const txData = {\n     *   nonce: '0x00',\n     *   gasPrice: '0x09184e72a000',\n     *   gasLimit: '0x2710',\n     *   to: '0x0000000000000000000000000000000000000000',\n     *   value: '0x00',\n     *   data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',\n     *   v: '0x1c',\n     *   r: '0x5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n     *   s: '0x5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n     * };\n     * const tx = new Transaction(txData);\n     * ```\n     */\n    function Transaction(data, opts) {\n        if (data === void 0) { data = {}; }\n        if (opts === void 0) { opts = {}; }\n        // instantiate Common class instance based on passed options\n        if (opts.common) {\n            if (opts.chain || opts.hardfork) {\n                throw new Error('Instantiation with both opts.common, and opts.chain and opts.hardfork parameter not allowed!');\n            }\n            this._common = opts.common;\n        }\n        else {\n            var chain = opts.chain ? opts.chain : 'mainnet';\n            var hardfork = opts.hardfork ? opts.hardfork : 'petersburg';\n            this._common = new ethereumjs_common_1.default(chain, hardfork);\n        }\n        // Define Properties\n        var fields = [\n            {\n                name: 'nonce',\n                length: 32,\n                allowLess: true,\n                default: new buffer_1.Buffer([]),\n            },\n            {\n                name: 'gasPrice',\n                length: 32,\n                allowLess: true,\n                default: new buffer_1.Buffer([]),\n            },\n            {\n                name: 'gasLimit',\n                alias: 'gas',\n                length: 32,\n                allowLess: true,\n                default: new buffer_1.Buffer([]),\n            },\n            {\n                name: 'to',\n                allowZero: true,\n                length: 20,\n                default: new buffer_1.Buffer([]),\n            },\n            {\n                name: 'value',\n                length: 32,\n                allowLess: true,\n                default: new buffer_1.Buffer([]),\n            },\n            {\n                name: 'data',\n                alias: 'input',\n                allowZero: true,\n                default: new buffer_1.Buffer([]),\n            },\n            {\n                name: 'v',\n                allowZero: true,\n                default: new buffer_1.Buffer([]),\n            },\n            {\n                name: 'r',\n                length: 32,\n                allowZero: true,\n                allowLess: true,\n                default: new buffer_1.Buffer([]),\n            },\n            {\n                name: 's',\n                length: 32,\n                allowZero: true,\n                allowLess: true,\n                default: new buffer_1.Buffer([]),\n            },\n        ];\n        // attached serialize\n        ethereumjs_util_1.defineProperties(this, fields, data);\n        /**\n         * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n         * @name from\n         * @memberof Transaction\n         */\n        Object.defineProperty(this, 'from', {\n            enumerable: true,\n            configurable: true,\n            get: this.getSenderAddress.bind(this),\n        });\n        this._validateV(this.v);\n        this._overrideVSetterWithValidation();\n    }\n    /**\n     * If the tx's `to` is to the creation address\n     */\n    Transaction.prototype.toCreationAddress = function () {\n        return this.to.toString('hex') === '';\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx\n     * @param includeSignature - Whether or not to include the signature\n     */\n    Transaction.prototype.hash = function (includeSignature) {\n        if (includeSignature === void 0) { includeSignature = true; }\n        var items;\n        if (includeSignature) {\n            items = this.raw;\n        }\n        else {\n            if (this._implementsEIP155()) {\n                items = this.raw.slice(0, 6).concat([\n                    ethereumjs_util_1.toBuffer(this.getChainId()),\n                    // TODO: stripping zeros should probably be a responsibility of the rlp module\n                    ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)),\n                    ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)),\n                ]);\n            }\n            else {\n                items = this.raw.slice(0, 6);\n            }\n        }\n        // create hash\n        return ethereumjs_util_1.rlphash(items);\n    };\n    /**\n     * returns chain ID\n     */\n    Transaction.prototype.getChainId = function () {\n        return this._common.chainId();\n    };\n    /**\n     * returns the sender's address\n     */\n    Transaction.prototype.getSenderAddress = function () {\n        if (this._from) {\n            return this._from;\n        }\n        var pubkey = this.getSenderPublicKey();\n        this._from = ethereumjs_util_1.publicToAddress(pubkey);\n        return this._from;\n    };\n    /**\n     * returns the public key of the sender\n     */\n    Transaction.prototype.getSenderPublicKey = function () {\n        if (!this.verifySignature()) {\n            throw new Error('Invalid Signature');\n        }\n        // If the signature was verified successfully the _senderPubKey field is defined\n        return this._senderPubKey;\n    };\n    /**\n     * Determines if the signature is valid\n     */\n    Transaction.prototype.verifySignature = function () {\n        var msgHash = this.hash(false);\n        // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        if (this._common.gteHardfork('homestead') && new ethereumjs_util_1.BN(this.s).cmp(N_DIV_2) === 1) {\n            return false;\n        }\n        try {\n            var v = ethereumjs_util_1.bufferToInt(this.v);\n            var useChainIdWhileRecoveringPubKey = v >= this.getChainId() * 2 + 35 && this._common.gteHardfork('spuriousDragon');\n            this._senderPubKey = ethereumjs_util_1.ecrecover(msgHash, v, this.r, this.s, useChainIdWhileRecoveringPubKey ? this.getChainId() : undefined);\n        }\n        catch (e) {\n            return false;\n        }\n        return !!this._senderPubKey;\n    };\n    /**\n     * sign a transaction with a given private key\n     * @param privateKey - Must be 32 bytes in length\n     */\n    Transaction.prototype.sign = function (privateKey) {\n        // We clear any previous signature before signing it. Otherwise, _implementsEIP155's can give\n        // different results if this tx was already signed.\n        this.v = new buffer_1.Buffer([]);\n        this.s = new buffer_1.Buffer([]);\n        this.r = new buffer_1.Buffer([]);\n        var msgHash = this.hash(false);\n        var sig = ethereumjs_util_1.ecsign(msgHash, privateKey);\n        if (this._implementsEIP155()) {\n            sig.v += this.getChainId() * 2 + 8;\n        }\n        Object.assign(this, sig);\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    Transaction.prototype.getDataFee = function () {\n        var data = this.raw[5];\n        var cost = new ethereumjs_util_1.BN(0);\n        for (var i = 0; i < data.length; i++) {\n            data[i] === 0\n                ? cost.iaddn(this._common.param('gasPrices', 'txDataZero'))\n                : cost.iaddn(this._common.param('gasPrices', 'txDataNonZero'));\n        }\n        return cost;\n    };\n    /**\n     * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */\n    Transaction.prototype.getBaseFee = function () {\n        var fee = this.getDataFee().iaddn(this._common.param('gasPrices', 'tx'));\n        if (this._common.gteHardfork('homestead') && this.toCreationAddress()) {\n            fee.iaddn(this._common.param('gasPrices', 'txCreation'));\n        }\n        return fee;\n    };\n    /**\n     * the up front amount that an account must have for this transaction to be valid\n     */\n    Transaction.prototype.getUpfrontCost = function () {\n        return new ethereumjs_util_1.BN(this.gasLimit).imul(new ethereumjs_util_1.BN(this.gasPrice)).iadd(new ethereumjs_util_1.BN(this.value));\n    };\n    Transaction.prototype.validate = function (stringError) {\n        if (stringError === void 0) { stringError = false; }\n        var errors = [];\n        if (!this.verifySignature()) {\n            errors.push('Invalid Signature');\n        }\n        if (this.getBaseFee().cmp(new ethereumjs_util_1.BN(this.gasLimit)) > 0) {\n            errors.push([\"gas limit is too low. Need at least \" + this.getBaseFee()]);\n        }\n        if (stringError === false) {\n            return errors.length === 0;\n        }\n        else {\n            return errors.join(' ');\n        }\n    };\n    /**\n     * Returns the rlp encoding of the transaction\n     */\n    Transaction.prototype.serialize = function () {\n        // Note: This never gets executed, defineProperties overwrites it.\n        return ethereumjs_util_1.rlp.encode(this.raw);\n    };\n    /**\n     * Returns the transaction in JSON format\n     * @see {@link https://github.com/ethereumjs/ethereumjs-util/blob/master/docs/index.md#defineproperties|ethereumjs-util}\n     */\n    Transaction.prototype.toJSON = function (labels) {\n        if (labels === void 0) { labels = false; }\n        // Note: This never gets executed, defineProperties overwrites it.\n        return {};\n    };\n    Transaction.prototype._validateV = function (v) {\n        if (v === undefined || v.length === 0) {\n            return;\n        }\n        if (!this._common.gteHardfork('spuriousDragon')) {\n            return;\n        }\n        var vInt = ethereumjs_util_1.bufferToInt(v);\n        if (vInt === 27 || vInt === 28) {\n            return;\n        }\n        var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;\n        if (!isValidEIP155V) {\n            throw new Error(\"Incompatible EIP155-based V \" + vInt + \" and chain id \" + this.getChainId() + \". See the second parameter of the Transaction constructor to set the chain id.\");\n        }\n    };\n    Transaction.prototype._isSigned = function () {\n        return this.v.length > 0 && this.r.length > 0 && this.s.length > 0;\n    };\n    Transaction.prototype._overrideVSetterWithValidation = function () {\n        var _this = this;\n        var vDescriptor = Object.getOwnPropertyDescriptor(this, 'v');\n        Object.defineProperty(this, 'v', __assign({}, vDescriptor, { set: function (v) {\n                if (v !== undefined) {\n                    _this._validateV(ethereumjs_util_1.toBuffer(v));\n                }\n                vDescriptor.set(v);\n            } }));\n    };\n    Transaction.prototype._implementsEIP155 = function () {\n        var onEIP155BlockOrLater = this._common.gteHardfork('spuriousDragon');\n        if (!this._isSigned()) {\n            // We sign with EIP155 all unsigned transactions after spuriousDragon\n            return onEIP155BlockOrLater;\n        }\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing\n        // the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six\n        // elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by\n        // CHAIN_ID, r = 0 and s = 0.\n        var v = ethereumjs_util_1.bufferToInt(this.v);\n        var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;\n        return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n    };\n    return Transaction;\n}());\nexports.default = Transaction;\n//# sourceMappingURL=transaction.js.map"]},"metadata":{},"sourceType":"script"}