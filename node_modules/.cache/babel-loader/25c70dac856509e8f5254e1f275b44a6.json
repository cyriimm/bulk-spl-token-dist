{"ast":null,"code":"/*\r\n\tISC License\r\n\r\n\tCopyright (c) 2019, Pierre-Louis Despaigne\r\n\r\n\tPermission to use, copy, modify, and/or distribute this software for any\r\n\tpurpose with or without fee is hereby granted, provided that the above\r\n\tcopyright notice and this permission notice appear in all copies.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\r\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n*/\nconst CID = require('cids');\n\nconst multiH = require('multihashes');\n/**\r\n * Convert an hexadecimal string to a Buffer, the string can start with or without '0x'\r\n * @param {string} hex an hexadecimal value\r\n * @return {Buffer} the resulting Buffer\r\n */\n\n\nconst hexStringToBuffer = hex => {\n  let prefix = hex.slice(0, 2);\n  let value = hex.slice(2);\n  let res = '';\n  if (prefix === '0x') res = value;else res = hex;\n  return multiH.fromHexString(res);\n};\n/**\r\n* list of known encoding,\r\n* encoding should be a function that takes a `string` input,\r\n* and return a `Buffer` result\r\n*/\n\n\nconst encodes = {\n  /**\r\n  * @param {string} value\r\n  * @return {Buffer}\r\n  */\n  swarm: value => {\n    const multihash = multiH.encode(hexStringToBuffer(value), 'keccak-256');\n    return new CID(1, 'swarm-manifest', multihash).buffer;\n  },\n\n  /**\r\n  * @param {string} value\r\n  * @return {Buffer}\r\n  */\n  ipfs: value => {\n    const multihash = multiH.fromB58String(value);\n    return new CID(1, 'dag-pb', multihash).buffer;\n  },\n\n  /**\r\n  * @param {string} value\r\n  * @return {Buffer}\r\n  */\n  utf8: value => {\n    return Buffer.from(value, 'utf8');\n  }\n};\n/** \r\n* list of known decoding,\r\n* decoding should be a function that takes a `Buffer` input,\r\n* and return a `string` result\r\n*/\n\nconst decodes = {\n  /**\r\n  * @param {Buffer} value \r\n  */\n  hexMultiHash: value => {\n    const cid = new CID(value);\n    return multiH.decode(cid.multihash).digest.toString('hex');\n  },\n\n  /**\r\n  * @param {Buffer} value \r\n  */\n  b58MultiHash: value => {\n    const cid = new CID(value);\n    return multiH.toB58String(cid.multihash);\n  },\n\n  /**\r\n  * @param {Buffer} value \r\n  */\n  utf8: value => {\n    return value.toString('utf8');\n  }\n};\n/**\r\n* list of known encoding/decoding for a given codec,\r\n* `encode` should be chosen among the `encodes` functions\r\n* `decode` should be chosen among the `decodes` functions\r\n*/\n\nconst profiles = {\n  'swarm-ns': {\n    encode: encodes.swarm,\n    decode: decodes.hexMultiHash\n  },\n  'ipfs-ns': {\n    encode: encodes.ipfs,\n    decode: decodes.b58MultiHash\n  },\n  'ipns-ns': {\n    encode: encodes.ipfs,\n    decode: decodes.b58MultiHash\n  },\n  'default': {\n    encode: encodes.utf8,\n    decode: decodes.utf8\n  }\n};\nexports.hexStringToBuffer = hexStringToBuffer;\nexports.profiles = profiles;","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/content-hash/src/profiles.js"],"names":["CID","require","multiH","hexStringToBuffer","hex","prefix","slice","value","res","fromHexString","encodes","swarm","multihash","encode","buffer","ipfs","fromB58String","utf8","Buffer","from","decodes","hexMultiHash","cid","decode","digest","toString","b58MultiHash","toB58String","profiles","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAME,iBAAiB,GAAIC,GAAD,IAAS;AAClC,MAAIC,MAAM,GAAGD,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAb;AACA,MAAIC,KAAK,GAAGH,GAAG,CAACE,KAAJ,CAAU,CAAV,CAAZ;AACA,MAAIE,GAAG,GAAG,EAAV;AACA,MAAIH,MAAM,KAAK,IAAf,EAAqBG,GAAG,GAAGD,KAAN,CAArB,KACKC,GAAG,GAAGJ,GAAN;AACL,SAAOF,MAAM,CAACO,aAAP,CAAqBD,GAArB,CAAP;AACA,CAPD;AASA;AACA;AACA;AACA;AACA;;;AACA,MAAME,OAAO,GAAG;AACd;AACF;AACA;AACA;AACEC,EAAAA,KAAK,EAAGJ,KAAD,IAAW;AAChB,UAAMK,SAAS,GAAGV,MAAM,CAACW,MAAP,CAAcV,iBAAiB,CAACI,KAAD,CAA/B,EAAwC,YAAxC,CAAlB;AACF,WAAO,IAAIP,GAAJ,CAAQ,CAAR,EAAW,gBAAX,EAA6BY,SAA7B,EAAwCE,MAA/C;AACC,GARa;;AASd;AACF;AACA;AACA;AACEC,EAAAA,IAAI,EAAGR,KAAD,IAAW;AACf,UAAMK,SAAS,GAAGV,MAAM,CAACc,aAAP,CAAqBT,KAArB,CAAlB;AACA,WAAO,IAAIP,GAAJ,CAAQ,CAAR,EAAW,QAAX,EAAqBY,SAArB,EAAgCE,MAAvC;AACD,GAhBa;;AAiBd;AACF;AACA;AACA;AACEG,EAAAA,IAAI,EAAGV,KAAD,IAAW;AACf,WAAOW,MAAM,CAACC,IAAP,CAAYZ,KAAZ,EAAmB,MAAnB,CAAP;AACD;AAvBa,CAAhB;AA0BA;AACA;AACA;AACA;AACA;;AACA,MAAMa,OAAO,GAAG;AACd;AACF;AACA;AACEC,EAAAA,YAAY,EAAGd,KAAD,IAAW;AACvB,UAAMe,GAAG,GAAG,IAAItB,GAAJ,CAAQO,KAAR,CAAZ;AACA,WAAOL,MAAM,CAACqB,MAAP,CAAcD,GAAG,CAACV,SAAlB,EAA6BY,MAA7B,CAAoCC,QAApC,CAA6C,KAA7C,CAAP;AACD,GAPa;;AAQd;AACF;AACA;AACEC,EAAAA,YAAY,EAAGnB,KAAD,IAAW;AACvB,UAAMe,GAAG,GAAG,IAAItB,GAAJ,CAAQO,KAAR,CAAZ;AACA,WAAOL,MAAM,CAACyB,WAAP,CAAmBL,GAAG,CAACV,SAAvB,CAAP;AACD,GAda;;AAed;AACF;AACA;AACEK,EAAAA,IAAI,EAAGV,KAAD,IAAW;AACf,WAAOA,KAAK,CAACkB,QAAN,CAAe,MAAf,CAAP;AACD;AApBa,CAAhB;AAuBA;AACA;AACA;AACA;AACA;;AACA,MAAMG,QAAQ,GAAG;AACf,cAAY;AACVf,IAAAA,MAAM,EAAEH,OAAO,CAACC,KADN;AAEVY,IAAAA,MAAM,EAAEH,OAAO,CAACC;AAFN,GADG;AAKf,aAAW;AACTR,IAAAA,MAAM,EAAEH,OAAO,CAACK,IADP;AAETQ,IAAAA,MAAM,EAAEH,OAAO,CAACM;AAFP,GALI;AASf,aAAW;AACTb,IAAAA,MAAM,EAAEH,OAAO,CAACK,IADP;AAETQ,IAAAA,MAAM,EAAEH,OAAO,CAACM;AAFP,GATI;AAaf,aAAW;AACTb,IAAAA,MAAM,EAAEH,OAAO,CAACO,IADP;AAETM,IAAAA,MAAM,EAAEH,OAAO,CAACH;AAFP;AAbI,CAAjB;AAmBAY,OAAO,CAAC1B,iBAAR,GAA4BA,iBAA5B;AACA0B,OAAO,CAACD,QAAR,GAAmBA,QAAnB","sourcesContent":["/*\r\n\tISC License\r\n\r\n\tCopyright (c) 2019, Pierre-Louis Despaigne\r\n\r\n\tPermission to use, copy, modify, and/or distribute this software for any\r\n\tpurpose with or without fee is hereby granted, provided that the above\r\n\tcopyright notice and this permission notice appear in all copies.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\r\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n*/\r\n\r\nconst CID = require('cids');\r\nconst multiH = require('multihashes');\r\n\r\n/**\r\n * Convert an hexadecimal string to a Buffer, the string can start with or without '0x'\r\n * @param {string} hex an hexadecimal value\r\n * @return {Buffer} the resulting Buffer\r\n */\r\nconst hexStringToBuffer = (hex) => {\r\n\tlet prefix = hex.slice(0, 2);\r\n\tlet value = hex.slice(2);\r\n\tlet res = '';\r\n\tif (prefix === '0x') res = value;\r\n\telse res = hex;\r\n\treturn multiH.fromHexString(res);\r\n}\r\n\r\n/**\r\n* list of known encoding,\r\n* encoding should be a function that takes a `string` input,\r\n* and return a `Buffer` result\r\n*/\r\nconst encodes = {\r\n  /**\r\n  * @param {string} value\r\n  * @return {Buffer}\r\n  */\r\n  swarm: (value) => {\r\n    const multihash = multiH.encode(hexStringToBuffer(value), 'keccak-256');\r\n\t\treturn new CID(1, 'swarm-manifest', multihash).buffer;\r\n  },\r\n  /**\r\n  * @param {string} value\r\n  * @return {Buffer}\r\n  */\r\n  ipfs: (value) => {\r\n    const multihash = multiH.fromB58String(value);\r\n    return new CID(1, 'dag-pb', multihash).buffer;\r\n  },\r\n  /**\r\n  * @param {string} value\r\n  * @return {Buffer}\r\n  */\r\n  utf8: (value) => {\r\n    return Buffer.from(value, 'utf8');\r\n  },\r\n};\r\n\r\n/** \r\n* list of known decoding,\r\n* decoding should be a function that takes a `Buffer` input,\r\n* and return a `string` result\r\n*/\r\nconst decodes = {\r\n  /**\r\n  * @param {Buffer} value \r\n  */\r\n  hexMultiHash: (value) => {\r\n    const cid = new CID(value);\r\n    return multiH.decode(cid.multihash).digest.toString('hex');\r\n  },\r\n  /**\r\n  * @param {Buffer} value \r\n  */\r\n  b58MultiHash: (value) => {\r\n    const cid = new CID(value);\r\n    return multiH.toB58String(cid.multihash);\r\n  },\r\n  /**\r\n  * @param {Buffer} value \r\n  */\r\n  utf8: (value) => {\r\n    return value.toString('utf8');\r\n  },\r\n};\r\n\r\n/**\r\n* list of known encoding/decoding for a given codec,\r\n* `encode` should be chosen among the `encodes` functions\r\n* `decode` should be chosen among the `decodes` functions\r\n*/\r\nconst profiles = {\r\n  'swarm-ns': {\r\n    encode: encodes.swarm,\r\n    decode: decodes.hexMultiHash,\r\n  },\r\n  'ipfs-ns': {\r\n    encode: encodes.ipfs,\r\n    decode: decodes.b58MultiHash,\r\n  },\r\n  'ipns-ns': {\r\n    encode: encodes.ipfs,\r\n    decode: decodes.b58MultiHash,\r\n  },\r\n  'default': {\r\n    encode: encodes.utf8,\r\n    decode: decodes.utf8,\r\n  },\r\n};\r\n\r\nexports.hexStringToBuffer = hexStringToBuffer;\r\nexports.profiles = profiles;"]},"metadata":{},"sourceType":"script"}