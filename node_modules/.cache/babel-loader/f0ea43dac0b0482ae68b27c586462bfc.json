{"ast":null,"code":"/**\n * A Log object\n */\nlet id = 0;\nconst subscribers = [];\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\n\nexport const log = (type, message, data) => {\n  const obj = {\n    type,\n    id: String(++id),\n    date: new Date()\n  };\n  if (message) obj.message = message;\n  if (data) obj.data = data;\n  dispatch(obj);\n};\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\n\nexport const listen = cb => {\n  subscribers.push(cb);\n  return () => {\n    const i = subscribers.indexOf(cb);\n\n    if (i !== -1) {\n      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n      subscribers[i] = subscribers[subscribers.length - 1];\n      subscribers.pop();\n    }\n  };\n};\n\nfunction dispatch(log) {\n  for (let i = 0; i < subscribers.length; i++) {\n    try {\n      subscribers[i](log);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n} // for debug purpose\n\n\nif (typeof window !== \"undefined\") {\n  window.__ledgerLogsListen = listen;\n}","map":{"version":3,"sources":["../src/index.js"],"names":["id","subscribers","log","obj","String","date","dispatch","listen","cb","i","console","window"],"mappings":"AAEA;AACA;AACA;AAWA,IAAIA,EAAE,GAAN,CAAA;AACA,MAAMC,WAAW,GAAjB,EAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,GAAG,GAAG,CAAA,IAAA,EAAA,OAAA,EAAA,IAAA,KAAgD;AACjE,QAAMC,GAAQ,GAAG;AAAA,IAAA,IAAA;AAAQH,IAAAA,EAAE,EAAEI,MAAM,CAAC,EAAnB,EAAkB,CAAlB;AAA0BC,IAAAA,IAAI,EAAE,IAAA,IAAA;AAAhC,GAAjB;AACA,MAAA,OAAA,EAAaF,GAAG,CAAHA,OAAAA,GAAAA,OAAAA;AACb,MAAA,IAAA,EAAUA,GAAG,CAAHA,IAAAA,GAAAA,IAAAA;AACVG,EAAAA,QAAQ,CAARA,GAAQ,CAARA;AAJK,CAAA;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAIC,EAAD,IAAoC;AACxDP,EAAAA,WAAW,CAAXA,IAAAA,CAAAA,EAAAA;AACA,SAAO,MAAM;AACX,UAAMQ,CAAC,GAAGR,WAAW,CAAXA,OAAAA,CAAV,EAAUA,CAAV;;AACA,QAAIQ,CAAC,KAAK,CAAV,CAAA,EAAc;AACZ;AACAR,MAAAA,WAAW,CAAXA,CAAW,CAAXA,GAAiBA,WAAW,CAACA,WAAW,CAAXA,MAAAA,GAA7BA,CAA4B,CAA5BA;AACAA,MAAAA,WAAW,CAAXA,GAAAA;AACD;AANH,GAAA;AAFK,CAAA;;AAYP,SAAA,QAAA,CAAA,GAAA,EAA4B;AAC1B,OAAK,IAAIQ,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGR,WAAW,CAA/B,MAAA,EAAwCQ,CAAxC,EAAA,EAA6C;AAC3C,QAAI;AACFR,MAAAA,WAAW,CAAXA,CAAW,CAAXA,CAAAA,GAAAA;AADF,KAAA,CAEE,OAAA,CAAA,EAAU;AACVS,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,CAAAA;AACD;AACF;EAGH;;;AACA,IAAI,OAAA,MAAA,KAAJ,WAAA,EAAmC;AACjCC,EAAAA,MAAM,CAANA,kBAAAA,GAAAA,MAAAA;AACD","sourcesContent":["// @flow\n\n/**\n * A Log object\n */\nexport type Log = {\n  type: string,\n  message?: string,\n  data?: any,\n  id: string, // unique amount all logs\n  date: Date, // date of the log\n};\n\nexport type Unsubscribe = () => void;\n\nlet id = 0;\nconst subscribers = [];\n\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport const log = (type: string, message?: string, data?: any) => {\n  const obj: Log = { type, id: String(++id), date: new Date() };\n  if (message) obj.message = message;\n  if (data) obj.data = data;\n  dispatch(obj);\n};\n\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport const listen = (cb: (Log) => void): Unsubscribe => {\n  subscribers.push(cb);\n  return () => {\n    const i = subscribers.indexOf(cb);\n    if (i !== -1) {\n      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n      subscribers[i] = subscribers[subscribers.length - 1];\n      subscribers.pop();\n    }\n  };\n};\n\nfunction dispatch(log: Log) {\n  for (let i = 0; i < subscribers.length; i++) {\n    try {\n      subscribers[i](log);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\n// for debug purpose\nif (typeof window !== \"undefined\") {\n  window.__ledgerLogsListen = listen;\n}\n"]},"metadata":{},"sourceType":"module"}