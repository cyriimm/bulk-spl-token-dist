{"ast":null,"code":"\"use strict\";\n\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n  constructor(coders, localName) {\n    let dynamic = false;\n    const types = [];\n    coders.forEach(coder => {\n      if (coder.dynamic) {\n        dynamic = true;\n      }\n\n      types.push(coder.type);\n    });\n    const type = \"tuple(\" + types.join(\",\") + \")\";\n    super(\"tuple\", type, localName, dynamic);\n    this.coders = coders;\n  }\n\n  encode(writer, value) {\n    return pack(writer, this.coders, value);\n  }\n\n  decode(reader) {\n    return reader.coerce(this.name, unpack(reader, this.coders));\n  }\n\n}","map":{"version":3,"sources":["../../src.ts/coders/tuple.ts"],"names":[],"mappings":"AAAA;;AAEA,SAAS,KAAT,QAAsC,kBAAtC;AACA,SAAS,IAAT,EAAe,MAAf,QAA6B,SAA7B;AAEA,OAAM,MAAO,UAAP,SAA0B,KAA1B,CAA+B;AAGjC,EAAA,WAAA,CAAY,MAAZ,EAAkC,SAAlC,EAAmD;AAC/C,QAAI,OAAO,GAAG,KAAd;AACA,UAAM,KAAK,GAAkB,EAA7B;AACA,IAAA,MAAM,CAAC,OAAP,CAAgB,KAAD,IAAU;AACrB,UAAI,KAAK,CAAC,OAAV,EAAmB;AAAE,QAAA,OAAO,GAAG,IAAV;AAAiB;;AACtC,MAAA,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,IAAjB;AACH,KAHD;AAIA,UAAM,IAAI,GAAI,WAAW,KAAK,CAAC,IAAN,CAAW,GAAX,CAAX,GAA6B,GAA3C;AAEA,UAAM,OAAN,EAAe,IAAf,EAAqB,SAArB,EAAgC,OAAhC;AACA,SAAK,MAAL,GAAc,MAAd;AACH;;AAED,EAAA,MAAM,CAAC,MAAD,EAAiB,KAAjB,EAA8D;AAChE,WAAO,IAAI,CAAC,MAAD,EAAS,KAAK,MAAd,EAAsB,KAAtB,CAAX;AACH;;AAED,EAAA,MAAM,CAAC,MAAD,EAAe;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,MAAM,CAAC,MAAD,EAAS,KAAK,MAAd,CAA/B,CAAP;AACH;;AAtBgC","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n    encode(writer, value) {\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n//# sourceMappingURL=tuple.js.map"]},"metadata":{},"sourceType":"module"}