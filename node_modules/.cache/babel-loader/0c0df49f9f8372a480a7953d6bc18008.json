{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SendDialog.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport DialogForm from './DialogForm';\nimport { useWallet, useWalletAddressForMint } from '../utils/wallet';\nimport { PublicKey } from '@solana/web3.js';\nimport { abbreviateAddress } from '../utils/utils';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { ConnectToMetamaskButton, getErc20Balance, useEthAccount, withdrawEth } from '../utils/swap/eth';\nimport { useConnection, useIsProdNetwork } from '../utils/connection';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { TOKEN_PROGRAM_ID, WRAPPED_SOL_MINT } from '../utils/tokens/instructions';\nimport { parseTokenAccountData } from '../utils/tokens/data';\nimport { Switch, Tooltip } from '@material-ui/core';\nimport { EthFeeEstimate } from './EthFeeEstimate';\nimport CSVReader from 'react-csv-reader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst timeout = ms => new Promise(res => setTimeout(res, ms));\n\nconst WUSDC_MINT = new PublicKey('BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW');\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\nconst WUSDT_MINT = new PublicKey('BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4');\nconst USDT_MINT = new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB');\nexport default function SendDialog({\n  open,\n  onClose,\n  publicKey,\n  balanceInfo\n}) {\n  _s();\n\n  const isProdNetwork = useIsProdNetwork();\n  const [tab, setTab] = useState('spl');\n  const onSubmitRef = useRef();\n  const [swapCoinInfo] = useSwapApiGet(showSwapAddress && balanceInfo.mint && isProdNetwork ? `coins/sol/${balanceInfo.mint.toBase58()}` : null);\n  const ethAccount = useEthAccount();\n  const {\n    mint,\n    tokenName,\n    tokenSymbol\n  } = balanceInfo;\n\n  const getTabs = mint => {\n    if (mint === null || mint === void 0 ? void 0 : mint.equals(WUSDC_MINT)) {\n      return [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"SPL WUSDC\",\n        value: \"spl\"\n      }, \"spl\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"SPL USDC\",\n        value: \"wusdcToSplUsdc\"\n      }, \"wusdcToSplUsdc\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"ERC20 USDC\",\n        value: \"swap\"\n      }, \"swap\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)];\n    } else if (mint === null || mint === void 0 ? void 0 : mint.equals(WUSDT_MINT)) {\n      return [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"SPL WUSDT\",\n        value: \"spl\"\n      }, \"spl\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"SPL USDT\",\n        value: \"wusdtToSplUsdt\"\n      }, \"wusdtToSplUsdt\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"ERC20 USDT\",\n        value: \"swap\"\n      }, \"swap\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)];\n    } else if (localStorage.getItem('sollet-private') && (mint === null || mint === void 0 ? void 0 : mint.equals(USDC_MINT))) {\n      return [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"SPL USDC\",\n        value: \"spl\"\n      }, \"spl\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"SPL WUSDC\",\n        value: \"usdcToSplWUsdc\"\n      }, \"usdcToSplWUsdc\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"ERC20 USDC\",\n        value: \"swap\"\n      }, \"swap\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)];\n    } else {\n      return [/*#__PURE__*/_jsxDEV(Tab, {\n        label: `SPL ${swapCoinInfo.ticker}`,\n        value: \"spl\"\n      }, \"spl\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: `${swapCoinInfo.erc20Contract ? 'ERC20' : 'Native'} ${swapCoinInfo.ticker}`,\n        value: \"swap\"\n      }, \"swap\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)];\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DialogForm, {\n      open: open,\n      onClose: onClose,\n      onSubmit: () => onSubmitRef.current(),\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [\"Send \", tokenName, tokenSymbol, ethAccount && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"textSecondary\",\n            style: {\n              fontSize: '14px'\n            },\n            children: [\"Metamask connected: \", ethAccount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), swapCoinInfo ? /*#__PURE__*/_jsxDEV(Tabs, {\n        value: tab,\n        variant: \"fullWidth\",\n        onChange: (e, value) => setTab(value),\n        textColor: \"primary\",\n        indicatorColor: \"primary\",\n        children: getTabs(mint)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this) : null, tab === 'spl' ? /*#__PURE__*/_jsxDEV(SendSplDialog, {\n        onClose: onClose,\n        publicKey: publicKey,\n        balanceInfo: balanceInfo,\n        onSubmitRef: onSubmitRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this) : tab === 'wusdcToSplUsdc' ? /*#__PURE__*/_jsxDEV(SendSwapDialog, {\n        onClose: onClose,\n        publicKey: publicKey,\n        balanceInfo: balanceInfo,\n        swapCoinInfo: swapCoinInfo,\n        onSubmitRef: onSubmitRef,\n        wusdcToSplUsdc: true\n      }, tab, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this) : tab === 'wusdtToSplUsdt' ? /*#__PURE__*/_jsxDEV(SendSwapDialog, {\n        onClose: onClose,\n        publicKey: publicKey,\n        balanceInfo: balanceInfo,\n        swapCoinInfo: swapCoinInfo,\n        onSubmitRef: onSubmitRef,\n        wusdtToSplUsdt: true\n      }, tab, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this) : tab === 'usdcToSplWUsdc' ? /*#__PURE__*/_jsxDEV(SendSwapDialog, {\n        onClose: onClose,\n        publicKey: publicKey,\n        balanceInfo: balanceInfo,\n        swapCoinInfo: swapCoinInfo,\n        onSubmitRef: onSubmitRef,\n        usdcToSplWUsdc: true\n      }, tab, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(SendSwapDialog, {\n        onClose: onClose,\n        publicKey: publicKey,\n        balanceInfo: balanceInfo,\n        swapCoinInfo: swapCoinInfo,\n        ethAccount: ethAccount,\n        onSubmitRef: onSubmitRef\n      }, tab, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(SendDialog, \"YEfY5C/aMclaJlAeHReIHo5vxPo=\", false, function () {\n  return [useIsProdNetwork, useSwapApiGet, useEthAccount];\n});\n\n_c = SendDialog;\n\nfunction SendSplDialog({\n  onClose,\n  publicKey,\n  balanceInfo,\n  onSubmitRef\n}) {\n  _s2();\n\n  const defaultAddressHelperText = !balanceInfo.mint || balanceInfo.mint.equals(WRAPPED_SOL_MINT) ? 'Enter Solana Address' : 'Enter SPL token or Solana address';\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [csv, setCsv] = useState([]);\n  const [splitCsv, setSplitCsv] = useState([]);\n  const [csvIndex, setCsvIndex] = useState(0);\n  const [addressHelperText, setAddressHelperText] = useState(defaultAddressHelperText);\n  const [passValidation, setPassValidation] = useState();\n  const [overrideDestinationCheck, setOverrideDestinationCheck] = useState(false);\n  const [shouldShowOverride, setShouldShowOverride] = useState();\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    validAmount\n  } = useForm(balanceInfo, addressHelperText, passValidation);\n  const {\n    decimals,\n    mint\n  } = balanceInfo;\n  const mintString = mint && mint.toBase58();\n  useEffect(() => {\n    (async () => {\n      if (!destinationAddress) {\n        setAddressHelperText(defaultAddressHelperText);\n        setPassValidation(undefined);\n        setShouldShowOverride(undefined);\n        return;\n      }\n\n      try {\n        const destinationAccountInfo = await wallet.connection.getAccountInfo(new PublicKey(destinationAddress));\n        setShouldShowOverride(false);\n\n        if (destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID)) {\n          const accountInfo = parseTokenAccountData(destinationAccountInfo.data);\n\n          if (accountInfo.mint.toBase58() === mintString) {\n            setPassValidation(true);\n            setAddressHelperText('Address is a valid SPL token address');\n          } else {\n            setPassValidation(false);\n            setAddressHelperText('Destination address mint does not match');\n          }\n        } else {\n          setPassValidation(true);\n          setAddressHelperText('Destination is a Solana address');\n        }\n      } catch (e) {\n        console.log(`Received error validating address ${e}`);\n        setAddressHelperText(defaultAddressHelperText);\n        setShouldShowOverride(true);\n        setPassValidation(undefined);\n      }\n    })(); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [destinationAddress, wallet, mintString]);\n  useEffect(() => {\n    return () => {\n      setOverrideDestinationCheck(false);\n    };\n  }, [setOverrideDestinationCheck]);\n\n  async function makeTransaction2(address) {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    console.log(amount);\n\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n\n    return wallet.transferToken(publicKey, new PublicKey(address), amount, balanceInfo.mint, decimals, null, overrideDestinationCheck);\n  }\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n\n    return wallet.transferToken(publicKey, new PublicKey(destinationAddress), amount, balanceInfo.mint, decimals, null, overrideDestinationCheck);\n  }\n\n  const disabled = shouldShowOverride ? !overrideDestinationCheck || sending || !validAmount : sending || !validAmount;\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), {\n      onSuccess: onClose\n    });\n  }\n\n  async function bulkSend() {// if(csv!=null){\n    //   let split = csv[0];\n    //   console.log(split);\n    //   for(let i=0; i<split.length; i++){\n    //     try{\n    //       setTimeout(async ()=>{\n    //         let address = split[0];\n    //         if(!address.toLowerCase().startsWith('0x')){\n    //           console.log('txn executing  for ', address);\n    //           //await sendTransaction(makeTransaction2(address), { onSuccess: onClose });\n    //           console.log('txn executed for ', address);\n    //         }\n    //       },5000)\n    //       //await timeout(1000);\n    //     }catch(e){\n    //       console.log('problem with address ',e);\n    //     }\n    //   }\n    // }\n    // await sendTransaction(makeTransaction2('9iRXi2GrbVv4xCXfjmwvyx6Axa4Uk3nVMVHxWUiPA4GS'), { onSuccess: onClose });\n  }\n\n  async function sendTransactionAuto(address) {\n    return await sendTransaction(makeTransaction2(address), {\n      onSuccess: onClose\n    }, address);\n  }\n\n  useEffect(async () => {\n    let index = 0;\n\n    if (csv != null && csv[0] && csv[0].length > 0) {\n      let csvArray = csv[0];\n      setInterval(() => {\n        try {\n          if (index < csvArray.length) {\n            let address = csvArray[index];\n            console.log('sending to', address, index);\n            let status = sendTransactionAuto(address);\n            console.log('sent', address, index, status);\n            index++;\n          } else {}\n        } catch (e) {\n          console.log('error sending transaction ', e, csvArray[index]);\n        }\n      }, 5000, csvIndex);\n    } // if(csv!=null){\n    //   let split = csv[0];\n    //   console.log(split);\n    //   if(split!=null){\n    //   for(let i=0; i<split.length; i++){\n    //     try{\n    //       setTimeout(async ()=>{\n    //         let address = split[i];\n    //         if(!address.toLowerCase().startsWith('0x')){\n    //           console.log('txn executing  for ', address);\n    //           //await sendTransaction(makeTransaction2(address), { onSuccess: onClose });\n    //           console.log('txn executed for ', address);\n    //         }\n    //       },5000)\n    //       //await timeout(1000);\n    //     }catch(e){\n    //       console.log('problem with address ',e);\n    //     }\n    //   }\n    // }\n    // }\n\n  }, [csv.length]);\n  onSubmitRef.current = onSubmit;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n      children: fields\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [shouldShowOverride && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          'align-items': 'center',\n          display: 'flex',\n          'text-align': 'left'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"This address has no funds. Are you sure it's correct?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          checked: overrideDestinationCheck,\n          onChange: e => setOverrideDestinationCheck(e.target.checked),\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Distributor will start automatically after csv file selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CSVReader, {\n        onFileLoaded: (data, fileInfo) => setCsv(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        color: \"primary\",\n        disabled: disabled,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(SendSplDialog, \"+tk7zHVXfnXlf0Yf3O5VcRKjMUE=\", false, function () {\n  return [useWallet, useSendTransaction, useForm];\n});\n\n_c2 = SendSplDialog;\n\nfunction SendSwapDialog({\n  onClose,\n  publicKey,\n  balanceInfo,\n  swapCoinInfo,\n  ethAccount,\n  wusdcToSplUsdc = false,\n  wusdtToSplUsdt = false,\n  usdcToSplWUsdc = false,\n  onSubmitRef\n}) {\n  _s3();\n\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [signature, setSignature] = useState(null);\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount\n  } = useForm(balanceInfo);\n  const {\n    tokenName,\n    decimals,\n    mint\n  } = balanceInfo;\n  const blockchain = wusdcToSplUsdc || wusdtToSplUsdt || usdcToSplWUsdc ? 'sol' : swapCoinInfo.blockchain === 'sol' ? 'eth' : swapCoinInfo.blockchain;\n  const needMetamask = blockchain === 'eth';\n  const [ethBalance] = useAsyncData(() => getErc20Balance(ethAccount), 'ethBalance', {\n    refreshInterval: 2000\n  });\n  const ethFeeData = useSwapApiGet(blockchain === 'eth' && `fees/eth/${ethAccount}` + (swapCoinInfo.erc20Contract ? '/' + swapCoinInfo.erc20Contract : ''), {\n    refreshInterval: 2000\n  });\n  const [ethFeeEstimate] = ethFeeData;\n  const insufficientEthBalance = typeof ethBalance === 'number' && typeof ethFeeEstimate === 'number' && ethBalance < ethFeeEstimate;\n  useEffect(() => {\n    if (blockchain === 'eth' && ethAccount) {\n      setDestinationAddress(ethAccount);\n    }\n  }, [blockchain, ethAccount, setDestinationAddress]);\n  let splUsdcWalletAddress = useWalletAddressForMint(wusdcToSplUsdc ? USDC_MINT : null);\n  let splUsdtWalletAddress = useWalletAddressForMint(wusdtToSplUsdt ? USDT_MINT : null);\n  let splWUsdcWalletAddress = useWalletAddressForMint(usdcToSplWUsdc ? WUSDC_MINT : null);\n  useEffect(() => {\n    if (wusdcToSplUsdc && splUsdcWalletAddress) {\n      setDestinationAddress(splUsdcWalletAddress);\n    } else if (wusdtToSplUsdt && splUsdtWalletAddress) {\n      setDestinationAddress(splUsdtWalletAddress);\n    } else if (usdcToSplWUsdc && splWUsdcWalletAddress) {\n      setDestinationAddress(splWUsdcWalletAddress);\n    }\n  }, [setDestinationAddress, wusdcToSplUsdc, splUsdcWalletAddress, wusdtToSplUsdt, splUsdtWalletAddress, usdcToSplWUsdc, splWUsdcWalletAddress]);\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n\n    const params = {\n      blockchain,\n      address: destinationAddress,\n      size: amount / 10 ** decimals\n    };\n\n    if (blockchain === 'sol') {\n      params.coin = swapCoinInfo.splMint;\n    } else if (blockchain === 'eth') {\n      params.coin = swapCoinInfo.erc20Contract;\n    }\n\n    if (mint === null || mint === void 0 ? void 0 : mint.equals(WUSDC_MINT)) {\n      params.wusdcToUsdc = true;\n    } else if (mint === null || mint === void 0 ? void 0 : mint.equals(USDC_MINT)) {\n      if (usdcToSplWUsdc) {\n        params.usdcToWUsdc = true;\n        params.coin = WUSDC_MINT.toString();\n      }\n    } else if (mint === null || mint === void 0 ? void 0 : mint.equals(WUSDT_MINT)) {\n      params.wusdtToUsdt = true;\n    }\n\n    const swapInfo = await swapApiRequest('POST', 'swap_to', params);\n\n    if (swapInfo.blockchain !== 'sol') {\n      throw new Error('Unexpected blockchain');\n    }\n\n    return wallet.transferToken(publicKey, new PublicKey(swapInfo.address), amount, balanceInfo.mint, decimals, swapInfo.memo);\n  }\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), {\n      onSuccess: setSignature\n    });\n  }\n\n  onSubmitRef.current = onSubmit;\n\n  if (signature) {\n    return /*#__PURE__*/_jsxDEV(SendSwapProgress, {\n      publicKey: publicKey,\n      signature: signature,\n      blockchain: blockchain,\n      onClose: onClose\n    }, signature, false, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 7\n    }, this);\n  }\n\n  let sendButton = /*#__PURE__*/_jsxDEV(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    disabled: sending || needMetamask && !ethAccount || !validAmount || insufficientEthBalance,\n    children: \"Send\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 578,\n    columnNumber: 5\n  }, this);\n\n  if (insufficientEthBalance) {\n    sendButton = /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: \"Insufficient ETH for withdrawal transaction fee\",\n      placement: \"top\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: sendButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n      style: {\n        paddingTop: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: [\"SPL \", tokenName, \" can be converted to\", ' ', blockchain === 'eth' && swapCoinInfo.erc20Contract ? 'ERC20' : blockchain === 'sol' && swapCoinInfo.splMint ? 'SPL' : 'native', ' ', swapCoinInfo.ticker, needMetamask ? ' via MetaMask' : null, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 9\n      }, this), blockchain === 'eth' && /*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: [\"Estimated withdrawal transaction fee:\", /*#__PURE__*/_jsxDEV(EthFeeEstimate, {\n          ethFeeData: ethFeeData,\n          insufficientEthBalance: insufficientEthBalance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 11\n      }, this), needMetamask && !ethAccount ? /*#__PURE__*/_jsxDEV(ConnectToMetamaskButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 40\n      }, this) : fields]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this), sendButton]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s3(SendSwapDialog, \"R5FNB7g62oD++PNwEExJPH//LeQ=\", false, function () {\n  return [useWallet, useSendTransaction, useForm, useAsyncData, useSwapApiGet, useWalletAddressForMint, useWalletAddressForMint, useWalletAddressForMint];\n});\n\n_c3 = SendSwapDialog;\n\nfunction SendSwapProgress({\n  publicKey,\n  signature,\n  onClose,\n  blockchain\n}) {\n  _s4();\n\n  const connection = useConnection();\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 1000\n  });\n  const [confirms] = useAsyncData(async () => {\n    const {\n      value\n    } = await connection.getSignatureStatus(signature);\n    return value === null || value === void 0 ? void 0 : value.confirmations;\n  }, [connection.getSignatureStatus, signature], {\n    refreshInterval: 2000\n  });\n  let step = 1;\n  let ethTxid = null;\n\n  for (let swap of swaps || []) {\n    const {\n      deposit,\n      withdrawal\n    } = swap;\n\n    if (deposit.txid === signature) {\n      var _withdrawal$txid;\n\n      if ((_withdrawal$txid = withdrawal.txid) === null || _withdrawal$txid === void 0 ? void 0 : _withdrawal$txid.startsWith('0x')) {\n        step = 3;\n        ethTxid = withdrawal.txid;\n      } else if (withdrawal.txid && blockchain !== 'eth') {\n        step = 3;\n      } else {\n        step = 2;\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(Stepper, {\n        activeStep: step,\n        children: [/*#__PURE__*/_jsxDEV(Step, {\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            children: \"Send Request\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Step, {\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            children: \"Wait for Confirmations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Step, {\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            children: \"Withdraw Funds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 9\n      }, this), ethTxid ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        align: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: `https://etherscan.io/tx/${ethTxid}`,\n          target: \"_blank\",\n          rel: \"noopener\",\n          children: \"View on Etherscan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 11\n      }, this) : step < 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: 16\n          },\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 13\n        }, this), confirms ? /*#__PURE__*/_jsxDEV(Typography, {\n          children: [confirms, \" / 35 Confirmations\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Transaction Pending\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 11\n      }, this) : null, !ethTxid && blockchain === 'eth' ? /*#__PURE__*/_jsxDEV(DialogContentText, {\n        style: {\n          marginTop: 16,\n          marginBottom: 0\n        },\n        children: \"Please keep this window open. You will need to approve the request on MetaMask to complete the transaction.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s4(SendSwapProgress, \"OzhexDb61UfI3C/dk5IUcX4AHfs=\", false, function () {\n  return [useConnection, useSwapApiGet, useAsyncData];\n});\n\n_c4 = SendSwapProgress;\n\nfunction useForm(balanceInfo, addressHelperText, passAddressValidation, overrideValidation) {\n  _s5();\n\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [transferAmountString, setTransferAmountString] = useState('');\n  const {\n    amount: balanceAmount,\n    decimals,\n    tokenSymbol\n  } = balanceInfo;\n  const parsedAmount = parseFloat(transferAmountString) * 10 ** decimals;\n  const validAmount = parsedAmount > 0 && parsedAmount <= balanceAmount;\n\n  const fields = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Recipient Address\",\n      fullWidth: true,\n      variant: \"outlined\",\n      margin: \"normal\",\n      value: destinationAddress,\n      onChange: e => setDestinationAddress(e.target.value.trim()),\n      helperText: addressHelperText,\n      id: !passAddressValidation && passAddressValidation !== undefined ? 'outlined-error-helper-text' : undefined,\n      error: !passAddressValidation && passAddressValidation !== undefined\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Amount\",\n      fullWidth: true,\n      variant: \"outlined\",\n      margin: \"normal\",\n      type: \"number\",\n      InputProps: {\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setTransferAmountString(balanceAmountToUserAmount(balanceAmount, decimals)),\n            children: \"MAX\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 15\n          }, this), tokenSymbol ? tokenSymbol : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 13\n        }, this),\n        inputProps: {\n          step: Math.pow(10, -decimals)\n        }\n      },\n      value: transferAmountString,\n      onChange: e => setTransferAmountString(e.target.value.trim()),\n      helperText: /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => setTransferAmountString(balanceAmountToUserAmount(balanceAmount, decimals)),\n        children: [\"Max: \", balanceAmountToUserAmount(balanceAmount, decimals)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 751,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  return {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount\n  };\n}\n\n_s5(useForm, \"/xFUMruBNHBOEcyIyi1UhuDugck=\");\n\nfunction balanceAmountToUserAmount(balanceAmount, decimals) {\n  return (balanceAmount / Math.pow(10, decimals)).toFixed(decimals);\n}\n\nfunction EthWithdrawalCompleter({\n  ethAccount,\n  publicKey\n}) {\n  _s6();\n\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 10000\n  });\n\n  if (!swaps) {\n    return null;\n  }\n\n  return swaps.map(swap => /*#__PURE__*/_jsxDEV(EthWithdrawalCompleterItem, {\n    ethAccount: ethAccount,\n    swap: swap\n  }, swap.deposit.txid, false, {\n    fileName: _jsxFileName,\n    lineNumber: 814,\n    columnNumber: 5\n  }, this));\n}\n\n_s6(EthWithdrawalCompleter, \"/yLo+lMKfNmEYkV4tgAkZceCzUw=\", false, function () {\n  return [useSwapApiGet];\n});\n\n_c5 = EthWithdrawalCompleter;\n\nfunction EthWithdrawalCompleterItem({\n  ethAccount,\n  swap\n}) {\n  _s7();\n\n  const callAsync = useCallAsync();\n  const {\n    withdrawal\n  } = swap;\n  useEffect(() => {\n    if (withdrawal.status === 'sent' && withdrawal.blockchain === 'eth' && withdrawal.txid && !withdrawal.txid.startsWith('0x') && withdrawal.txData) {\n      withdrawEth(ethAccount, withdrawal, callAsync);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [withdrawal.txid, withdrawal.status]);\n  return null;\n}\n\n_s7(EthWithdrawalCompleterItem, \"7Vo4NSShDl/nPizzxYfOt/ptmLI=\", false, function () {\n  return [useCallAsync];\n});\n\n_c6 = EthWithdrawalCompleterItem;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"SendDialog\");\n$RefreshReg$(_c2, \"SendSplDialog\");\n$RefreshReg$(_c3, \"SendSwapDialog\");\n$RefreshReg$(_c4, \"SendSwapProgress\");\n$RefreshReg$(_c5, \"EthWithdrawalCompleter\");\n$RefreshReg$(_c6, \"EthWithdrawalCompleterItem\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SendDialog.js"],"names":["React","useEffect","useRef","useState","DialogActions","Button","DialogTitle","DialogContent","TextField","DialogForm","useWallet","useWalletAddressForMint","PublicKey","abbreviateAddress","InputAdornment","useCallAsync","useSendTransaction","swapApiRequest","useSwapApiGet","showSwapAddress","Tabs","Tab","DialogContentText","ConnectToMetamaskButton","getErc20Balance","useEthAccount","withdrawEth","useConnection","useIsProdNetwork","Stepper","Step","StepLabel","Link","Typography","useAsyncData","CircularProgress","TOKEN_PROGRAM_ID","WRAPPED_SOL_MINT","parseTokenAccountData","Switch","Tooltip","EthFeeEstimate","CSVReader","timeout","ms","Promise","res","setTimeout","WUSDC_MINT","USDC_MINT","WUSDT_MINT","USDT_MINT","SendDialog","open","onClose","publicKey","balanceInfo","isProdNetwork","tab","setTab","onSubmitRef","swapCoinInfo","mint","toBase58","ethAccount","tokenName","tokenSymbol","getTabs","equals","localStorage","getItem","ticker","erc20Contract","current","fontSize","e","value","SendSplDialog","defaultAddressHelperText","wallet","sendTransaction","sending","csv","setCsv","splitCsv","setSplitCsv","csvIndex","setCsvIndex","addressHelperText","setAddressHelperText","passValidation","setPassValidation","overrideDestinationCheck","setOverrideDestinationCheck","shouldShowOverride","setShouldShowOverride","fields","destinationAddress","transferAmountString","validAmount","useForm","decimals","mintString","undefined","destinationAccountInfo","connection","getAccountInfo","owner","accountInfo","data","console","log","makeTransaction2","address","amount","Math","round","parseFloat","Error","transferToken","makeTransaction","disabled","onSubmit","onSuccess","bulkSend","sendTransactionAuto","index","length","csvArray","setInterval","status","display","target","checked","fileInfo","SendSwapDialog","wusdcToSplUsdc","wusdtToSplUsdt","usdcToSplWUsdc","signature","setSignature","setDestinationAddress","blockchain","needMetamask","ethBalance","refreshInterval","ethFeeData","ethFeeEstimate","insufficientEthBalance","splUsdcWalletAddress","splUsdtWalletAddress","splWUsdcWalletAddress","params","size","coin","splMint","wusdcToUsdc","usdcToWUsdc","toString","wusdtToUsdt","swapInfo","memo","sendButton","paddingTop","SendSwapProgress","swaps","confirms","getSignatureStatus","confirmations","step","ethTxid","swap","deposit","withdrawal","txid","startsWith","justifyContent","alignItems","marginRight","marginTop","marginBottom","passAddressValidation","overrideValidation","setTransferAmountString","balanceAmount","parsedAmount","trim","endAdornment","balanceAmountToUserAmount","inputProps","pow","toFixed","EthWithdrawalCompleter","map","EthWithdrawalCompleterItem","callAsync","txData"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport DialogForm from './DialogForm';\nimport { useWallet, useWalletAddressForMint } from '../utils/wallet';\nimport { PublicKey } from '@solana/web3.js';\nimport { abbreviateAddress } from '../utils/utils';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n  ConnectToMetamaskButton,\n  getErc20Balance,\n  useEthAccount,\n  withdrawEth,\n} from '../utils/swap/eth';\nimport { useConnection, useIsProdNetwork } from '../utils/connection';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  TOKEN_PROGRAM_ID,\n  WRAPPED_SOL_MINT,\n} from '../utils/tokens/instructions';\nimport { parseTokenAccountData } from '../utils/tokens/data';\nimport { Switch, Tooltip } from '@material-ui/core';\nimport { EthFeeEstimate } from './EthFeeEstimate';\nimport CSVReader from 'react-csv-reader'\n\n\nconst timeout = ms => new Promise(res => setTimeout(res, ms));\n\n\nconst WUSDC_MINT = new PublicKey(\n  'BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW',\n);\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\n\nconst WUSDT_MINT = new PublicKey(\n  'BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4',\n);\n\nconst USDT_MINT = new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB');\n\nexport default function SendDialog({ open, onClose, publicKey, balanceInfo }) {\n  const isProdNetwork = useIsProdNetwork();\n  const [tab, setTab] = useState('spl');\n\n  const onSubmitRef = useRef();\n\n  const [swapCoinInfo] = useSwapApiGet(\n    showSwapAddress && balanceInfo.mint && isProdNetwork\n      ? `coins/sol/${balanceInfo.mint.toBase58()}`\n      : null,\n  );\n  const ethAccount = useEthAccount();\n\n  const { mint, tokenName, tokenSymbol } = balanceInfo;\n\n  const getTabs = (mint) => {\n    if (mint?.equals(WUSDC_MINT)) {\n      return [\n        <Tab label=\"SPL WUSDC\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"SPL USDC\" key=\"wusdcToSplUsdc\" value=\"wusdcToSplUsdc\" />,\n        <Tab label=\"ERC20 USDC\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else if (mint?.equals(WUSDT_MINT)) {\n      return [\n        <Tab label=\"SPL WUSDT\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"SPL USDT\" key=\"wusdtToSplUsdt\" value=\"wusdtToSplUsdt\" />,\n        <Tab label=\"ERC20 USDT\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else if (localStorage.getItem('sollet-private') && mint?.equals(USDC_MINT)) {\n      return [\n        <Tab label=\"SPL USDC\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"SPL WUSDC\" key=\"usdcToSplWUsdc\" value=\"usdcToSplWUsdc\" />,\n        <Tab label=\"ERC20 USDC\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else {\n      return [\n        <Tab label={`SPL ${swapCoinInfo.ticker}`} key=\"spl\" value=\"spl\" />,\n        <Tab\n          label={`${swapCoinInfo.erc20Contract ? 'ERC20' : 'Native'} ${\n            swapCoinInfo.ticker\n          }`}\n          key=\"swap\"\n          value=\"swap\"\n        />,\n      ];\n    }\n  };\n\n  return (\n    <>\n      <DialogForm\n        open={open}\n        onClose={onClose}\n        onSubmit={() => onSubmitRef.current()}\n        fullWidth\n      >\n        <DialogTitle>\n          Send {tokenName }\n          {tokenSymbol }\n          {ethAccount && (\n            <div>\n              <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n                Metamask connected: {ethAccount}\n              </Typography>\n            </div>\n          )}\n        </DialogTitle>\n        {swapCoinInfo ? (\n          <Tabs\n            value={tab}\n            variant=\"fullWidth\"\n            onChange={(e, value) => setTab(value)}\n            textColor=\"primary\"\n            indicatorColor=\"primary\"\n          >\n            {getTabs(mint)}\n          </Tabs>\n        ) : null}\n\n        {tab === 'spl' ? (\n          <SendSplDialog\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            onSubmitRef={onSubmitRef}\n          />\n        ) : tab === 'wusdcToSplUsdc' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            wusdcToSplUsdc\n          />\n        ) : tab === 'wusdtToSplUsdt' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            wusdtToSplUsdt\n          />\n        ) : tab === 'usdcToSplWUsdc' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            usdcToSplWUsdc\n          />\n        ) : (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            ethAccount={ethAccount}\n            onSubmitRef={onSubmitRef}\n          />\n        )}\n      </DialogForm>\n\n    </>\n  );\n}\n\nfunction SendSplDialog({ onClose, publicKey, balanceInfo, onSubmitRef }) {\n  const defaultAddressHelperText =\n    !balanceInfo.mint || balanceInfo.mint.equals(WRAPPED_SOL_MINT)\n      ? 'Enter Solana Address'\n      : 'Enter SPL token or Solana address';\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [csv, setCsv] = useState([]);\n  const [splitCsv, setSplitCsv] = useState([]);\n  const [csvIndex, setCsvIndex] = useState(0);\n  const [addressHelperText, setAddressHelperText] = useState(\n    defaultAddressHelperText,\n  );\n  const [passValidation, setPassValidation] = useState();\n  const [overrideDestinationCheck, setOverrideDestinationCheck] = useState(\n    false,\n  );\n  const [shouldShowOverride, setShouldShowOverride] = useState();\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    validAmount,\n  } = useForm(balanceInfo, addressHelperText, passValidation);\n  const { decimals, mint } = balanceInfo;\n  const mintString = mint && mint.toBase58();\n\n  useEffect(() => {\n    (async () => {\n      if (!destinationAddress) {\n        setAddressHelperText(defaultAddressHelperText);\n        setPassValidation(undefined);\n        setShouldShowOverride(undefined);\n        return;\n      }\n      try {\n        const destinationAccountInfo = await wallet.connection.getAccountInfo(\n          new PublicKey(destinationAddress),\n        );\n        setShouldShowOverride(false);\n\n        if (destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID)) {\n          const accountInfo = parseTokenAccountData(\n            destinationAccountInfo.data,\n          );\n          if (accountInfo.mint.toBase58() === mintString) {\n            setPassValidation(true);\n            setAddressHelperText('Address is a valid SPL token address');\n          } else {\n            setPassValidation(false);\n            setAddressHelperText('Destination address mint does not match');\n          }\n        } else {\n          setPassValidation(true);\n          setAddressHelperText('Destination is a Solana address');\n        }\n      } catch (e) {\n        console.log(`Received error validating address ${e}`);\n        setAddressHelperText(defaultAddressHelperText);\n        setShouldShowOverride(true);\n        setPassValidation(undefined);\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [destinationAddress, wallet, mintString]);\n\n  useEffect(() => {\n    return () => {\n      setOverrideDestinationCheck(false);\n    };\n  }, [setOverrideDestinationCheck]);\n\n\n  async function makeTransaction2(address) {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    console.log(amount);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(address),\n      amount,\n      balanceInfo.mint,\n      decimals,\n      null,\n      overrideDestinationCheck,\n    );\n  }\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(destinationAddress),\n      amount,\n      balanceInfo.mint,\n      decimals,\n      null,\n      overrideDestinationCheck,\n    );\n  }\n\n  const disabled = shouldShowOverride\n    ? !overrideDestinationCheck || sending || !validAmount\n    : sending || !validAmount;\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), { onSuccess: onClose });\n  }\n\n  async function bulkSend(){\n\n\n    // if(csv!=null){\n\n    //   let split = csv[0];\n    //   console.log(split);\n\n    //   for(let i=0; i<split.length; i++){\n    //     try{\n\n    //       setTimeout(async ()=>{\n    //         let address = split[0];\n    //         if(!address.toLowerCase().startsWith('0x')){\n    //           console.log('txn executing  for ', address);\n    //           //await sendTransaction(makeTransaction2(address), { onSuccess: onClose });\n    //           console.log('txn executed for ', address);\n              \n    //         }\n\n    //       },5000)\n\n    //       //await timeout(1000);\n\n    //     }catch(e){\n    //       console.log('problem with address ',e);\n    //     }\n\n    //   }\n    // }\n\n    // await sendTransaction(makeTransaction2('9iRXi2GrbVv4xCXfjmwvyx6Axa4Uk3nVMVHxWUiPA4GS'), { onSuccess: onClose });\n\n\n  }\n\n  async function sendTransactionAuto(address){\n\n    return await sendTransaction(makeTransaction2(address), { onSuccess: onClose }, address);\n\n  }\n  \n\n  useEffect(async () => {\n    let index=0; \n    if(csv!=null && csv[0] && csv[0].length>0){\n      let csvArray = csv[0];\n      setInterval(()=>{\n        try{\n\n        \n        if(index < csvArray.length){\n          let address= csvArray[index];\n          console.log('sending to', address, index);\n          let status = sendTransactionAuto(address);\n          console.log('sent', address, index, status);\n          index++;\n\n        }else{}\n      }catch(e){\n        console.log('error sending transaction ',e, csvArray[index] )\n      }\n\n\n      },5000, csvIndex)\n\n    }\n\n    // if(csv!=null){\n\n    //   let split = csv[0];\n    //   console.log(split);\n    //   if(split!=null){\n\n      \n    //   for(let i=0; i<split.length; i++){\n    //     try{\n\n    //       setTimeout(async ()=>{\n    //         let address = split[i];\n    //         if(!address.toLowerCase().startsWith('0x')){\n    //           console.log('txn executing  for ', address);\n    //           //await sendTransaction(makeTransaction2(address), { onSuccess: onClose });\n    //           console.log('txn executed for ', address);\n              \n    //         }\n\n    //       },5000)\n\n    //       //await timeout(1000);\n\n    //     }catch(e){\n    //       console.log('problem with address ',e);\n    //     }\n\n    //   }\n    // }\n    // }\n}, [csv.length]);\n\n\n\n  onSubmitRef.current = onSubmit;\n  return (\n    <>\n      <DialogContent>{fields}</DialogContent>\n      <DialogActions>\n        {shouldShowOverride && (\n          <div\n            style={{\n              'align-items': 'center',\n              display: 'flex',\n              'text-align': 'left',\n            }}\n          >\n            <b>This address has no funds. Are you sure it's correct?</b>\n            <Switch\n              checked={overrideDestinationCheck}\n              onChange={(e) => setOverrideDestinationCheck(e.target.checked)}\n              color=\"primary\"\n            />\n          </div>\n        )}\n        <b>Distributor will start automatically after csv file selected</b>\n        <CSVReader onFileLoaded={(data, fileInfo) =>  setCsv(data)  } />\n        {/* <Button onClick={bulkSend}>Bulk Send</Button> */}\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" color=\"primary\" disabled={disabled}>\n          Send\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n\nfunction SendSwapDialog({\n  onClose,\n  publicKey,\n  balanceInfo,\n  swapCoinInfo,\n  ethAccount,\n  wusdcToSplUsdc = false,\n  wusdtToSplUsdt = false,\n  usdcToSplWUsdc = false,\n  onSubmitRef,\n}) {\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [signature, setSignature] = useState(null);\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  } = useForm(balanceInfo);\n\n  const { tokenName, decimals, mint } = balanceInfo;\n  const blockchain =\n    wusdcToSplUsdc || wusdtToSplUsdt || usdcToSplWUsdc\n      ? 'sol'\n      : swapCoinInfo.blockchain === 'sol'\n      ? 'eth'\n      : swapCoinInfo.blockchain;\n  const needMetamask = blockchain === 'eth';\n\n  const [ethBalance] = useAsyncData(\n    () => getErc20Balance(ethAccount),\n    'ethBalance',\n    {\n      refreshInterval: 2000,\n    },\n  );\n  const ethFeeData = useSwapApiGet(\n    blockchain === 'eth' &&\n      `fees/eth/${ethAccount}` +\n        (swapCoinInfo.erc20Contract ? '/' + swapCoinInfo.erc20Contract : ''),\n    { refreshInterval: 2000 },\n  );\n  const [ethFeeEstimate] = ethFeeData;\n  const insufficientEthBalance =\n    typeof ethBalance === 'number' &&\n    typeof ethFeeEstimate === 'number' &&\n    ethBalance < ethFeeEstimate;\n\n  useEffect(() => {\n    if (blockchain === 'eth' && ethAccount) {\n      setDestinationAddress(ethAccount);\n    }\n  }, [blockchain, ethAccount, setDestinationAddress]);\n\n  let splUsdcWalletAddress = useWalletAddressForMint(\n    wusdcToSplUsdc ? USDC_MINT : null,\n  );\n  let splUsdtWalletAddress = useWalletAddressForMint(\n    wusdtToSplUsdt ? USDT_MINT : null,\n  );\n  let splWUsdcWalletAddress = useWalletAddressForMint(\n    usdcToSplWUsdc ? WUSDC_MINT : null,\n  );\n  useEffect(() => {\n    if (wusdcToSplUsdc && splUsdcWalletAddress) {\n      setDestinationAddress(splUsdcWalletAddress);\n    } else if (wusdtToSplUsdt && splUsdtWalletAddress) {\n      setDestinationAddress(splUsdtWalletAddress);\n    } else if (usdcToSplWUsdc && splWUsdcWalletAddress) {\n      setDestinationAddress(splWUsdcWalletAddress);\n    }\n  }, [\n    setDestinationAddress,\n    wusdcToSplUsdc,\n    splUsdcWalletAddress,\n    wusdtToSplUsdt,\n    splUsdtWalletAddress,\n    usdcToSplWUsdc,\n    splWUsdcWalletAddress,\n  ]);\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    const params = {\n      blockchain,\n      address: destinationAddress,\n      size: amount / 10 ** decimals,\n    };\n    if (blockchain === 'sol') {\n      params.coin = swapCoinInfo.splMint;\n    } else if (blockchain === 'eth') {\n      params.coin = swapCoinInfo.erc20Contract;\n    }\n    if (mint?.equals(WUSDC_MINT)) {\n      params.wusdcToUsdc = true;\n    } else if (mint?.equals(USDC_MINT)) {\n      if (usdcToSplWUsdc) {\n        params.usdcToWUsdc = true;\n        params.coin = WUSDC_MINT.toString();\n      }\n    } else if (mint?.equals(WUSDT_MINT)) {\n      params.wusdtToUsdt = true;\n    }\n    const swapInfo = await swapApiRequest('POST', 'swap_to', params);\n    if (swapInfo.blockchain !== 'sol') {\n      throw new Error('Unexpected blockchain');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(swapInfo.address),\n      amount,\n      balanceInfo.mint,\n      decimals,\n      swapInfo.memo,\n    );\n  }\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), { onSuccess: setSignature });\n  }\n  onSubmitRef.current = onSubmit;\n\n  if (signature) {\n    return (\n      <SendSwapProgress\n        key={signature}\n        publicKey={publicKey}\n        signature={signature}\n        blockchain={blockchain}\n        onClose={onClose}\n      />\n    );\n  }\n\n  let sendButton = (\n    <Button\n      type=\"submit\"\n      color=\"primary\"\n      disabled={\n        sending ||\n        (needMetamask && !ethAccount) ||\n        !validAmount ||\n        insufficientEthBalance\n      }\n    >\n      Send\n    </Button>\n  );\n\n  if (insufficientEthBalance) {\n    sendButton = (\n      <Tooltip\n        title=\"Insufficient ETH for withdrawal transaction fee\"\n        placement=\"top\"\n      >\n        <span>{sendButton}</span>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <DialogContent style={{ paddingTop: 16 }}>\n        <DialogContentText>\n          SPL {tokenName} can be converted to{' '}\n          {blockchain === 'eth' && swapCoinInfo.erc20Contract\n            ? 'ERC20'\n            : blockchain === 'sol' && swapCoinInfo.splMint\n            ? 'SPL'\n            : 'native'}{' '}\n          {swapCoinInfo.ticker}\n          {needMetamask ? ' via MetaMask' : null}.\n        </DialogContentText>\n        {blockchain === 'eth' && (\n          <DialogContentText>\n            Estimated withdrawal transaction fee:\n            <EthFeeEstimate\n              ethFeeData={ethFeeData}\n              insufficientEthBalance={insufficientEthBalance}\n            />\n          </DialogContentText>\n        )}\n        {needMetamask && !ethAccount ? <ConnectToMetamaskButton /> : fields}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        {sendButton}\n      </DialogActions>\n    </>\n  );\n}\n\nfunction SendSwapProgress({ publicKey, signature, onClose, blockchain }) {\n  const connection = useConnection();\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 1000,\n  });\n  const [confirms] = useAsyncData(\n    async () => {\n      const { value } = await connection.getSignatureStatus(signature);\n      return value?.confirmations;\n    },\n    [connection.getSignatureStatus, signature],\n    { refreshInterval: 2000 },\n  );\n\n  let step = 1;\n  let ethTxid = null;\n  for (let swap of swaps || []) {\n    const { deposit, withdrawal } = swap;\n    if (deposit.txid === signature) {\n      if (withdrawal.txid?.startsWith('0x')) {\n        step = 3;\n        ethTxid = withdrawal.txid;\n      } else if (withdrawal.txid && blockchain !== 'eth') {\n        step = 3;\n      } else {\n        step = 2;\n      }\n    }\n  }\n\n  return (\n    <>\n      <DialogContent>\n        <Stepper activeStep={step}>\n          <Step>\n            <StepLabel>Send Request</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Wait for Confirmations</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Withdraw Funds</StepLabel>\n          </Step>\n        </Stepper>\n        {ethTxid ? (\n          <Typography variant=\"body2\" align=\"center\">\n            <Link\n              href={`https://etherscan.io/tx/${ethTxid}`}\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              View on Etherscan\n            </Link>\n          </Typography>\n        ) : step < 3 ? (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <div style={{ marginRight: 16 }}>\n              <CircularProgress />\n            </div>\n            {confirms ? (\n              <Typography>{confirms} / 35 Confirmations</Typography>\n            ) : (\n              <Typography>Transaction Pending</Typography>\n            )}\n          </div>\n        ) : null}\n        {!ethTxid && blockchain === 'eth' ? (\n          <DialogContentText style={{ marginTop: 16, marginBottom: 0 }}>\n            Please keep this window open. You will need to approve the request\n            on MetaMask to complete the transaction.\n          </DialogContentText>\n        ) : null}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </>\n  );\n}\n\nfunction useForm(\n  balanceInfo,\n  addressHelperText,\n  passAddressValidation,\n  overrideValidation,\n) {\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [transferAmountString, setTransferAmountString] = useState('');\n  const { amount: balanceAmount, decimals, tokenSymbol } = balanceInfo;\n\n  const parsedAmount = parseFloat(transferAmountString) * 10 ** decimals;\n  const validAmount = parsedAmount > 0 && parsedAmount <= balanceAmount;\n\n  const fields = (\n    <>\n      <TextField\n        label=\"Recipient Address\"\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        value={destinationAddress}\n        onChange={(e) => setDestinationAddress(e.target.value.trim())}\n        helperText={addressHelperText}\n        id={\n          !passAddressValidation && passAddressValidation !== undefined\n            ? 'outlined-error-helper-text'\n            : undefined\n        }\n        error={!passAddressValidation && passAddressValidation !== undefined}\n      />\n      <TextField\n        label=\"Amount\"\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        type=\"number\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Button\n                onClick={() =>\n                  setTransferAmountString(\n                    balanceAmountToUserAmount(balanceAmount, decimals),\n                  )\n                }\n              >\n                MAX\n              </Button>\n              {tokenSymbol ? tokenSymbol : null}\n            </InputAdornment>\n          ),\n          inputProps: {\n            step: Math.pow(10, -decimals),\n          },\n        }}\n        value={transferAmountString}\n        onChange={(e) => setTransferAmountString(e.target.value.trim())}\n        helperText={\n          <span\n            onClick={() =>\n              setTransferAmountString(\n                balanceAmountToUserAmount(balanceAmount, decimals),\n              )\n            }\n          >\n            Max: {balanceAmountToUserAmount(balanceAmount, decimals)}\n          </span>\n        }\n      />\n    </>\n  );\n\n  return {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  };\n}\n\nfunction balanceAmountToUserAmount(balanceAmount, decimals) {\n  return (balanceAmount / Math.pow(10, decimals)).toFixed(decimals);\n}\n\nfunction EthWithdrawalCompleter({ ethAccount, publicKey }) {\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 10000,\n  });\n  if (!swaps) {\n    return null;\n  }\n  return swaps.map((swap) => (\n    <EthWithdrawalCompleterItem\n      key={swap.deposit.txid}\n      ethAccount={ethAccount}\n      swap={swap}\n    />\n  ));\n}\n\nfunction EthWithdrawalCompleterItem({ ethAccount, swap }) {\n  const callAsync = useCallAsync();\n  const { withdrawal } = swap;\n  useEffect(() => {\n    if (\n      withdrawal.status === 'sent' &&\n      withdrawal.blockchain === 'eth' &&\n      withdrawal.txid &&\n      !withdrawal.txid.startsWith('0x') &&\n      withdrawal.txData\n    ) {\n      withdrawEth(ethAccount, withdrawal, callAsync);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [withdrawal.txid, withdrawal.status]);\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}