{"ast":null,"code":"import _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport nacl from 'tweetnacl';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from 'crypto-hash';\nimport { blob, struct, ns64, u32, offset, u8, seq, nu64, u16 } from 'buffer-layout';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport assert from 'assert';\nimport { parse, format } from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport { struct as struct$1 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport http from 'http';\nimport https from 'https';\nimport secp256k1 from 'secp256k1';\nimport createKeccakHash from 'keccak';\n\nvar toBuffer = function toBuffer(arr) {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nvar naclLowLevel = nacl.lowlevel; // This type exists to workaround an esdoc parse error\n\n/**\n * Maximum length of derived pubkey seed\n */\n\nvar MAX_SEED_LENGTH = 32;\n/**\n * A public key\n */\n\nvar PublicKey = /*#__PURE__*/function () {\n  /**\n   * Create a new PublicKey object\n   */\n  function PublicKey(value) {\n    _classCallCheck(this, PublicKey);\n\n    _defineProperty(this, \"_bn\", void 0);\n\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      var decoded = bs58.decode(value);\n\n      if (decoded.length != 32) {\n        throw new Error(\"Invalid public key input\");\n      }\n\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(\"Invalid public key input\");\n    }\n  }\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  _createClass(PublicKey, [{\n    key: \"equals\",\n    value: function equals(publicKey) {\n      return this._bn.eq(publicKey._bn);\n    }\n    /**\n     * Return the base-58 representation of the public key\n     */\n\n  }, {\n    key: \"toBase58\",\n    value: function toBase58() {\n      return bs58.encode(this.toBuffer());\n    }\n    /**\n     * Return the Buffer representation of the public key\n     */\n\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      var b = this._bn.toArrayLike(Buffer);\n\n      if (b.length === 32) {\n        return b;\n      }\n\n      var zeroPad = Buffer.alloc(32);\n      b.copy(zeroPad, 32 - b.length);\n      return zeroPad;\n    }\n    /**\n     * Returns a string representation of the public key\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toBase58();\n    }\n    /**\n     * Derive a public key from another key, a seed, and a program ID.\n     */\n\n  }], [{\n    key: \"createWithSeed\",\n    value: function () {\n      var _createWithSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fromPublicKey, seed, programId) {\n        var buffer, hash;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n                _context.next = 3;\n                return sha256(new Uint8Array(buffer));\n\n              case 3:\n                hash = _context.sent;\n                return _context.abrupt(\"return\", new PublicKey(Buffer.from(hash, 'hex')));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function createWithSeed(_x, _x2, _x3) {\n        return _createWithSeed.apply(this, arguments);\n      }\n\n      return createWithSeed;\n    }()\n    /**\n     * Derive a program address from seeds and a program ID.\n     */\n\n  }, {\n    key: \"createProgramAddress\",\n    value: function () {\n      var _createProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(seeds, programId) {\n        var buffer, hash, publicKeyBytes;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                buffer = Buffer.alloc(0);\n                seeds.forEach(function (seed) {\n                  if (seed.length > MAX_SEED_LENGTH) {\n                    throw new Error(\"Max seed length exceeded\");\n                  }\n\n                  buffer = Buffer.concat([buffer, Buffer.from(seed)]);\n                });\n                buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n                _context2.next = 5;\n                return sha256(new Uint8Array(buffer));\n\n              case 5:\n                hash = _context2.sent;\n                publicKeyBytes = new BN(hash, 16).toArray(null, 32);\n\n                if (!is_on_curve(publicKeyBytes)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error(\"Invalid seeds, address must fall off the curve\");\n\n              case 9:\n                return _context2.abrupt(\"return\", new PublicKey(publicKeyBytes));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createProgramAddress(_x4, _x5) {\n        return _createProgramAddress.apply(this, arguments);\n      }\n\n      return createProgramAddress;\n    }()\n    /**\n     * Find a valid program address\n     *\n     * Valid program addresses must fall off the ed25519 curve.  This function\n     * iterates a nonce until it finds one that when combined with the seeds\n     * results in a valid program address.\n     */\n\n  }, {\n    key: \"findProgramAddress\",\n    value: function () {\n      var _findProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(seeds, programId) {\n        var nonce, address, seedsWithNonce;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                nonce = 255;\n\n              case 1:\n                if (!(nonce != 0)) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.prev = 2;\n                seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n                _context3.next = 6;\n                return this.createProgramAddress(seedsWithNonce, programId);\n\n              case 6:\n                address = _context3.sent;\n                _context3.next = 13;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](2);\n                nonce--;\n                return _context3.abrupt(\"continue\", 1);\n\n              case 13:\n                return _context3.abrupt(\"return\", [address, nonce]);\n\n              case 16:\n                throw new Error(\"Unable to find a viable program address nonce\");\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 9]]);\n      }));\n\n      function findProgramAddress(_x6, _x7) {\n        return _findProgramAddress.apply(this, arguments);\n      }\n\n      return findProgramAddress;\n    }()\n  }]);\n\n  return PublicKey;\n}(); // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nvar gf1 = naclLowLevel.gf([1]);\nvar I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n/**\n * An account key pair (public and secret keys).\n */\n\n\nvar Account = /*#__PURE__*/function () {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  function Account(secretKey) {\n    _classCallCheck(this, Account);\n\n    _defineProperty(this, \"_keypair\", void 0);\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  _createClass(Account, [{\n    key: \"publicKey\",\n    get: function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n    /**\n     * The **unencrypted** secret key for this account\n     */\n\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return this._keypair.secretKey;\n    }\n  }]);\n\n  return Account;\n}();\n\nvar BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Layout for a public key\n */\n\nvar publicKey = function publicKey() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nvar rustString = function rustString() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  var rsl = struct([u32('length'), u32('lengthPadding'), blob(offset(u32(), -8), 'chars')], property);\n\n  var _decode = rsl.decode.bind(rsl);\n\n  var _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = function (buffer, offset) {\n    var data = _decode(buffer, offset);\n\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = function (str, buffer, offset) {\n    var data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = function (str) {\n    return u32().span + u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rsl;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nvar authorized = function authorized() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nvar lockup = function lockup() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return struct([ns64('unixTimestamp'), ns64('epoch'), publicKey('custodian')], property);\n};\n\nfunction getAlloc(type, fields) {\n  var alloc = 0;\n  type.layout.fields.forEach(function (item) {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  var len = 0;\n  var size = 0;\n\n  for (;;) {\n    var elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  var rem_len = len;\n\n  for (;;) {\n    var elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * The message header, identifying signed and read-only account\n *\n * @typedef {Object} MessageHeader\n * @property {number} numRequiredSignatures The number of signatures required for this message to be considered valid. The\n * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n * @property {number} numReadonlySignedAccounts: The last `numReadonlySignedAccounts` of the signed keys are read-only accounts\n * @property {number} numReadonlyUnsignedAccounts The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts\n */\n\n\nvar PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nvar Message = /*#__PURE__*/function () {\n  function Message(args) {\n    _classCallCheck(this, Message);\n\n    _defineProperty(this, \"header\", void 0);\n\n    _defineProperty(this, \"accountKeys\", void 0);\n\n    _defineProperty(this, \"recentBlockhash\", void 0);\n\n    _defineProperty(this, \"instructions\", void 0);\n\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(function (account) {\n      return new PublicKey(account);\n    });\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  _createClass(Message, [{\n    key: \"isAccountWritable\",\n    value: function isAccountWritable(index) {\n      return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var numKeys = this.accountKeys.length;\n      var keyCount = [];\n      encodeLength(keyCount, numKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var accounts = instruction.accounts,\n            programIdIndex = instruction.programIdIndex;\n        var data = bs58.decode(instruction.data);\n        var keyIndicesCount = [];\n        encodeLength(keyIndicesCount, accounts.length);\n        var dataCount = [];\n        encodeLength(dataCount, data.length);\n        return {\n          programIdIndex: programIdIndex,\n          keyIndicesCount: Buffer.from(keyIndicesCount),\n          keyIndices: Buffer.from(accounts),\n          dataLength: Buffer.from(dataCount),\n          data: data\n        };\n      });\n      var instructionCount = [];\n      encodeLength(instructionCount, instructions.length);\n      var instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n      Buffer.from(instructionCount).copy(instructionBuffer);\n      var instructionBufferLength = instructionCount.length;\n      instructions.forEach(function (instruction) {\n        var instructionLayout = struct([u8('programIdIndex'), blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), seq(u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), blob(instruction.dataLength.length, 'dataLength'), seq(u8('userdatum'), instruction.data.length, 'data')]);\n        var length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n        instructionBufferLength += length;\n      });\n      instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n      var signDataLayout = struct([blob(1, 'numRequiredSignatures'), blob(1, 'numReadonlySignedAccounts'), blob(1, 'numReadonlyUnsignedAccounts'), blob(keyCount.length, 'keyCount'), seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n      var transaction = {\n        numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n        numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n        numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n        keyCount: Buffer.from(keyCount),\n        keys: this.accountKeys.map(function (key) {\n          return key.toBuffer();\n        }),\n        recentBlockhash: bs58.decode(this.recentBlockhash)\n      };\n      var signData = Buffer.alloc(2048);\n      var length = signDataLayout.encode(transaction, signData);\n      instructionBuffer.copy(signData, length);\n      return signData.slice(0, length + instructionBuffer.length);\n    }\n    /**\n     * Decode a compiled message into a Message object.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n\n      var numRequiredSignatures = byteArray.shift();\n      var numReadonlySignedAccounts = byteArray.shift();\n      var numReadonlyUnsignedAccounts = byteArray.shift();\n      var accountCount = decodeLength(byteArray);\n      var accountKeys = [];\n\n      for (var i = 0; i < accountCount; i++) {\n        var account = byteArray.slice(0, PUBKEY_LENGTH);\n        byteArray = byteArray.slice(PUBKEY_LENGTH);\n        accountKeys.push(bs58.encode(Buffer.from(account)));\n      }\n\n      var recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      var instructionCount = decodeLength(byteArray);\n      var instructions = [];\n\n      for (var _i = 0; _i < instructionCount; _i++) {\n        var instruction = {};\n        instruction.programIdIndex = byteArray.shift();\n\n        var _accountCount = decodeLength(byteArray);\n\n        instruction.accounts = byteArray.slice(0, _accountCount);\n        byteArray = byteArray.slice(_accountCount);\n        var dataLength = decodeLength(byteArray);\n        var data = byteArray.slice(0, dataLength);\n        instruction.data = bs58.encode(Buffer.from(data));\n        byteArray = byteArray.slice(dataLength);\n        instructions.push(instruction);\n      }\n\n      var messageArgs = {\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n        accountKeys: accountKeys,\n        instructions: instructions\n      };\n      return new Message(messageArgs);\n    }\n  }]);\n\n  return Message;\n}();\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\n\n\nvar DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nvar PACKET_DATA_SIZE = 1280 - 40 - 8;\nvar SIGNATURE_LENGTH = 64;\n/**\n * Account metadata used to define instructions\n *\n * @typedef {Object} AccountMeta\n * @property {PublicKey} pubkey An account's public key\n * @property {boolean} isSigner True if an instruction requires a transaction signature matching `pubkey`\n * @property {boolean} isWritable True if the `pubkey` can be loaded as a read-write account.\n */\n\n/**\n * Transaction Instruction class\n */\n\nvar TransactionInstruction =\n/**\n * Public keys to include in this transaction\n * Boolean represents whether this pubkey needs to sign the transaction\n */\n\n/**\n * Program Id to execute\n */\n\n/**\n * Program input\n */\nfunction TransactionInstruction(opts) {\n  _classCallCheck(this, TransactionInstruction);\n\n  _defineProperty(this, \"keys\", []);\n\n  _defineProperty(this, \"programId\", void 0);\n\n  _defineProperty(this, \"data\", Buffer.alloc(0));\n\n  opts && Object.assign(this, opts);\n};\n/**\n * @private\n */\n\n/**\n * Transaction class\n */\n\n\nvar Transaction = /*#__PURE__*/function () {\n  _createClass(Transaction, [{\n    key: \"signature\",\n\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n\n    /**\n     * The first (payer) Transaction signature\n     */\n    get: function get() {\n      if (this.signatures.length > 0) {\n        return this.signatures[0].signature;\n      }\n\n      return null;\n    }\n    /**\n     * The transaction fee payer\n     */\n\n  }]);\n  /**\n   * Construct an empty Transaction\n   */\n\n\n  function Transaction(opts) {\n    _classCallCheck(this, Transaction);\n\n    _defineProperty(this, \"signatures\", []);\n\n    _defineProperty(this, \"feePayer\", void 0);\n\n    _defineProperty(this, \"instructions\", []);\n\n    _defineProperty(this, \"recentBlockhash\", void 0);\n\n    _defineProperty(this, \"nonceInfo\", void 0);\n\n    opts && Object.assign(this, opts);\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  _createClass(Transaction, [{\n    key: \"add\",\n    value: function add() {\n      var _this = this;\n\n      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n        items[_key] = arguments[_key];\n      }\n\n      if (items.length === 0) {\n        throw new Error('No instructions');\n      }\n\n      items.forEach(function (item) {\n        if ('instructions' in item) {\n          _this.instructions = _this.instructions.concat(item.instructions);\n        } else if ('data' in item && 'programId' in item && 'keys' in item) {\n          _this.instructions.push(item);\n        } else {\n          _this.instructions.push(new TransactionInstruction(item));\n        }\n      });\n      return this;\n    }\n    /**\n     * Compile transaction data\n     */\n\n  }, {\n    key: \"compileMessage\",\n    value: function compileMessage() {\n      var nonceInfo = this.nonceInfo;\n\n      if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n        this.recentBlockhash = nonceInfo.nonce;\n        this.instructions.unshift(nonceInfo.nonceInstruction);\n      }\n\n      var recentBlockhash = this.recentBlockhash;\n\n      if (!recentBlockhash) {\n        throw new Error('Transaction recentBlockhash required');\n      }\n\n      if (this.instructions.length < 1) {\n        throw new Error('No instructions provided');\n      }\n\n      var feePayer;\n\n      if (this.feePayer) {\n        feePayer = this.feePayer;\n      } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n        // Use implicit fee payer\n        feePayer = this.signatures[0].publicKey;\n      } else {\n        throw new Error('Transaction fee payer required');\n      }\n\n      var programIds = [];\n      var accountMetas = [];\n      this.instructions.forEach(function (instruction) {\n        instruction.keys.forEach(function (accountMeta) {\n          accountMetas.push(_objectSpread({}, accountMeta));\n        });\n        var programId = instruction.programId.toString();\n\n        if (!programIds.includes(programId)) {\n          programIds.push(programId);\n        }\n      }); // Append programID account metas\n\n      programIds.forEach(function (programId) {\n        accountMetas.push({\n          pubkey: new PublicKey(programId),\n          isSigner: false,\n          isWritable: false\n        });\n      }); // Sort. Prioritizing first by signer, then by writable\n\n      accountMetas.sort(function (x, y) {\n        var checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n        var checkWritable = x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n        return checkSigner || checkWritable;\n      }); // Cull duplicate account metas\n\n      var uniqueMetas = [];\n      accountMetas.forEach(function (accountMeta) {\n        var pubkeyString = accountMeta.pubkey.toString();\n        var uniqueIndex = uniqueMetas.findIndex(function (x) {\n          return x.pubkey.toString() === pubkeyString;\n        });\n\n        if (uniqueIndex > -1) {\n          uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        } else {\n          uniqueMetas.push(accountMeta);\n        }\n      }); // Move fee payer to the front\n\n      var feePayerIndex = uniqueMetas.findIndex(function (x) {\n        return x.pubkey.equals(feePayer);\n      });\n\n      if (feePayerIndex > -1) {\n        var _uniqueMetas$splice = uniqueMetas.splice(feePayerIndex, 1),\n            _uniqueMetas$splice2 = _slicedToArray(_uniqueMetas$splice, 1),\n            payerMeta = _uniqueMetas$splice2[0];\n\n        payerMeta.isSigner = true;\n        payerMeta.isWritable = true;\n        uniqueMetas.unshift(payerMeta);\n      } else {\n        uniqueMetas.unshift({\n          pubkey: feePayer,\n          isSigner: true,\n          isWritable: true\n        });\n      } // Disallow unknown signers\n\n\n      var _iterator = _createForOfIteratorHelper(this.signatures),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var signature = _step.value;\n          var uniqueIndex = uniqueMetas.findIndex(function (x) {\n            return x.pubkey.equals(signature.publicKey);\n          });\n\n          if (uniqueIndex > -1) {\n            if (!uniqueMetas[uniqueIndex].isSigner) {\n              uniqueMetas[uniqueIndex].isSigner = true;\n              console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n            }\n          } else {\n            throw new Error(\"unknown signer: \".concat(signature.publicKey.toString()));\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var numRequiredSignatures = 0;\n      var numReadonlySignedAccounts = 0;\n      var numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n      var signedKeys = [];\n      var unsignedKeys = [];\n      uniqueMetas.forEach(function (_ref) {\n        var pubkey = _ref.pubkey,\n            isSigner = _ref.isSigner,\n            isWritable = _ref.isWritable;\n\n        if (isSigner) {\n          signedKeys.push(pubkey.toString());\n          numRequiredSignatures += 1;\n\n          if (!isWritable) {\n            numReadonlySignedAccounts += 1;\n          }\n        } else {\n          unsignedKeys.push(pubkey.toString());\n\n          if (!isWritable) {\n            numReadonlyUnsignedAccounts += 1;\n          }\n        }\n      });\n      var accountKeys = signedKeys.concat(unsignedKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var data = instruction.data,\n            programId = instruction.programId;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(function (meta) {\n            return accountKeys.indexOf(meta.pubkey.toString());\n          }),\n          data: bs58.encode(data)\n        };\n      });\n      instructions.forEach(function (instruction) {\n        assert(instruction.programIdIndex >= 0);\n        instruction.accounts.forEach(function (keyIndex) {\n          return assert(keyIndex >= 0);\n        });\n      });\n      return new Message({\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        accountKeys: accountKeys,\n        recentBlockhash: recentBlockhash,\n        instructions: instructions\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_compile\",\n    value: function _compile() {\n      var message = this.compileMessage();\n      var signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n      if (this.signatures.length === signedKeys.length) {\n        var valid = this.signatures.every(function (pair, index) {\n          return signedKeys[index].equals(pair.publicKey);\n        });\n        if (valid) return message;\n      }\n\n      this.signatures = signedKeys.map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n      return message;\n    }\n    /**\n     * Get a buffer of the Transaction data that need to be covered by signatures\n     */\n\n  }, {\n    key: \"serializeMessage\",\n    value: function serializeMessage() {\n      return this._compile().serialize();\n    }\n    /**\n     * Specify the public keys which will be used to sign the Transaction.\n     * The first signer will be used as the transaction fee payer account.\n     *\n     * Signatures can be added with either `partialSign` or `addSignature`\n     *\n     * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n     * specified and it can be set in the Transaction constructor or with the\n     * `feePayer` property.\n     */\n\n  }, {\n    key: \"setSigners\",\n    value: function setSigners() {\n      for (var _len2 = arguments.length, signers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        signers[_key2] = arguments[_key2];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n\n      var seen = new Set();\n      this.signatures = signers.filter(function (publicKey) {\n        var key = publicKey.toString();\n\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      }).map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n    }\n    /**\n     * Sign the Transaction with the specified accounts. Multiple signatures may\n     * be applied to a Transaction. The first signature is considered \"primary\"\n     * and is used identify and confirm transactions.\n     *\n     * If the Transaction `feePayer` is not set, the first signer will be used\n     * as the transaction fee payer account.\n     *\n     * Transaction fields should not be modified after the first call to `sign`,\n     * as doing so may invalidate the signature and cause the Transaction to be\n     * rejected.\n     *\n     * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        signers[_key3] = arguments[_key3];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n\n      var seen = new Set();\n      var uniqueSigners = [];\n\n      for (var _i = 0, _signers = signers; _i < _signers.length; _i++) {\n        var signer = _signers[_i];\n        var key = signer.publicKey.toString();\n\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n\n      this.signatures = uniqueSigners.map(function (signer) {\n        return {\n          signature: null,\n          publicKey: signer.publicKey\n        };\n      });\n\n      var message = this._compile();\n\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n\n      this._verifySignatures(message.serialize(), true);\n    }\n    /**\n     * Partially sign a transaction with the specified accounts. All accounts must\n     * correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     *\n     * All the caveats from the `sign` method apply to `partialSign`\n     */\n\n  }, {\n    key: \"partialSign\",\n    value: function partialSign() {\n      for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        signers[_key4] = arguments[_key4];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n\n      var seen = new Set();\n      var uniqueSigners = [];\n\n      for (var _i2 = 0, _signers2 = signers; _i2 < _signers2.length; _i2++) {\n        var signer = _signers2[_i2];\n        var key = signer.publicKey.toString();\n\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n\n      var message = this._compile();\n\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_partialSign\",\n    value: function _partialSign(message) {\n      var _this2 = this;\n\n      var signData = message.serialize();\n\n      for (var _len5 = arguments.length, signers = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        signers[_key5 - 1] = arguments[_key5];\n      }\n\n      signers.forEach(function (signer) {\n        var signature = nacl.sign.detached(signData, signer.secretKey);\n\n        _this2._addSignature(signer.publicKey, signature);\n      });\n    }\n    /**\n     * Add an externally created signature to a transaction. The public key\n     * must correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     */\n\n  }, {\n    key: \"addSignature\",\n    value: function addSignature(pubkey, signature) {\n      this._compile(); // Ensure signatures array is populated\n\n\n      this._addSignature(pubkey, signature);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_addSignature\",\n    value: function _addSignature(pubkey, signature) {\n      assert(signature.length === 64);\n      var index = this.signatures.findIndex(function (sigpair) {\n        return pubkey.equals(sigpair.publicKey);\n      });\n\n      if (index < 0) {\n        throw new Error(\"unknown signer: \".concat(pubkey.toString()));\n      }\n\n      this.signatures[index].signature = Buffer.from(signature);\n    }\n    /**\n     * Verify signatures of a complete, signed Transaction\n     */\n\n  }, {\n    key: \"verifySignatures\",\n    value: function verifySignatures() {\n      return this._verifySignatures(this.serializeMessage(), true);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_verifySignatures\",\n    value: function _verifySignatures(signData, requireAllSignatures) {\n      var _iterator2 = _createForOfIteratorHelper(this.signatures),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _step2.value,\n              signature = _step2$value.signature,\n              publicKey = _step2$value.publicKey;\n\n          if (signature === null) {\n            if (requireAllSignatures) {\n              return false;\n            }\n          } else {\n            if (!nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())) {\n              return false;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return true;\n    }\n    /**\n     * Serialize the Transaction in the wire format.\n     */\n\n  }, {\n    key: \"serialize\",\n    value: function serialize(config) {\n      var _Object$assign = Object.assign({\n        requireAllSignatures: true,\n        verifySignatures: true\n      }, config),\n          requireAllSignatures = _Object$assign.requireAllSignatures,\n          verifySignatures = _Object$assign.verifySignatures;\n\n      var signData = this.serializeMessage();\n\n      if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n        throw new Error('Signature verification failed');\n      }\n\n      return this._serialize(signData);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_serialize\",\n    value: function _serialize(signData) {\n      var signatures = this.signatures;\n      var signatureCount = [];\n      encodeLength(signatureCount, signatures.length);\n      var transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n      var wireTransaction = Buffer.alloc(transactionLength);\n      assert(signatures.length < 256);\n      Buffer.from(signatureCount).copy(wireTransaction, 0);\n      signatures.forEach(function (_ref2, index) {\n        var signature = _ref2.signature;\n\n        if (signature !== null) {\n          assert(signature.length === 64, \"signature has invalid length\");\n          Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n        }\n      });\n      signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n      assert(wireTransaction.length <= PACKET_DATA_SIZE, \"Transaction too large: \".concat(wireTransaction.length, \" > \").concat(PACKET_DATA_SIZE));\n      return wireTransaction;\n    }\n    /**\n     * Deprecated method\n     * @private\n     */\n\n  }, {\n    key: \"keys\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].keys.map(function (keyObj) {\n        return keyObj.pubkey;\n      });\n    }\n    /**\n     * Deprecated method\n     * @private\n     */\n\n  }, {\n    key: \"programId\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].programId;\n    }\n    /**\n     * Deprecated method\n     * @private\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].data;\n    }\n    /**\n     * Parse a wire transaction into a Transaction object.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n\n      var signatureCount = decodeLength(byteArray);\n      var signatures = [];\n\n      for (var i = 0; i < signatureCount; i++) {\n        var signature = byteArray.slice(0, SIGNATURE_LENGTH);\n        byteArray = byteArray.slice(SIGNATURE_LENGTH);\n        signatures.push(bs58.encode(Buffer.from(signature)));\n      }\n\n      return Transaction.populate(Message.from(byteArray), signatures);\n    }\n    /**\n     * Populate Transaction object from message and signatures\n     */\n\n  }, {\n    key: \"populate\",\n    value: function populate(message, signatures) {\n      var transaction = new Transaction();\n      transaction.recentBlockhash = message.recentBlockhash;\n\n      if (message.header.numRequiredSignatures > 0) {\n        transaction.feePayer = message.accountKeys[0];\n      }\n\n      signatures.forEach(function (signature, index) {\n        var sigPubkeyPair = {\n          signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n          publicKey: message.accountKeys[index]\n        };\n        transaction.signatures.push(sigPubkeyPair);\n      });\n      message.instructions.forEach(function (instruction) {\n        var keys = instruction.accounts.map(function (account) {\n          var pubkey = message.accountKeys[account];\n          return {\n            pubkey: pubkey,\n            isSigner: transaction.signatures.some(function (keyObj) {\n              return keyObj.publicKey.toString() === pubkey.toString();\n            }),\n            isWritable: message.isAccountWritable(account)\n          };\n        });\n        transaction.instructions.push(new TransactionInstruction({\n          keys: keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data)\n        }));\n      });\n      return transaction;\n    }\n  }]);\n\n  return Transaction;\n}();\n\nvar SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nvar SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nvar SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nvar SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nvar SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\nvar SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @private\n */\n\nvar FeeCalculatorLayout = nu64('lamportsPerSignature');\n/**\n * @typedef {Object} FeeCalculator\n * @property {number} lamportsPerSignature lamports Cost in lamports to validate a signature\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @private\n */\n\nvar NonceAccountLayout = struct([u32('version'), u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), struct([FeeCalculatorLayout], 'feeCalculator')]);\nvar NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nvar NonceAccount = /*#__PURE__*/function () {\n  function NonceAccount() {\n    _classCallCheck(this, NonceAccount);\n\n    _defineProperty(this, \"authorizedPubkey\", void 0);\n\n    _defineProperty(this, \"nonce\", void 0);\n\n    _defineProperty(this, \"feeCalculator\", void 0);\n  }\n\n  _createClass(NonceAccount, null, [{\n    key: \"fromAccountData\",\n\n    /**\n     * Deserialize NonceAccount from the account data.\n     *\n     * @param buffer account data\n     * @return NonceAccount\n     */\n    value: function fromAccountData(buffer) {\n      var nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n      nonceAccount.authorizedPubkey = new PublicKey(nonceAccount.authorizedPubkey);\n      nonceAccount.nonce = new PublicKey(nonceAccount.nonce).toString();\n      return nonceAccount;\n    }\n  }]);\n\n  return NonceAccount;\n}(); // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\n\n\nvar NUM_TICKS_PER_SECOND = 160;\n/**\n * @ignore\n */\n\nvar DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @ignore\n */\n\nvar NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @ignore\n */\n\nvar MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND; // zzz\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\nfunction promiseTimeout(promise, timeoutMs) {\n  var timeoutId;\n  var timeoutPromise = new Promise(function (resolve) {\n    timeoutId = setTimeout(function () {\n      return resolve(null);\n    }, timeoutMs);\n  });\n  return Promise.race([promise, timeoutPromise]).then(function (result) {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n\nvar DESTROY_TIMEOUT_MS = 5000;\n\nvar AgentManager = /*#__PURE__*/function () {\n  _createClass(AgentManager, null, [{\n    key: \"_newAgent\",\n    value: function _newAgent(useHttps) {\n      var options = {\n        keepAlive: true,\n        maxSockets: 25\n      };\n\n      if (useHttps) {\n        return new https.Agent(options);\n      } else {\n        return new http.Agent(options);\n      }\n    }\n  }]);\n\n  function AgentManager(useHttps) {\n    _classCallCheck(this, AgentManager);\n\n    _defineProperty(this, \"_agent\", void 0);\n\n    _defineProperty(this, \"_activeRequests\", 0);\n\n    _defineProperty(this, \"_destroyTimeout\", null);\n\n    _defineProperty(this, \"_useHttps\", void 0);\n\n    this._useHttps = useHttps === true;\n    this._agent = AgentManager._newAgent(this._useHttps);\n  }\n\n  _createClass(AgentManager, [{\n    key: \"requestStart\",\n    value: function requestStart() {\n      // $FlowExpectedError - Don't manage agents in the browser\n      if (process.browser) return;\n      this._activeRequests++;\n      clearTimeout(this._destroyTimeout);\n      this._destroyTimeout = null;\n      return this._agent;\n    }\n  }, {\n    key: \"requestEnd\",\n    value: function requestEnd() {\n      var _this = this; // $FlowExpectedError - Don't manage agents in the browser\n\n\n      if (process.browser) return;\n      this._activeRequests--;\n\n      if (this._activeRequests === 0 && this._destroyTimeout === null) {\n        this._destroyTimeout = setTimeout(function () {\n          _this._agent.destroy();\n\n          _this._agent = AgentManager._newAgent(_this._useHttps);\n        }, DESTROY_TIMEOUT_MS);\n      }\n    }\n  }]);\n\n  return AgentManager;\n}();\n\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray$1(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\n\nfunction _arrayLikeToArray$1(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * @private\n */\n\nfunction jsonRpcResultAndContext(resultDescription) {\n  return jsonRpcResult({\n    context: struct$1({\n      slot: 'number'\n    }),\n    value: resultDescription\n  });\n}\n/**\n * @private\n */\n\n\nfunction jsonRpcResult(resultDescription) {\n  var jsonRpcVersion = struct$1.literal('2.0');\n  return struct$1.union([struct$1({\n    jsonrpc: jsonRpcVersion,\n    id: 'string',\n    error: 'any'\n  }), struct$1({\n    jsonrpc: jsonRpcVersion,\n    id: 'string',\n    error: 'null?',\n    result: resultDescription\n  })]);\n}\n/**\n * @private\n */\n\n\nfunction notificationResultAndContext(resultDescription) {\n  return struct$1({\n    context: struct$1({\n      slot: 'number'\n    }),\n    value: resultDescription\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'max':    Query the most recent block which has been finalized by the cluster\n *   'recent': Query the most recent block which has reached 1 confirmation by the connected node\n *   'root':   Query the most recent block which has been rooted by the connected node\n *   'single': Query the most recent block which has reached 1 confirmation by the cluster\n *   'singleGossip': Query the most recent block which has reached 1 confirmation according to votes seen in gossip\n * </pre>\n *\n * @typedef {'max' | 'recent' | 'root' | 'single' | 'singleGossip'} Commitment\n */\n\n\nvar GetInflationGovernorResult = struct$1({\n  foundation: 'number',\n  foundationTerm: 'number',\n  initial: 'number',\n  taper: 'number',\n  terminal: 'number'\n});\n/**\n * Information about the current epoch\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n * @property {number} blockHeight\n * @property {number} transactionCount\n */\n\nvar GetEpochInfoResult = struct$1({\n  epoch: 'number',\n  slotIndex: 'number',\n  slotsInEpoch: 'number',\n  absoluteSlot: 'number',\n  blockHeight: 'number?',\n  transactionCount: 'number?'\n});\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slotsPerEpoch The maximum number of slots in each epoch\n * @property {number} leaderScheduleSlotOffset The number of slots before beginning of an epoch to calculate a leader schedule for that epoch\n * @property {boolean} warmup Indicates whether epochs start short and grow\n * @property {number} firstNormalEpoch The first epoch with `slotsPerEpoch` slots\n * @property {number} firstNormalSlot The first slot of `firstNormalEpoch`\n */\n\nvar GetEpochScheduleResult = struct$1({\n  slotsPerEpoch: 'number',\n  leaderScheduleSlotOffset: 'number',\n  warmup: 'boolean',\n  firstNormalEpoch: 'number',\n  firstNormalSlot: 'number'\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n *\n * @typedef {Object} LeaderSchedule\n */\n\nvar GetLeaderScheduleResult = struct$1.record(['string', 'any' // validating struct.array(['number']) is extremely slow\n]);\n/**\n * Transaction error or null\n */\n\nvar TransactionErrorResult = struct$1.union(['null', 'object']);\n/**\n * Signature status for a transaction\n */\n\nvar SignatureStatusResult = struct$1({\n  err: TransactionErrorResult\n});\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\n\nvar Version = struct$1.pick({\n  'solana-core': 'string',\n  'feature-set': 'number?'\n});\nvar SimulatedTransactionResponseValidator = jsonRpcResultAndContext(struct$1.pick({\n  err: struct$1.union(['null', 'object', 'string']),\n  logs: struct$1.union(['null', struct$1.array(['string'])])\n}));\n\nfunction createRpcRequest(url, useHttps) {\n  var agentManager = new AgentManager(useHttps);\n  var server = jayson( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request, callback) {\n      var agent, options, too_many_requests_retries, res, waitTime, text;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              agent = agentManager.requestStart();\n              options = {\n                method: 'POST',\n                body: request,\n                agent: agent,\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              };\n              _context.prev = 2;\n              too_many_requests_retries = 5;\n              res = {};\n              waitTime = 500;\n\n            case 6:\n              _context.next = 8;\n              return fetch(url, options);\n\n            case 8:\n              res = _context.sent;\n\n              if (!(res.status !== 429\n              /* Too many requests */\n              )) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt(\"break\", 20);\n\n            case 11:\n              too_many_requests_retries -= 1;\n\n              if (!(too_many_requests_retries === 0)) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt(\"break\", 20);\n\n            case 14:\n              console.log(\"Server responded with \".concat(res.status, \" \").concat(res.statusText, \".  Retrying after \").concat(waitTime, \"ms delay...\"));\n              _context.next = 17;\n              return sleep(waitTime);\n\n            case 17:\n              waitTime *= 2;\n\n            case 18:\n              _context.next = 6;\n              break;\n\n            case 20:\n              _context.next = 22;\n              return res.text();\n\n            case 22:\n              text = _context.sent;\n\n              if (res.ok) {\n                callback(null, text);\n              } else {\n                callback(new Error(\"\".concat(res.status, \" \").concat(res.statusText, \": \").concat(text)));\n              }\n\n              _context.next = 29;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](2);\n              callback(_context.t0);\n\n            case 29:\n              _context.prev = 29;\n              agentManager.requestEnd();\n              return _context.finish(29);\n\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 26, 29, 32]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  return function (method, args) {\n    return new Promise(function (resolve, reject) {\n      server.request(method, args, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nvar GetInflationGovernorRpcResult = struct$1({\n  jsonrpc: struct$1.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetInflationGovernorResult\n});\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nvar GetEpochInfoRpcResult = struct$1({\n  jsonrpc: struct$1.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochInfoResult\n});\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nvar GetEpochScheduleRpcResult = struct$1({\n  jsonrpc: struct$1.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochScheduleResult\n});\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nvar GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\n\nvar GetBalanceAndContextRpcResult = jsonRpcResultAndContext('number?');\n/**\n * Expected JSON RPC response for the \"getBlockTime\" message\n */\n\nvar GetBlockTimeRpcResult = struct$1({\n  jsonrpc: struct$1.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: struct$1.union(['null', 'number', 'undefined'])\n});\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nvar SlotRpcResult = struct$1({\n  jsonrpc: struct$1.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number'\n});\n/**\n * Supply\n *\n * @typedef {Object} Supply\n * @property {number} total Total supply in lamports\n * @property {number} circulating Circulating supply in lamports\n * @property {number} nonCirculating Non-circulating supply in lamports\n * @property {Array<PublicKey>} nonCirculatingAccounts List of non-circulating account addresses\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nvar GetSupplyRpcResult = jsonRpcResultAndContext(struct$1({\n  total: 'number',\n  circulating: 'number',\n  nonCirculating: 'number',\n  nonCirculatingAccounts: struct$1.array(['string'])\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n *\n * @typedef {Object} TokenAmount\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nvar TokenAmountResult = struct$1.object({\n  amount: 'string',\n  uiAmount: 'number',\n  decimals: 'number'\n});\n/**\n * Token address and balance.\n *\n * @typedef {Object} TokenAccountBalancePair\n * @property {PublicKey} address Address of the token account\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nvar GetTokenLargestAccountsResult = jsonRpcResultAndContext(struct$1.array([struct$1.pick({\n  address: 'string',\n  amount: 'string',\n  uiAmount: 'number',\n  decimals: 'number'\n})]));\n/**\n * Expected JSON RPC response for the \"getTokenAccountBalance\" message\n */\n\nvar GetTokenAccountBalance = jsonRpcResultAndContext(TokenAmountResult);\n/**\n * Expected JSON RPC response for the \"getTokenSupply\" message\n */\n\nvar GetTokenSupplyRpcResult = jsonRpcResultAndContext(TokenAmountResult);\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nvar GetTokenAccountsByOwner = jsonRpcResultAndContext(struct$1.array([struct$1.object({\n  pubkey: 'string',\n  account: struct$1.object({\n    executable: 'boolean',\n    owner: 'string',\n    lamports: 'number',\n    data: ['string', struct$1.literal('base64')],\n    rentEpoch: 'number?'\n  })\n})]));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nvar GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(struct$1.array([struct$1.object({\n  pubkey: 'string',\n  account: struct$1.object({\n    executable: 'boolean',\n    owner: 'string',\n    lamports: 'number',\n    data: struct$1.pick({\n      program: 'string',\n      parsed: 'any',\n      space: 'number'\n    }),\n    rentEpoch: 'number?'\n  })\n})]));\n/**\n * Pair of an account address and its balance\n *\n * @typedef {Object} AccountBalancePair\n * @property {PublicKey} address\n * @property {number} lamports\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nvar GetLargestAccountsRpcResult = jsonRpcResultAndContext(struct$1.array([struct$1({\n  lamports: 'number',\n  address: 'string'\n})]));\n/**\n * Expected JSON RPC response for the \"getVersion\" message\n */\n\nvar GetVersionRpcResult = struct$1({\n  jsonrpc: struct$1.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: Version\n});\n/**\n * @private\n */\n\nvar AccountInfoResult = struct$1({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?'\n});\n/**\n * @private\n */\n\nvar ParsedAccountInfoResult = struct$1.object({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: struct$1.union([['string', struct$1.literal('base64')], struct$1.pick({\n    program: 'string',\n    parsed: 'any',\n    space: 'number'\n  })]),\n  rentEpoch: 'number?'\n});\n/**\n * @private\n */\n\nvar StakeActivationResult = struct$1.object({\n  state: struct$1.union([struct$1.literal('active'), struct$1.literal('inactive'), struct$1.literal('activating'), struct$1.literal('deactivating')]),\n  active: 'number',\n  inactive: 'number'\n});\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\n\nvar GetAccountInfoAndContextRpcResult = jsonRpcResultAndContext(struct$1.union(['null', AccountInfoResult]));\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message with jsonParsed param\n */\n\nvar GetParsedAccountInfoResult = jsonRpcResultAndContext(struct$1.union(['null', ParsedAccountInfoResult]));\n/**\n * Expected JSON RPC response for the \"getStakeActivation\" message with jsonParsed param\n */\n\nvar GetStakeActivationResult = jsonRpcResult(StakeActivationResult);\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress\" message\n */\n\nvar GetConfirmedSignaturesForAddressRpcResult = jsonRpcResult(struct$1.array(['string']));\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nvar GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(struct$1.array([struct$1.pick({\n  signature: 'string',\n  slot: 'number',\n  err: TransactionErrorResult,\n  memo: struct$1.union(['null', 'string']),\n  blockTime: struct$1.union(['undefined', 'null', 'number'])\n})]));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nvar AccountNotificationResult = struct$1({\n  subscription: 'number',\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @private\n */\n\nvar ProgramAccountInfoResult = struct$1({\n  pubkey: 'string',\n  account: AccountInfoResult\n});\n/**\n * @private\n */\n\nvar ParsedProgramAccountInfoResult = struct$1({\n  pubkey: 'string',\n  account: ParsedAccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nvar ProgramAccountNotificationResult = struct$1({\n  subscription: 'number',\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @private\n */\n\nvar SlotInfoResult = struct$1({\n  parent: 'number',\n  slot: 'number',\n  root: 'number'\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nvar SlotNotificationResult = struct$1({\n  subscription: 'number',\n  result: SlotInfoResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nvar SignatureNotificationResult = struct$1({\n  subscription: 'number',\n  result: notificationResultAndContext(SignatureStatusResult)\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nvar RootNotificationResult = struct$1({\n  subscription: 'number',\n  result: 'number'\n});\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\n\nvar GetProgramAccountsRpcResult = jsonRpcResult(struct$1.array([ProgramAccountInfoResult]));\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\n\nvar GetParsedProgramAccountsRpcResult = jsonRpcResult(struct$1.array([ParsedProgramAccountInfoResult]));\n/**\n * Expected JSON RPC response for the \"getSlot\" message\n */\n\nvar GetSlot = jsonRpcResult('number');\n/**\n * Expected JSON RPC response for the \"getSlotLeader\" message\n */\n\nvar GetSlotLeader = jsonRpcResult('string');\n/**\n * Expected JSON RPC response for the \"getClusterNodes\" message\n */\n\nvar GetClusterNodes = jsonRpcResult(struct$1.array([struct$1.pick({\n  pubkey: 'string',\n  gossip: struct$1.union(['null', 'string']),\n  tpu: struct$1.union(['null', 'string']),\n  rpc: struct$1.union(['null', 'string']),\n  version: struct$1.union(['null', 'string'])\n})]));\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nvar GetVoteAccounts = jsonRpcResult(struct$1({\n  current: struct$1.array([struct$1.pick({\n    votePubkey: 'string',\n    nodePubkey: 'string',\n    activatedStake: 'number',\n    epochVoteAccount: 'boolean',\n    epochCredits: struct$1.array([struct$1.tuple(['number', 'number', 'number'])]),\n    commission: 'number',\n    lastVote: 'number',\n    rootSlot: 'number?'\n  })]),\n  delinquent: struct$1.array([struct$1.pick({\n    votePubkey: 'string',\n    nodePubkey: 'string',\n    activatedStake: 'number',\n    epochVoteAccount: 'boolean',\n    epochCredits: struct$1.array([struct$1.tuple(['number', 'number', 'number'])]),\n    commission: 'number',\n    lastVote: 'number',\n    rootSlot: 'number?'\n  })])\n}));\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nvar GetSignatureStatusesRpcResult = jsonRpcResultAndContext(struct$1.array([struct$1.union(['null', struct$1.pick({\n  slot: 'number',\n  confirmations: struct$1.union(['number', 'null']),\n  err: TransactionErrorResult,\n  confirmationStatus: 'string?'\n})])]));\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\n\nvar GetTransactionCountRpcResult = jsonRpcResult('number');\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\n\nvar GetTotalSupplyRpcResult = jsonRpcResult('number');\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nvar GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult('number');\n/**\n * @private\n */\n\nvar ConfirmedTransactionResult = struct$1({\n  signatures: struct$1.array(['string']),\n  message: struct$1({\n    accountKeys: struct$1.array(['string']),\n    header: struct$1({\n      numRequiredSignatures: 'number',\n      numReadonlySignedAccounts: 'number',\n      numReadonlyUnsignedAccounts: 'number'\n    }),\n    instructions: struct$1.array([struct$1({\n      accounts: struct$1.array(['number']),\n      data: 'string',\n      programIdIndex: 'number'\n    })]),\n    recentBlockhash: 'string'\n  })\n});\n/**\n * @private\n */\n\nvar ParsedConfirmedTransactionResult = struct$1({\n  signatures: struct$1.array(['string']),\n  message: struct$1({\n    accountKeys: struct$1.array([struct$1({\n      pubkey: 'string',\n      signer: 'boolean',\n      writable: 'boolean'\n    })]),\n    instructions: struct$1.array([struct$1.union([struct$1({\n      accounts: struct$1.array(['string']),\n      data: 'string',\n      programId: 'string'\n    }), struct$1({\n      parsed: 'any',\n      program: 'string',\n      programId: 'string'\n    })])]),\n    recentBlockhash: 'string'\n  })\n});\n/**\n * @private\n */\n\nvar ConfirmedTransactionMetaResult = struct$1.union(['null', struct$1.pick({\n  err: TransactionErrorResult,\n  fee: 'number',\n  innerInstructions: struct$1.union([struct$1.array([struct$1({\n    index: 'number',\n    instructions: struct$1.array([struct$1({\n      accounts: struct$1.array(['number']),\n      data: 'string',\n      programIdIndex: 'number'\n    })])\n  })]), 'null', 'undefined']),\n  preBalances: struct$1.array(['number']),\n  postBalances: struct$1.array(['number']),\n  logMessages: struct$1.union([struct$1.array(['string']), 'null', 'undefined']),\n  preTokenBalances: struct$1.union([struct$1.array([struct$1.pick({\n    accountIndex: 'number',\n    mint: 'string',\n    uiTokenAmount: struct$1.pick({\n      amount: 'string',\n      decimals: 'number',\n      uiAmount: 'number'\n    })\n  })]), 'null', 'undefined']),\n  postTokenBalances: struct$1.union([struct$1.array([struct$1.pick({\n    accountIndex: 'number',\n    mint: 'string',\n    uiTokenAmount: struct$1.pick({\n      amount: 'string',\n      decimals: 'number',\n      uiAmount: 'number'\n    })\n  })]), 'null', 'undefined'])\n})]);\n/**\n * @private\n */\n\nvar ParsedConfirmedTransactionMetaResult = struct$1.union(['null', struct$1.pick({\n  err: TransactionErrorResult,\n  fee: 'number',\n  innerInstructions: struct$1.union([struct$1.array([struct$1({\n    index: 'number',\n    instructions: struct$1.array([struct$1.union([struct$1({\n      accounts: struct$1.array(['string']),\n      data: 'string',\n      programId: 'string'\n    }), struct$1({\n      parsed: 'any',\n      program: 'string',\n      programId: 'string'\n    })])])\n  })]), 'null', 'undefined']),\n  preBalances: struct$1.array(['number']),\n  postBalances: struct$1.array(['number']),\n  logMessages: struct$1.union([struct$1.array(['string']), 'null', 'undefined']),\n  preTokenBalances: struct$1.union([struct$1.array([struct$1.pick({\n    accountIndex: 'number',\n    mint: 'string',\n    uiTokenAmount: struct$1.pick({\n      amount: 'string',\n      decimals: 'number',\n      uiAmount: 'number'\n    })\n  })]), 'null', 'undefined']),\n  postTokenBalances: struct$1.union([struct$1.array([struct$1.pick({\n    accountIndex: 'number',\n    mint: 'string',\n    uiTokenAmount: struct$1.pick({\n      amount: 'string',\n      decimals: 'number',\n      uiAmount: 'number'\n    })\n  })]), 'null', 'undefined'])\n})]);\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\n\nvar GetConfirmedBlockRpcResult = jsonRpcResult(struct$1.union(['null', struct$1.pick({\n  blockhash: 'string',\n  previousBlockhash: 'string',\n  parentSlot: 'number',\n  transactions: struct$1.array([struct$1({\n    transaction: ConfirmedTransactionResult,\n    meta: ConfirmedTransactionMetaResult\n  })]),\n  rewards: struct$1.union(['undefined', struct$1.array([struct$1({\n    pubkey: 'string',\n    lamports: 'number',\n    postBalance: struct$1.union(['number', 'undefined']),\n    rewardType: struct$1.union(['string', 'undefined'])\n  })])])\n})]));\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\n\nvar GetConfirmedTransactionRpcResult = jsonRpcResult(struct$1.union(['null', struct$1.pick({\n  slot: 'number',\n  transaction: ConfirmedTransactionResult,\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: struct$1.union(['number', 'null', 'undefined'])\n})]));\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\n\nvar GetParsedConfirmedTransactionRpcResult = jsonRpcResult(struct$1.union(['null', struct$1.pick({\n  slot: 'number',\n  transaction: ParsedConfirmedTransactionResult,\n  meta: ParsedConfirmedTransactionMetaResult,\n  blockTime: struct$1.union(['number', 'null', 'undefined'])\n})]));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\n\nvar GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(struct$1({\n  blockhash: 'string',\n  feeCalculator: struct$1({\n    lamportsPerSignature: 'number'\n  })\n}));\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nvar GetRecentPerformanceSamplesRpcResult = jsonRpcResult(struct$1.array([struct$1.pick({\n  slot: 'number',\n  numTransactions: 'number',\n  numSlots: 'number',\n  samplePeriodSecs: 'number'\n})]));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nvar GetFeeCalculatorRpcResult = jsonRpcResultAndContext(struct$1.union(['null', struct$1({\n  feeCalculator: struct$1({\n    lamportsPerSignature: 'number'\n  })\n})]));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nvar RequestAirdropRpcResult = jsonRpcResult('string');\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nvar SendTransactionRpcResult = jsonRpcResult('string');\n/**\n * Information about the latest slot being processed by a node\n *\n * @typedef {Object} SlotInfo\n * @property {number} slot Currently processing slot\n * @property {number} parent Parent of the current slot\n * @property {number} root The root block of the current slot's fork\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nvar Connection = /*#__PURE__*/function () {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  function Connection(endpoint, commitment) {\n    _classCallCheck(this, Connection);\n\n    _defineProperty(this, \"_rpcEndpoint\", void 0);\n\n    _defineProperty(this, \"_rpcRequest\", void 0);\n\n    _defineProperty(this, \"_rpcWebSocket\", void 0);\n\n    _defineProperty(this, \"_rpcWebSocketConnected\", false);\n\n    _defineProperty(this, \"_rpcWebSocketHeartbeat\", null);\n\n    _defineProperty(this, \"_rpcWebSocketIdleTimeout\", null);\n\n    _defineProperty(this, \"_commitment\", void 0);\n\n    _defineProperty(this, \"_blockhashInfo\", void 0);\n\n    _defineProperty(this, \"_disableBlockhashCaching\", false);\n\n    _defineProperty(this, \"_pollingBlockhash\", false);\n\n    _defineProperty(this, \"_accountChangeSubscriptions\", {});\n\n    _defineProperty(this, \"_accountChangeSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_programAccountChangeSubscriptions\", {});\n\n    _defineProperty(this, \"_programAccountChangeSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_slotSubscriptions\", {});\n\n    _defineProperty(this, \"_slotSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_signatureSubscriptions\", {});\n\n    _defineProperty(this, \"_signatureSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_rootSubscriptions\", {});\n\n    _defineProperty(this, \"_rootSubscriptionCounter\", 0);\n\n    this._rpcEndpoint = endpoint;\n    var url = parse(endpoint);\n    var useHttps = url.protocol === 'https:';\n    this._rpcRequest = createRpcRequest(url.href, useHttps);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: new Date(0),\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    url.protocol = useHttps ? 'wss:' : 'ws:';\n    url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n\n    this._rpcWebSocket = new Client(format(url), {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  _createClass(Connection, [{\n    key: \"getBalanceAndContext\",\n\n    /**\n     * Fetch the balance for the specified public key, return with context\n     */\n    value: function () {\n      var _getBalanceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(publicKey, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment);\n                _context2.next = 3;\n                return this._rpcRequest('getBalance', args);\n\n              case 3:\n                unsafeRes = _context2.sent;\n                res = GetBalanceAndContextRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context2.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getBalanceAndContext(_x3, _x4) {\n        return _getBalanceAndContext.apply(this, arguments);\n      }\n\n      return getBalanceAndContext;\n    }()\n    /**\n     * Fetch the balance for the specified public key\n     */\n\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(publicKey, commitment) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getBalanceAndContext(publicKey, commitment).then(function (x) {\n                  return x.value;\n                })[\"catch\"](function (e) {\n                  throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n                });\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getBalance(_x5, _x6) {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }()\n    /**\n     * Fetch the estimated production time of a block\n     */\n\n  }, {\n    key: \"getBlockTime\",\n    value: function () {\n      var _getBlockTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(slot) {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._rpcRequest('getBlockTime', [slot]);\n\n              case 2:\n                unsafeRes = _context4.sent;\n                res = GetBlockTimeRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n\n              case 6:\n                assert(typeof res.result !== 'undefined');\n                return _context4.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getBlockTime(_x7) {\n        return _getBlockTime.apply(this, arguments);\n      }\n\n      return getBlockTime;\n    }()\n    /**\n     * Fetch the lowest slot that the node has information about in its ledger.\n     * This value may increase over time if the node is configured to purge older ledger data\n     */\n\n  }, {\n    key: \"getMinimumLedgerSlot\",\n    value: function () {\n      var _getMinimumLedgerSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._rpcRequest('minimumLedgerSlot', []);\n\n              case 2:\n                unsafeRes = _context5.sent;\n                res = SlotRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n\n              case 6:\n                assert(typeof res.result !== 'undefined');\n                return _context5.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getMinimumLedgerSlot() {\n        return _getMinimumLedgerSlot.apply(this, arguments);\n      }\n\n      return getMinimumLedgerSlot;\n    }()\n    /**\n     * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n     */\n\n  }, {\n    key: \"getFirstAvailableBlock\",\n    value: function () {\n      var _getFirstAvailableBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._rpcRequest('getFirstAvailableBlock', []);\n\n              case 2:\n                unsafeRes = _context6.sent;\n                res = SlotRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get first available block: ' + res.error.message);\n\n              case 6:\n                assert(typeof res.result !== 'undefined');\n                return _context6.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getFirstAvailableBlock() {\n        return _getFirstAvailableBlock.apply(this, arguments);\n      }\n\n      return getFirstAvailableBlock;\n    }()\n    /**\n     * Fetch information about the current supply\n     */\n\n  }, {\n    key: \"getSupply\",\n    value: function () {\n      var _getSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context7.next = 3;\n                return this._rpcRequest('getSupply', args);\n\n              case 3:\n                unsafeRes = _context7.sent;\n                res = GetSupplyRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context7.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get supply: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                res.result.value.nonCirculatingAccounts = res.result.value.nonCirculatingAccounts.map(function (account) {\n                  return new PublicKey(account);\n                });\n                return _context7.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getSupply(_x8) {\n        return _getSupply.apply(this, arguments);\n      }\n\n      return getSupply;\n    }()\n    /**\n     * Fetch the current supply of a token mint\n     */\n\n  }, {\n    key: \"getTokenSupply\",\n    value: function () {\n      var _getTokenSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(tokenMintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n                _context8.next = 3;\n                return this._rpcRequest('getTokenSupply', args);\n\n              case 3:\n                unsafeRes = _context8.sent;\n                res = GetTokenSupplyRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token supply: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context8.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getTokenSupply(_x9, _x10) {\n        return _getTokenSupply.apply(this, arguments);\n      }\n\n      return getTokenSupply;\n    }()\n    /**\n     * Fetch the current balance of a token account\n     */\n\n  }, {\n    key: \"getTokenAccountBalance\",\n    value: function () {\n      var _getTokenAccountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(tokenAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                args = this._buildArgs([tokenAddress.toBase58()], commitment);\n                _context9.next = 3;\n                return this._rpcRequest('getTokenAccountBalance', args);\n\n              case 3:\n                unsafeRes = _context9.sent;\n                res = GetTokenAccountBalance(unsafeRes);\n\n                if (!res.error) {\n                  _context9.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token account balance: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context9.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getTokenAccountBalance(_x11, _x12) {\n        return _getTokenAccountBalance.apply(this, arguments);\n      }\n\n      return getTokenAccountBalance;\n    }()\n    /**\n     * Fetch all the token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n     */\n\n  }, {\n    key: \"getTokenAccountsByOwner\",\n    value: function () {\n      var _getTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res, result, context, value;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _args = [ownerAddress.toBase58()];\n\n                if (filter.mint) {\n                  _args.push({\n                    mint: filter.mint.toBase58()\n                  });\n                } else {\n                  _args.push({\n                    programId: filter.programId.toBase58()\n                  });\n                }\n\n                args = this._buildArgs(_args, commitment, 'base64');\n                _context10.next = 5;\n                return this._rpcRequest('getTokenAccountsByOwner', args);\n\n              case 5:\n                unsafeRes = _context10.sent;\n                res = GetTokenAccountsByOwner(unsafeRes);\n\n                if (!res.error) {\n                  _context10.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                result = res.result;\n                context = result.context, value = result.value;\n                assert(typeof result !== 'undefined');\n                return _context10.abrupt(\"return\", {\n                  context: context,\n                  value: value.map(function (result) {\n                    assert(result.account.data[1] === 'base64');\n                    return {\n                      pubkey: new PublicKey(result.pubkey),\n                      account: {\n                        executable: result.account.executable,\n                        owner: new PublicKey(result.account.owner),\n                        lamports: result.account.lamports,\n                        data: Buffer.from(result.account.data[0], 'base64')\n                      }\n                    };\n                  })\n                });\n\n              case 13:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getTokenAccountsByOwner(_x13, _x14, _x15) {\n        return _getTokenAccountsByOwner.apply(this, arguments);\n      }\n\n      return getTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch parsed token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n     */\n\n  }, {\n    key: \"getParsedTokenAccountsByOwner\",\n    value: function () {\n      var _getParsedTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res, result, context, value;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _args = [ownerAddress.toBase58()];\n\n                if (filter.mint) {\n                  _args.push({\n                    mint: filter.mint.toBase58()\n                  });\n                } else {\n                  _args.push({\n                    programId: filter.programId.toBase58()\n                  });\n                }\n\n                args = this._buildArgs(_args, commitment, 'jsonParsed');\n                _context11.next = 5;\n                return this._rpcRequest('getTokenAccountsByOwner', args);\n\n              case 5:\n                unsafeRes = _context11.sent;\n                res = GetParsedTokenAccountsByOwner(unsafeRes);\n\n                if (!res.error) {\n                  _context11.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                result = res.result;\n                context = result.context, value = result.value;\n                assert(typeof result !== 'undefined');\n                return _context11.abrupt(\"return\", {\n                  context: context,\n                  value: value.map(function (result) {\n                    return {\n                      pubkey: new PublicKey(result.pubkey),\n                      account: {\n                        executable: result.account.executable,\n                        owner: new PublicKey(result.account.owner),\n                        lamports: result.account.lamports,\n                        data: result.account.data\n                      }\n                    };\n                  })\n                });\n\n              case 13:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getParsedTokenAccountsByOwner(_x16, _x17, _x18) {\n        return _getParsedTokenAccountsByOwner.apply(this, arguments);\n      }\n\n      return getParsedTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch the 20 largest accounts with their current balances\n     */\n\n  }, {\n    key: \"getLargestAccounts\",\n    value: function () {\n      var _getLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(config) {\n        var arg, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                arg = _objectSpread$1(_objectSpread$1({}, config), {}, {\n                  commitment: config && config.commitment || this.commitment\n                });\n                args = arg.filter || arg.commitment ? [arg] : [];\n                _context12.next = 4;\n                return this._rpcRequest('getLargestAccounts', args);\n\n              case 4:\n                unsafeRes = _context12.sent;\n                res = GetLargestAccountsRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context12.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get largest accounts: ' + res.error.message);\n\n              case 8:\n                assert(typeof res.result !== 'undefined');\n                res.result.value = res.result.value.map(function (_ref2) {\n                  var address = _ref2.address,\n                      lamports = _ref2.lamports;\n                  return {\n                    address: new PublicKey(address),\n                    lamports: lamports\n                  };\n                });\n                return _context12.abrupt(\"return\", res.result);\n\n              case 11:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getLargestAccounts(_x19) {\n        return _getLargestAccounts.apply(this, arguments);\n      }\n\n      return getLargestAccounts;\n    }()\n    /**\n     * Fetch the 20 largest token accounts with their current balances\n     * for a given mint.\n     */\n\n  }, {\n    key: \"getTokenLargestAccounts\",\n    value: function () {\n      var _getTokenLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(mintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                args = this._buildArgs([mintAddress.toBase58()], commitment);\n                _context13.next = 3;\n                return this._rpcRequest('getTokenLargestAccounts', args);\n\n              case 3:\n                unsafeRes = _context13.sent;\n                res = GetTokenLargestAccountsResult(unsafeRes);\n\n                if (!res.error) {\n                  _context13.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token largest accounts: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                res.result.value = res.result.value.map(function (pair) {\n                  return _objectSpread$1(_objectSpread$1({}, pair), {}, {\n                    address: new PublicKey(pair.address)\n                  });\n                });\n                return _context13.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getTokenLargestAccounts(_x20, _x21) {\n        return _getTokenLargestAccounts.apply(this, arguments);\n      }\n\n      return getTokenLargestAccounts;\n    }()\n    /**\n     * Fetch all the account info for the specified public key, return with context\n     */\n\n  }, {\n    key: \"getAccountInfoAndContext\",\n    value: function () {\n      var _getAccountInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(publicKey, commitment) {\n        var args, unsafeRes, res, value, _res$result$value, executable, owner, lamports, data;\n\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n                _context14.next = 3;\n                return this._rpcRequest('getAccountInfo', args);\n\n              case 3:\n                unsafeRes = _context14.sent;\n                res = GetAccountInfoAndContextRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                value = null;\n\n                if (res.result.value) {\n                  _res$result$value = res.result.value, executable = _res$result$value.executable, owner = _res$result$value.owner, lamports = _res$result$value.lamports, data = _res$result$value.data;\n                  assert(data[1] === 'base64');\n                  value = {\n                    executable: executable,\n                    owner: new PublicKey(owner),\n                    lamports: lamports,\n                    data: Buffer.from(data[0], 'base64')\n                  };\n                }\n\n                return _context14.abrupt(\"return\", {\n                  context: {\n                    slot: res.result.context.slot\n                  },\n                  value: value\n                });\n\n              case 11:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getAccountInfoAndContext(_x22, _x23) {\n        return _getAccountInfoAndContext.apply(this, arguments);\n      }\n\n      return getAccountInfoAndContext;\n    }()\n    /**\n     * Fetch parsed account info for the specified public key\n     */\n\n  }, {\n    key: \"getParsedAccountInfo\",\n    value: function () {\n      var _getParsedAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(publicKey, commitment) {\n        var args, unsafeRes, res, value, _res$result$value2, executable, owner, lamports, resultData, data;\n\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n                _context15.next = 3;\n                return this._rpcRequest('getAccountInfo', args);\n\n              case 3:\n                unsafeRes = _context15.sent;\n                res = GetParsedAccountInfoResult(unsafeRes);\n\n                if (!res.error) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                value = null;\n\n                if (res.result.value) {\n                  _res$result$value2 = res.result.value, executable = _res$result$value2.executable, owner = _res$result$value2.owner, lamports = _res$result$value2.lamports, resultData = _res$result$value2.data;\n                  data = resultData;\n\n                  if (!data.program) {\n                    assert(data[1] === 'base64');\n                    data = Buffer.from(data[0], 'base64');\n                  }\n\n                  value = {\n                    executable: executable,\n                    owner: new PublicKey(owner),\n                    lamports: lamports,\n                    data: data\n                  };\n                }\n\n                return _context15.abrupt(\"return\", {\n                  context: {\n                    slot: res.result.context.slot\n                  },\n                  value: value\n                });\n\n              case 11:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getParsedAccountInfo(_x24, _x25) {\n        return _getParsedAccountInfo.apply(this, arguments);\n      }\n\n      return getParsedAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for the specified public key\n     */\n\n  }, {\n    key: \"getAccountInfo\",\n    value: function () {\n      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(publicKey, commitment) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.getAccountInfoAndContext(publicKey, commitment).then(function (x) {\n                  return x.value;\n                })[\"catch\"](function (e) {\n                  throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n                });\n\n              case 2:\n                return _context16.abrupt(\"return\", _context16.sent);\n\n              case 3:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getAccountInfo(_x26, _x27) {\n        return _getAccountInfo.apply(this, arguments);\n      }\n\n      return getAccountInfo;\n    }()\n    /**\n     * Returns epoch activation information for a stake account that has been delegated\n     */\n\n  }, {\n    key: \"getStakeActivation\",\n    value: function () {\n      var _getStakeActivation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(publicKey, commitment, epoch) {\n        var args, unsafeRes, res, _res$result, state, active, inactive;\n\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n                  epoch: epoch\n                } : undefined);\n                _context17.next = 3;\n                return this._rpcRequest('getStakeActivation', args);\n\n              case 3:\n                unsafeRes = _context17.sent;\n                res = GetStakeActivationResult(unsafeRes);\n\n                if (!res.error) {\n                  _context17.next = 7;\n                  break;\n                }\n\n                throw new Error(\"failed to get Stake Activation \".concat(publicKey.toBase58(), \": \").concat(res.error.message));\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                _res$result = res.result, state = _res$result.state, active = _res$result.active, inactive = _res$result.inactive;\n                return _context17.abrupt(\"return\", {\n                  state: state,\n                  active: active,\n                  inactive: inactive\n                });\n\n              case 10:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getStakeActivation(_x28, _x29, _x30) {\n        return _getStakeActivation.apply(this, arguments);\n      }\n\n      return getStakeActivation;\n    }()\n    /**\n     * Fetch all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n     */\n\n  }, {\n    key: \"getProgramAccounts\",\n    value: function () {\n      var _getProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(programId, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                args = this._buildArgs([programId.toBase58()], commitment, 'base64');\n                _context18.next = 3;\n                return this._rpcRequest('getProgramAccounts', args);\n\n              case 3:\n                unsafeRes = _context18.sent;\n                res = GetProgramAccountsRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context18.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                result = res.result;\n                assert(typeof result !== 'undefined');\n                return _context18.abrupt(\"return\", result.map(function (result) {\n                  assert(result.account.data[1] === 'base64');\n                  return {\n                    pubkey: new PublicKey(result.pubkey),\n                    account: {\n                      executable: result.account.executable,\n                      owner: new PublicKey(result.account.owner),\n                      lamports: result.account.lamports,\n                      data: Buffer.from(result.account.data[0], 'base64')\n                    }\n                  };\n                }));\n\n              case 10:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function getProgramAccounts(_x31, _x32) {\n        return _getProgramAccounts.apply(this, arguments);\n      }\n\n      return getProgramAccounts;\n    }()\n    /**\n     * Fetch and parse all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n     */\n\n  }, {\n    key: \"getParsedProgramAccounts\",\n    value: function () {\n      var _getParsedProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(programId, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed');\n                _context19.next = 3;\n                return this._rpcRequest('getProgramAccounts', args);\n\n              case 3:\n                unsafeRes = _context19.sent;\n                res = GetParsedProgramAccountsRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context19.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                result = res.result;\n                assert(typeof result !== 'undefined');\n                return _context19.abrupt(\"return\", result.map(function (result) {\n                  var resultData = result.account.data;\n                  var data = resultData;\n\n                  if (!data.program) {\n                    assert(data[1] === 'base64');\n                    data = Buffer.from(data[0], 'base64');\n                  }\n\n                  return {\n                    pubkey: new PublicKey(result.pubkey),\n                    account: {\n                      executable: result.account.executable,\n                      owner: new PublicKey(result.account.owner),\n                      lamports: result.account.lamports,\n                      data: data\n                    }\n                  };\n                }));\n\n              case 10:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getParsedProgramAccounts(_x33, _x34) {\n        return _getParsedProgramAccounts.apply(this, arguments);\n      }\n\n      return getParsedProgramAccounts;\n    }()\n    /**\n     * Confirm the transaction identified by the specified signature.\n     */\n\n  }, {\n    key: \"confirmTransaction\",\n    value: function () {\n      var _confirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(signature, commitment) {\n        var _this = this;\n\n        var decodedSignature, start, subscriptionCommitment, subscriptionId, response, confirmPromise, timeoutMs, duration;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.prev = 0;\n                decodedSignature = bs58.decode(signature);\n                _context20.next = 7;\n                break;\n\n              case 4:\n                _context20.prev = 4;\n                _context20.t0 = _context20[\"catch\"](0);\n                throw new Error('signature must be base58 encoded: ' + signature);\n\n              case 7:\n                assert(decodedSignature.length === 64, 'signature has invalid length');\n                start = Date.now();\n                subscriptionCommitment = commitment || this.commitment;\n                response = null;\n                confirmPromise = new Promise(function (resolve, reject) {\n                  try {\n                    subscriptionId = _this.onSignature(signature, function (result, context) {\n                      subscriptionId = undefined;\n                      response = {\n                        context: context,\n                        value: result\n                      };\n                      resolve();\n                    }, subscriptionCommitment);\n                  } catch (err) {\n                    reject(err);\n                  }\n                });\n                timeoutMs = 60 * 1000;\n                _context20.t1 = subscriptionCommitment;\n                _context20.next = _context20.t1 === 'recent' ? 16 : _context20.t1 === 'single' ? 16 : _context20.t1 === 'singleGossip' ? 16 : _context20.t1 === 'max' ? 18 : _context20.t1 === 'root' ? 18 : 18;\n                break;\n\n              case 16:\n                timeoutMs = 30 * 1000;\n                return _context20.abrupt(\"break\", 18);\n\n              case 18:\n                _context20.prev = 18;\n                _context20.next = 21;\n                return promiseTimeout(confirmPromise, timeoutMs);\n\n              case 21:\n                _context20.prev = 21;\n\n                if (subscriptionId) {\n                  this.removeSignatureListener(subscriptionId);\n                }\n\n                return _context20.finish(21);\n\n              case 24:\n                if (!(response === null)) {\n                  _context20.next = 27;\n                  break;\n                }\n\n                duration = (Date.now() - start) / 1000;\n                throw new Error(\"Transaction was not confirmed in \".concat(duration.toFixed(2), \" seconds. It is unknown if it succeeded or failed. Check signature \").concat(signature, \" using the Solana Explorer or CLI tools.\"));\n\n              case 27:\n                return _context20.abrupt(\"return\", response);\n\n              case 28:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this, [[0, 4], [18,, 21, 24]]);\n      }));\n\n      function confirmTransaction(_x35, _x36) {\n        return _confirmTransaction.apply(this, arguments);\n      }\n\n      return confirmTransaction;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n\n  }, {\n    key: \"getClusterNodes\",\n    value: function () {\n      var _getClusterNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this._rpcRequest('getClusterNodes', []);\n\n              case 2:\n                unsafeRes = _context21.sent;\n                res = GetClusterNodes(unsafeRes);\n\n                if (!res.error) {\n                  _context21.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get cluster nodes: ' + res.error.message);\n\n              case 6:\n                assert(typeof res.result !== 'undefined');\n                return _context21.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function getClusterNodes() {\n        return _getClusterNodes.apply(this, arguments);\n      }\n\n      return getClusterNodes;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n\n  }, {\n    key: \"getVoteAccounts\",\n    value: function () {\n      var _getVoteAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context22.next = 3;\n                return this._rpcRequest('getVoteAccounts', args);\n\n              case 3:\n                unsafeRes = _context22.sent;\n                res = GetVoteAccounts(unsafeRes); //const res = unsafeRes;\n\n                if (!res.error) {\n                  _context22.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get vote accounts: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context22.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function getVoteAccounts(_x37) {\n        return _getVoteAccounts.apply(this, arguments);\n      }\n\n      return getVoteAccounts;\n    }()\n    /**\n     * Fetch the current slot that the node is processing\n     */\n\n  }, {\n    key: \"getSlot\",\n    value: function () {\n      var _getSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context23.next = 3;\n                return this._rpcRequest('getSlot', args);\n\n              case 3:\n                unsafeRes = _context23.sent;\n                res = GetSlot(unsafeRes);\n\n                if (!res.error) {\n                  _context23.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get slot: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context23.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getSlot(_x38) {\n        return _getSlot.apply(this, arguments);\n      }\n\n      return getSlot;\n    }()\n    /**\n     * Fetch the current slot leader of the cluster\n     */\n\n  }, {\n    key: \"getSlotLeader\",\n    value: function () {\n      var _getSlotLeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context24.next = 3;\n                return this._rpcRequest('getSlotLeader', args);\n\n              case 3:\n                unsafeRes = _context24.sent;\n                res = GetSlotLeader(unsafeRes);\n\n                if (!res.error) {\n                  _context24.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get slot leader: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context24.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function getSlotLeader(_x39) {\n        return _getSlotLeader.apply(this, arguments);\n      }\n\n      return getSlotLeader;\n    }()\n    /**\n     * Fetch the current status of a signature\n     */\n\n  }, {\n    key: \"getSignatureStatus\",\n    value: function () {\n      var _getSignatureStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(signature, config) {\n        var _yield$this$getSignat, context, value;\n\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return this.getSignatureStatuses([signature], config);\n\n              case 2:\n                _yield$this$getSignat = _context25.sent;\n                context = _yield$this$getSignat.context;\n                value = _yield$this$getSignat.value;\n                assert(value.length === 1);\n                return _context25.abrupt(\"return\", {\n                  context: context,\n                  value: value[0]\n                });\n\n              case 7:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function getSignatureStatus(_x40, _x41) {\n        return _getSignatureStatus.apply(this, arguments);\n      }\n\n      return getSignatureStatus;\n    }()\n    /**\n     * Fetch the current statuses of a batch of signatures\n     */\n\n  }, {\n    key: \"getSignatureStatuses\",\n    value: function () {\n      var _getSignatureStatuses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(signatures, config) {\n        var params, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                params = [signatures];\n\n                if (config) {\n                  params.push(config);\n                }\n\n                _context26.next = 4;\n                return this._rpcRequest('getSignatureStatuses', params);\n\n              case 4:\n                unsafeRes = _context26.sent;\n                res = GetSignatureStatusesRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context26.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get signature status: ' + res.error.message);\n\n              case 8:\n                assert(typeof res.result !== 'undefined');\n                return _context26.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function getSignatureStatuses(_x42, _x43) {\n        return _getSignatureStatuses.apply(this, arguments);\n      }\n\n      return getSignatureStatuses;\n    }()\n    /**\n     * Fetch the current transaction count of the cluster\n     */\n\n  }, {\n    key: \"getTransactionCount\",\n    value: function () {\n      var _getTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context27.next = 3;\n                return this._rpcRequest('getTransactionCount', args);\n\n              case 3:\n                unsafeRes = _context27.sent;\n                res = GetTransactionCountRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context27.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get transaction count: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context27.abrupt(\"return\", Number(res.result));\n\n              case 9:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function getTransactionCount(_x44) {\n        return _getTransactionCount.apply(this, arguments);\n      }\n\n      return getTransactionCount;\n    }()\n    /**\n     * Fetch the current total currency supply of the cluster in lamports\n     */\n\n  }, {\n    key: \"getTotalSupply\",\n    value: function () {\n      var _getTotalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context28.next = 3;\n                return this._rpcRequest('getTotalSupply', args);\n\n              case 3:\n                unsafeRes = _context28.sent;\n                res = GetTotalSupplyRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context28.next = 7;\n                  break;\n                }\n\n                throw new Error('faied to get total supply: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context28.abrupt(\"return\", Number(res.result));\n\n              case 9:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function getTotalSupply(_x45) {\n        return _getTotalSupply.apply(this, arguments);\n      }\n\n      return getTotalSupply;\n    }()\n    /**\n     * Fetch the cluster InflationGovernor parameters\n     */\n\n  }, {\n    key: \"getInflationGovernor\",\n    value: function () {\n      var _getInflationGovernor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context29.next = 3;\n                return this._rpcRequest('getInflationGovernor', args);\n\n              case 3:\n                unsafeRes = _context29.sent;\n                res = GetInflationGovernorRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context29.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get inflation: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context29.abrupt(\"return\", GetInflationGovernorResult(res.result));\n\n              case 9:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function getInflationGovernor(_x46) {\n        return _getInflationGovernor.apply(this, arguments);\n      }\n\n      return getInflationGovernor;\n    }()\n    /**\n     * Fetch the Epoch Info parameters\n     */\n\n  }, {\n    key: \"getEpochInfo\",\n    value: function () {\n      var _getEpochInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context30.next = 3;\n                return this._rpcRequest('getEpochInfo', args);\n\n              case 3:\n                unsafeRes = _context30.sent;\n                res = GetEpochInfoRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context30.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get epoch info: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context30.abrupt(\"return\", GetEpochInfoResult(res.result));\n\n              case 9:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function getEpochInfo(_x47) {\n        return _getEpochInfo.apply(this, arguments);\n      }\n\n      return getEpochInfo;\n    }()\n    /**\n     * Fetch the Epoch Schedule parameters\n     */\n\n  }, {\n    key: \"getEpochSchedule\",\n    value: function () {\n      var _getEpochSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.next = 2;\n                return this._rpcRequest('getEpochSchedule', []);\n\n              case 2:\n                unsafeRes = _context31.sent;\n                res = GetEpochScheduleRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context31.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get epoch schedule: ' + res.error.message);\n\n              case 6:\n                assert(typeof res.result !== 'undefined');\n                return _context31.abrupt(\"return\", GetEpochScheduleResult(res.result));\n\n              case 8:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function getEpochSchedule() {\n        return _getEpochSchedule.apply(this, arguments);\n      }\n\n      return getEpochSchedule;\n    }()\n    /**\n     * Fetch the leader schedule for the current epoch\n     * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n     */\n\n  }, {\n    key: \"getLeaderSchedule\",\n    value: function () {\n      var _getLeaderSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _context32.next = 2;\n                return this._rpcRequest('getLeaderSchedule', []);\n\n              case 2:\n                unsafeRes = _context32.sent;\n                res = GetLeaderScheduleRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context32.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get leader schedule: ' + res.error.message);\n\n              case 6:\n                assert(typeof res.result !== 'undefined');\n                return _context32.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function getLeaderSchedule() {\n        return _getLeaderSchedule.apply(this, arguments);\n      }\n\n      return getLeaderSchedule;\n    }()\n    /**\n     * Fetch the minimum balance needed to exempt an account of `dataLength`\n     * size from rent\n     */\n\n  }, {\n    key: \"getMinimumBalanceForRentExemption\",\n    value: function () {\n      var _getMinimumBalanceForRentExemption = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(dataLength, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                args = this._buildArgs([dataLength], commitment);\n                _context33.next = 3;\n                return this._rpcRequest('getMinimumBalanceForRentExemption', args);\n\n              case 3:\n                unsafeRes = _context33.sent;\n                res = GetMinimumBalanceForRentExemptionRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context33.next = 8;\n                  break;\n                }\n\n                console.warn('Unable to fetch minimum balance for rent exemption');\n                return _context33.abrupt(\"return\", 0);\n\n              case 8:\n                assert(typeof res.result !== 'undefined');\n                return _context33.abrupt(\"return\", Number(res.result));\n\n              case 10:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n\n      function getMinimumBalanceForRentExemption(_x48, _x49) {\n        return _getMinimumBalanceForRentExemption.apply(this, arguments);\n      }\n\n      return getMinimumBalanceForRentExemption;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster, return with context\n     * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n     */\n\n  }, {\n    key: \"getRecentBlockhashAndContext\",\n    value: function () {\n      var _getRecentBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context34.next = 3;\n                return this._rpcRequest('getRecentBlockhash', args);\n\n              case 3:\n                unsafeRes = _context34.sent;\n                res = GetRecentBlockhashAndContextRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context34.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get recent blockhash: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context34.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n\n      function getRecentBlockhashAndContext(_x50) {\n        return _getRecentBlockhashAndContext.apply(this, arguments);\n      }\n\n      return getRecentBlockhashAndContext;\n    }()\n    /**\n     * Fetch recent performance samples\n     * @return {Promise<Array<PerfSample>>}\n     */\n\n  }, {\n    key: \"getRecentPerformanceSamples\",\n    value: function () {\n      var _getRecentPerformanceSamples = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(limit) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                args = this._buildArgs(limit ? [limit] : []);\n                _context35.next = 3;\n                return this._rpcRequest('getRecentPerformanceSamples', args);\n\n              case 3:\n                unsafeRes = _context35.sent;\n                res = GetRecentPerformanceSamplesRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context35.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get recent performance samples: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                return _context35.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n\n      function getRecentPerformanceSamples(_x51) {\n        return _getRecentPerformanceSamples.apply(this, arguments);\n      }\n\n      return getRecentPerformanceSamples;\n    }()\n    /**\n     * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n     */\n\n  }, {\n    key: \"getFeeCalculatorForBlockhash\",\n    value: function () {\n      var _getFeeCalculatorForBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(blockhash, commitment) {\n        var args, unsafeRes, res, _res$result2, context, value;\n\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                args = this._buildArgs([blockhash], commitment);\n                _context36.next = 3;\n                return this._rpcRequest('getFeeCalculatorForBlockhash', args);\n\n              case 3:\n                unsafeRes = _context36.sent;\n                res = GetFeeCalculatorRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context36.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get fee calculator: ' + res.error.message);\n\n              case 7:\n                assert(typeof res.result !== 'undefined');\n                _res$result2 = res.result, context = _res$result2.context, value = _res$result2.value;\n                return _context36.abrupt(\"return\", {\n                  context: context,\n                  value: value && value.feeCalculator\n                });\n\n              case 10:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n\n      function getFeeCalculatorForBlockhash(_x52, _x53) {\n        return _getFeeCalculatorForBlockhash.apply(this, arguments);\n      }\n\n      return getFeeCalculatorForBlockhash;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster\n     * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n     */\n\n  }, {\n    key: \"getRecentBlockhash\",\n    value: function () {\n      var _getRecentBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(commitment) {\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                _context37.next = 2;\n                return this.getRecentBlockhashAndContext(commitment).then(function (x) {\n                  return x.value;\n                })[\"catch\"](function (e) {\n                  throw new Error('failed to get recent blockhash: ' + e);\n                });\n\n              case 2:\n                return _context37.abrupt(\"return\", _context37.sent);\n\n              case 3:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n\n      function getRecentBlockhash(_x54) {\n        return _getRecentBlockhash.apply(this, arguments);\n      }\n\n      return getRecentBlockhash;\n    }()\n    /**\n     * Fetch the node version\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                _context38.next = 2;\n                return this._rpcRequest('getVersion', []);\n\n              case 2:\n                unsafeRes = _context38.sent;\n                res = GetVersionRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context38.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get version: ' + res.error.message);\n\n              case 6:\n                assert(typeof res.result !== 'undefined');\n                return _context38.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n\n      function getVersion() {\n        return _getVersion.apply(this, arguments);\n      }\n\n      return getVersion;\n    }()\n    /**\n     * Fetch a list of Transactions and transaction statuses from the cluster\n     * for a confirmed block\n     */\n\n  }, {\n    key: \"getConfirmedBlock\",\n    value: function () {\n      var _getConfirmedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(slot) {\n        var unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                _context39.next = 2;\n                return this._rpcRequest('getConfirmedBlock', [slot]);\n\n              case 2:\n                unsafeRes = _context39.sent;\n                res = GetConfirmedBlockRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context39.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed block: ' + res.error.message);\n\n              case 6:\n                result = res.result;\n                assert(typeof result !== 'undefined');\n\n                if (result) {\n                  _context39.next = 10;\n                  break;\n                }\n\n                throw new Error('Confirmed block ' + slot + ' not found');\n\n              case 10:\n                return _context39.abrupt(\"return\", {\n                  blockhash: new PublicKey(result.blockhash).toString(),\n                  previousBlockhash: new PublicKey(result.previousBlockhash).toString(),\n                  parentSlot: result.parentSlot,\n                  transactions: result.transactions.map(function (result) {\n                    var _result$transaction = result.transaction,\n                        message = _result$transaction.message,\n                        signatures = _result$transaction.signatures;\n                    return {\n                      transaction: Transaction.populate(new Message(message), signatures),\n                      meta: result.meta\n                    };\n                  }),\n                  rewards: result.rewards || []\n                });\n\n              case 11:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n\n      function getConfirmedBlock(_x55) {\n        return _getConfirmedBlock.apply(this, arguments);\n      }\n\n      return getConfirmedBlock;\n    }()\n    /**\n     * Fetch a transaction details for a confirmed transaction\n     */\n\n  }, {\n    key: \"getConfirmedTransaction\",\n    value: function () {\n      var _getConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40(signature) {\n        var unsafeRes, _GetConfirmedTransact, result, error, _result$transaction2, message, signatures;\n\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                _context40.next = 2;\n                return this._rpcRequest('getConfirmedTransaction', [signature]);\n\n              case 2:\n                unsafeRes = _context40.sent;\n                _GetConfirmedTransact = GetConfirmedTransactionRpcResult(unsafeRes), result = _GetConfirmedTransact.result, error = _GetConfirmedTransact.error;\n\n                if (!error) {\n                  _context40.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed transaction: ' + error.message);\n\n              case 6:\n                assert(typeof result !== 'undefined');\n\n                if (!(result === null)) {\n                  _context40.next = 9;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", result);\n\n              case 9:\n                _result$transaction2 = result.transaction, message = _result$transaction2.message, signatures = _result$transaction2.signatures;\n                return _context40.abrupt(\"return\", {\n                  slot: result.slot,\n                  transaction: Transaction.populate(new Message(message), signatures),\n                  meta: result.meta\n                });\n\n              case 11:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n\n      function getConfirmedTransaction(_x56) {\n        return _getConfirmedTransaction.apply(this, arguments);\n      }\n\n      return getConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed transaction\n     */\n\n  }, {\n    key: \"getParsedConfirmedTransaction\",\n    value: function () {\n      var _getParsedConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(signature) {\n        var unsafeRes, _GetParsedConfirmedTr, result, error, _result$transaction$m, accountKeys, instructions, recentBlockhash;\n\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                _context41.next = 2;\n                return this._rpcRequest('getConfirmedTransaction', [signature, 'jsonParsed']);\n\n              case 2:\n                unsafeRes = _context41.sent;\n                _GetParsedConfirmedTr = GetParsedConfirmedTransactionRpcResult(unsafeRes), result = _GetParsedConfirmedTr.result, error = _GetParsedConfirmedTr.error;\n\n                if (!error) {\n                  _context41.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed transaction: ' + error.message);\n\n              case 6:\n                assert(typeof result !== 'undefined');\n\n                if (!(result === null)) {\n                  _context41.next = 9;\n                  break;\n                }\n\n                return _context41.abrupt(\"return\", result);\n\n              case 9:\n                if (result.meta.innerInstructions) {\n                  result.meta.innerInstructions.forEach(function (inner) {\n                    inner.instructions.forEach(function (ix) {\n                      ix.programId = new PublicKey(ix.programId);\n\n                      if (ix.accounts) {\n                        ix.accounts = ix.accounts.map(function (account) {\n                          return new PublicKey(account);\n                        });\n                      }\n                    });\n                  });\n                }\n\n                _result$transaction$m = result.transaction.message, accountKeys = _result$transaction$m.accountKeys, instructions = _result$transaction$m.instructions, recentBlockhash = _result$transaction$m.recentBlockhash;\n                return _context41.abrupt(\"return\", {\n                  slot: result.slot,\n                  meta: result.meta,\n                  transaction: {\n                    signatures: result.transaction.signatures,\n                    message: {\n                      accountKeys: accountKeys.map(function (accountKey) {\n                        return {\n                          pubkey: new PublicKey(accountKey.pubkey),\n                          signer: accountKey.signer,\n                          writable: accountKey.writable\n                        };\n                      }),\n                      instructions: instructions.map(function (ix) {\n                        var mapped = {\n                          programId: new PublicKey(ix.programId)\n                        };\n\n                        if ('accounts' in ix) {\n                          mapped.accounts = ix.accounts.map(function (key) {\n                            return new PublicKey(key);\n                          });\n                        }\n\n                        return _objectSpread$1(_objectSpread$1({}, ix), mapped);\n                      }),\n                      recentBlockhash: recentBlockhash\n                    }\n                  }\n                });\n\n              case 12:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n\n      function getParsedConfirmedTransaction(_x57) {\n        return _getParsedConfirmedTransaction.apply(this, arguments);\n      }\n\n      return getParsedConfirmedTransaction;\n    }()\n    /**\n     * Fetch a list of all the confirmed signatures for transactions involving an address\n     * within a specified slot range. Max range allowed is 10,000 slots.\n     *\n     * @param address queried address\n     * @param startSlot start slot, inclusive\n     * @param endSlot end slot, inclusive\n     */\n\n  }, {\n    key: \"getConfirmedSignaturesForAddress\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42(address, startSlot, endSlot) {\n        var unsafeRes, result;\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                _context42.next = 2;\n                return this._rpcRequest('getConfirmedSignaturesForAddress', [address.toBase58(), startSlot, endSlot]);\n\n              case 2:\n                unsafeRes = _context42.sent;\n                result = GetConfirmedSignaturesForAddressRpcResult(unsafeRes);\n\n                if (!result.error) {\n                  _context42.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed signatures for address: ' + result.error.message);\n\n              case 6:\n                assert(typeof result.result !== 'undefined');\n                return _context42.abrupt(\"return\", result.result);\n\n              case 8:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this);\n      }));\n\n      function getConfirmedSignaturesForAddress(_x58, _x59, _x60) {\n        return _getConfirmedSignaturesForAddress.apply(this, arguments);\n      }\n\n      return getConfirmedSignaturesForAddress;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n\n  }, {\n    key: \"getConfirmedSignaturesForAddress2\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43(address, options) {\n        var unsafeRes, result;\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                _context43.next = 2;\n                return this._rpcRequest('getConfirmedSignaturesForAddress2', [address.toBase58(), options]);\n\n              case 2:\n                unsafeRes = _context43.sent;\n                result = GetConfirmedSignaturesForAddress2RpcResult(unsafeRes);\n\n                if (!result.error) {\n                  _context43.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed signatures for address: ' + result.error.message);\n\n              case 6:\n                assert(typeof result.result !== 'undefined');\n                return _context43.abrupt(\"return\", result.result);\n\n              case 8:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n\n      function getConfirmedSignaturesForAddress2(_x61, _x62) {\n        return _getConfirmedSignaturesForAddress2.apply(this, arguments);\n      }\n\n      return getConfirmedSignaturesForAddress2;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster, return with context\n     */\n\n  }, {\n    key: \"getNonceAndContext\",\n    value: function () {\n      var _getNonceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44(nonceAccount, commitment) {\n        var _yield$this$getAccoun, context, accountInfo, value;\n\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                _context44.next = 2;\n                return this.getAccountInfoAndContext(nonceAccount, commitment);\n\n              case 2:\n                _yield$this$getAccoun = _context44.sent;\n                context = _yield$this$getAccoun.context;\n                accountInfo = _yield$this$getAccoun.value;\n                value = null;\n\n                if (accountInfo !== null) {\n                  value = NonceAccount.fromAccountData(accountInfo.data);\n                }\n\n                return _context44.abrupt(\"return\", {\n                  context: context,\n                  value: value\n                });\n\n              case 8:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this);\n      }));\n\n      function getNonceAndContext(_x63, _x64) {\n        return _getNonceAndContext.apply(this, arguments);\n      }\n\n      return getNonceAndContext;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster\n     */\n\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45(nonceAccount, commitment) {\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                _context45.next = 2;\n                return this.getNonceAndContext(nonceAccount, commitment).then(function (x) {\n                  return x.value;\n                })[\"catch\"](function (e) {\n                  throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n                });\n\n              case 2:\n                return _context45.abrupt(\"return\", _context45.sent);\n\n              case 3:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this);\n      }));\n\n      function getNonce(_x65, _x66) {\n        return _getNonce.apply(this, arguments);\n      }\n\n      return getNonce;\n    }()\n    /**\n     * Request an allocation of lamports to the specified account\n     */\n\n  }, {\n    key: \"requestAirdrop\",\n    value: function () {\n      var _requestAirdrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46(to, amount) {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                _context46.next = 2;\n                return this._rpcRequest('requestAirdrop', [to.toBase58(), amount]);\n\n              case 2:\n                unsafeRes = _context46.sent;\n                res = RequestAirdropRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context46.next = 6;\n                  break;\n                }\n\n                throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n\n              case 6:\n                assert(typeof res.result !== 'undefined');\n                return _context46.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, this);\n      }));\n\n      function requestAirdrop(_x67, _x68) {\n        return _requestAirdrop.apply(this, arguments);\n      }\n\n      return requestAirdrop;\n    }()\n  }, {\n    key: \"_recentBlockhash\",\n    value: function () {\n      var _recentBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47(disableCache) {\n        var expired;\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                if (disableCache) {\n                  _context47.next = 9;\n                  break;\n                }\n\n              case 1:\n                if (!this._pollingBlockhash) {\n                  _context47.next = 6;\n                  break;\n                }\n\n                _context47.next = 4;\n                return sleep(100);\n\n              case 4:\n                _context47.next = 1;\n                break;\n\n              case 6:\n                // Attempt to use a recent blockhash for up to 30 seconds\n                expired = Date.now() - this._blockhashInfo.lastFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n                if (!(this._blockhashInfo.recentBlockhash !== null && !expired)) {\n                  _context47.next = 9;\n                  break;\n                }\n\n                return _context47.abrupt(\"return\", this._blockhashInfo.recentBlockhash);\n\n              case 9:\n                _context47.next = 11;\n                return this._pollNewBlockhash();\n\n              case 11:\n                return _context47.abrupt(\"return\", _context47.sent);\n\n              case 12:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47, this);\n      }));\n\n      function _recentBlockhash(_x69) {\n        return _recentBlockhash2.apply(this, arguments);\n      }\n\n      return _recentBlockhash;\n    }()\n  }, {\n    key: \"_pollNewBlockhash\",\n    value: function () {\n      var _pollNewBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48() {\n        var startTime, i, _yield$this$getRecent, blockhash;\n\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                this._pollingBlockhash = true;\n                _context48.prev = 1;\n                startTime = Date.now();\n                i = 0;\n\n              case 4:\n                if (!(i < 50)) {\n                  _context48.next = 17;\n                  break;\n                }\n\n                _context48.next = 7;\n                return this.getRecentBlockhash('max');\n\n              case 7:\n                _yield$this$getRecent = _context48.sent;\n                blockhash = _yield$this$getRecent.blockhash;\n\n                if (!(this._blockhashInfo.recentBlockhash != blockhash)) {\n                  _context48.next = 12;\n                  break;\n                }\n\n                this._blockhashInfo = {\n                  recentBlockhash: blockhash,\n                  lastFetch: new Date(),\n                  transactionSignatures: [],\n                  simulatedSignatures: []\n                };\n                return _context48.abrupt(\"return\", blockhash);\n\n              case 12:\n                _context48.next = 14;\n                return sleep(MS_PER_SLOT / 2);\n\n              case 14:\n                i++;\n                _context48.next = 4;\n                break;\n\n              case 17:\n                throw new Error(\"Unable to obtain a new blockhash after \".concat(Date.now() - startTime, \"ms\"));\n\n              case 18:\n                _context48.prev = 18;\n                this._pollingBlockhash = false;\n                return _context48.finish(18);\n\n              case 21:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this, [[1,, 18, 21]]);\n      }));\n\n      function _pollNewBlockhash() {\n        return _pollNewBlockhash2.apply(this, arguments);\n      }\n\n      return _pollNewBlockhash;\n    }()\n    /**\n     * Simulate a transaction\n     */\n\n  }, {\n    key: \"simulateTransaction\",\n    value: function () {\n      var _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49(transaction, signers) {\n        var disableCache, signature, signData, wireTransaction, encodedTransaction, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                if (!(transaction.nonceInfo && signers)) {\n                  _context49.next = 4;\n                  break;\n                }\n\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n                _context49.next = 22;\n                break;\n\n              case 4:\n                disableCache = this._disableBlockhashCaching;\n\n              case 5:\n                _context49.next = 7;\n                return this._recentBlockhash(disableCache);\n\n              case 7:\n                transaction.recentBlockhash = _context49.sent;\n\n                if (signers) {\n                  _context49.next = 10;\n                  break;\n                }\n\n                return _context49.abrupt(\"break\", 22);\n\n              case 10:\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n\n                if (transaction.signature) {\n                  _context49.next = 13;\n                  break;\n                }\n\n                throw new Error('!signature');\n\n              case 13:\n                // If the signature of this transaction has not been seen before with the\n                // current recentBlockhash, all done.\n                signature = transaction.signature.toString('base64');\n\n                if (!(!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature))) {\n                  _context49.next = 19;\n                  break;\n                }\n\n                this._blockhashInfo.simulatedSignatures.push(signature);\n\n                return _context49.abrupt(\"break\", 22);\n\n              case 19:\n                disableCache = true;\n\n              case 20:\n                _context49.next = 5;\n                break;\n\n              case 22:\n                signData = transaction.serializeMessage();\n                wireTransaction = transaction._serialize(signData);\n                encodedTransaction = wireTransaction.toString('base64');\n                config = {\n                  encoding: 'base64',\n                  commitment: this.commitment\n                };\n                args = [encodedTransaction, config];\n\n                if (signers) {\n                  config.sigVerify = true;\n                }\n\n                _context49.next = 30;\n                return this._rpcRequest('simulateTransaction', args);\n\n              case 30:\n                unsafeRes = _context49.sent;\n                res = SimulatedTransactionResponseValidator(unsafeRes);\n\n                if (!res.error) {\n                  _context49.next = 34;\n                  break;\n                }\n\n                throw new Error('failed to simulate transaction: ' + res.error.message);\n\n              case 34:\n                assert(typeof res.result !== 'undefined');\n                assert(res.result);\n                return _context49.abrupt(\"return\", res.result);\n\n              case 37:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, this);\n      }));\n\n      function simulateTransaction(_x70, _x71) {\n        return _simulateTransaction.apply(this, arguments);\n      }\n\n      return simulateTransaction;\n    }()\n    /**\n     * Sign and send a transaction\n     */\n\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50(transaction, signers, options) {\n        var disableCache, signature, wireTransaction;\n        return _regeneratorRuntime.wrap(function _callee50$(_context50) {\n          while (1) {\n            switch (_context50.prev = _context50.next) {\n              case 0:\n                if (!transaction.nonceInfo) {\n                  _context50.next = 4;\n                  break;\n                }\n\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n                _context50.next = 20;\n                break;\n\n              case 4:\n                disableCache = this._disableBlockhashCaching;\n\n              case 5:\n                _context50.next = 7;\n                return this._recentBlockhash(disableCache);\n\n              case 7:\n                transaction.recentBlockhash = _context50.sent;\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n\n                if (transaction.signature) {\n                  _context50.next = 11;\n                  break;\n                }\n\n                throw new Error('!signature');\n\n              case 11:\n                // If the signature of this transaction has not been seen before with the\n                // current recentBlockhash, all done.\n                signature = transaction.signature.toString('base64');\n\n                if (this._blockhashInfo.transactionSignatures.includes(signature)) {\n                  _context50.next = 17;\n                  break;\n                }\n\n                this._blockhashInfo.transactionSignatures.push(signature);\n\n                return _context50.abrupt(\"break\", 20);\n\n              case 17:\n                disableCache = true;\n\n              case 18:\n                _context50.next = 5;\n                break;\n\n              case 20:\n                wireTransaction = transaction.serialize();\n                _context50.next = 23;\n                return this.sendRawTransaction(wireTransaction, options);\n\n              case 23:\n                return _context50.abrupt(\"return\", _context50.sent);\n\n              case 24:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n        }, _callee50, this);\n      }));\n\n      function sendTransaction(_x72, _x73, _x74) {\n        return _sendTransaction.apply(this, arguments);\n      }\n\n      return sendTransaction;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"validatorExit\",\n    value: function () {\n      var _validatorExit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n                _context51.next = 2;\n                return this._rpcRequest('validatorExit', []);\n\n              case 2:\n                unsafeRes = _context51.sent;\n                res = jsonRpcResult('boolean')(unsafeRes);\n\n                if (!res.error) {\n                  _context51.next = 6;\n                  break;\n                }\n\n                throw new Error('validator exit failed: ' + res.error.message);\n\n              case 6:\n                assert(typeof res.result !== 'undefined');\n                return _context51.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n        }, _callee51, this);\n      }));\n\n      function validatorExit() {\n        return _validatorExit.apply(this, arguments);\n      }\n\n      return validatorExit;\n    }()\n    /**\n     * Send a transaction that has already been signed and serialized into the\n     * wire format\n     */\n\n  }, {\n    key: \"sendRawTransaction\",\n    value: function () {\n      var _sendRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52(rawTransaction, options) {\n        var encodedTransaction, result;\n        return _regeneratorRuntime.wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n                encodedTransaction = toBuffer(rawTransaction).toString('base64');\n                _context52.next = 3;\n                return this.sendEncodedTransaction(encodedTransaction, options);\n\n              case 3:\n                result = _context52.sent;\n                return _context52.abrupt(\"return\", result);\n\n              case 5:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n        }, _callee52, this);\n      }));\n\n      function sendRawTransaction(_x75, _x76) {\n        return _sendRawTransaction.apply(this, arguments);\n      }\n\n      return sendRawTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed, serialized into the\n     * wire format, and encoded as a base64 string\n     */\n\n  }, {\n    key: \"sendEncodedTransaction\",\n    value: function () {\n      var _sendEncodedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53(encodedTransaction, options) {\n        var config, args, skipPreflight, preflightCommitment, unsafeRes, res, logs, traceIndent, logTrace;\n        return _regeneratorRuntime.wrap(function _callee53$(_context53) {\n          while (1) {\n            switch (_context53.prev = _context53.next) {\n              case 0:\n                config = {\n                  encoding: 'base64'\n                };\n                args = [encodedTransaction, config];\n                skipPreflight = options && options.skipPreflight;\n                preflightCommitment = options && options.preflightCommitment;\n\n                if (skipPreflight) {\n                  config.skipPreflight = skipPreflight;\n                }\n\n                if (preflightCommitment) {\n                  config.preflightCommitment = preflightCommitment;\n                }\n\n                _context53.next = 8;\n                return this._rpcRequest('sendTransaction', args);\n\n              case 8:\n                unsafeRes = _context53.sent;\n                res = SendTransactionRpcResult(unsafeRes);\n\n                if (!res.error) {\n                  _context53.next = 13;\n                  break;\n                }\n\n                if (res.error.data) {\n                  logs = res.error.data.logs;\n\n                  if (logs && Array.isArray(logs)) {\n                    traceIndent = '\\n    ';\n                    logTrace = traceIndent + logs.join(traceIndent);\n                    console.error(res.error.message, logTrace);\n                  }\n                }\n\n                throw new Error('failed to send transaction: ' + res.error.message);\n\n              case 13:\n                assert(typeof res.result !== 'undefined');\n                assert(res.result);\n                return _context53.abrupt(\"return\", res.result);\n\n              case 16:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n        }, _callee53, this);\n      }));\n\n      function sendEncodedTransaction(_x77, _x78) {\n        return _sendEncodedTransaction.apply(this, arguments);\n      }\n\n      return sendEncodedTransaction;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_wsOnOpen\",\n    value: function _wsOnOpen() {\n      var _this2 = this;\n\n      this._rpcWebSocketConnected = true;\n      this._rpcWebSocketHeartbeat = setInterval(function () {\n        // Ping server every 5s to prevent idle timeouts\n        _this2._rpcWebSocket.notify('ping')[\"catch\"](function () {});\n      }, 5000);\n\n      this._updateSubscriptions();\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_wsOnError\",\n    value: function _wsOnError(err) {\n      console.error('ws error:', err.message);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_wsOnClose\",\n    value: function _wsOnClose(code) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n\n      if (code === 1000) {\n        // explicit close, check if any subscriptions have been made since close\n        this._updateSubscriptions();\n\n        return;\n      } // implicit close, prepare subscriptions for auto-reconnect\n\n\n      this._resetSubscriptions();\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_subscribe\",\n    value: function () {\n      var _subscribe2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54(sub, rpcMethod, rpcArgs) {\n        var id;\n        return _regeneratorRuntime.wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n                if (!(sub.subscriptionId == null)) {\n                  _context54.next = 13;\n                  break;\n                }\n\n                sub.subscriptionId = 'subscribing';\n                _context54.prev = 2;\n                _context54.next = 5;\n                return this._rpcWebSocket.call(rpcMethod, rpcArgs);\n\n              case 5:\n                id = _context54.sent;\n\n                if (sub.subscriptionId === 'subscribing') {\n                  // eslint-disable-next-line require-atomic-updates\n                  sub.subscriptionId = id;\n                }\n\n                _context54.next = 13;\n                break;\n\n              case 9:\n                _context54.prev = 9;\n                _context54.t0 = _context54[\"catch\"](2);\n\n                if (sub.subscriptionId === 'subscribing') {\n                  // eslint-disable-next-line require-atomic-updates\n                  sub.subscriptionId = null;\n                }\n\n                console.error(\"\".concat(rpcMethod, \" error for argument\"), rpcArgs, _context54.t0.message);\n\n              case 13:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54, this, [[2, 9]]);\n      }));\n\n      function _subscribe(_x79, _x80, _x81) {\n        return _subscribe2.apply(this, arguments);\n      }\n\n      return _subscribe;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function () {\n      var _unsubscribe2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55(sub, rpcMethod) {\n        var subscriptionId, unsubscribeId;\n        return _regeneratorRuntime.wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n                subscriptionId = sub.subscriptionId;\n\n                if (!(subscriptionId != null && typeof subscriptionId != 'string')) {\n                  _context55.next = 11;\n                  break;\n                }\n\n                unsubscribeId = subscriptionId;\n                _context55.prev = 3;\n                _context55.next = 6;\n                return this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n\n              case 6:\n                _context55.next = 11;\n                break;\n\n              case 8:\n                _context55.prev = 8;\n                _context55.t0 = _context55[\"catch\"](3);\n                console.error(\"\".concat(rpcMethod, \" error:\"), _context55.t0.message);\n\n              case 11:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n        }, _callee55, this, [[3, 8]]);\n      }));\n\n      function _unsubscribe(_x82, _x83) {\n        return _unsubscribe2.apply(this, arguments);\n      }\n\n      return _unsubscribe;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_resetSubscriptions\",\n    value: function _resetSubscriptions() {\n      Object.values(this._accountChangeSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._programAccountChangeSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._signatureSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._slotSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._rootSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_updateSubscriptions\",\n    value: function _updateSubscriptions() {\n      var _this3 = this;\n\n      var accountKeys = Object.keys(this._accountChangeSubscriptions).map(Number);\n      var programKeys = Object.keys(this._programAccountChangeSubscriptions).map(Number);\n      var slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n      var signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n      var rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n\n      if (accountKeys.length === 0 && programKeys.length === 0 && slotKeys.length === 0 && signatureKeys.length === 0 && rootKeys.length === 0) {\n        if (this._rpcWebSocketConnected) {\n          this._rpcWebSocketConnected = false;\n          this._rpcWebSocketIdleTimeout = setTimeout(function () {\n            _this3._rpcWebSocketIdleTimeout = null;\n\n            _this3._rpcWebSocket.close();\n          }, 500);\n        }\n\n        return;\n      }\n\n      if (this._rpcWebSocketIdleTimeout !== null) {\n        clearTimeout(this._rpcWebSocketIdleTimeout);\n        this._rpcWebSocketIdleTimeout = null;\n        this._rpcWebSocketConnected = true;\n      }\n\n      if (!this._rpcWebSocketConnected) {\n        this._rpcWebSocket.connect();\n\n        return;\n      }\n\n      var _iterator = _createForOfIteratorHelper$1(accountKeys),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var id = _step.value;\n          var sub = this._accountChangeSubscriptions[id];\n\n          this._subscribe(sub, 'accountSubscribe', this._buildArgs([sub.publicKey], sub.commitment, 'base64'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper$1(programKeys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _id = _step2.value;\n          var _sub = this._programAccountChangeSubscriptions[_id];\n\n          this._subscribe(_sub, 'programSubscribe', this._buildArgs([_sub.programId], _sub.commitment, 'base64'));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper$1(slotKeys),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _id2 = _step3.value;\n          var _sub2 = this._slotSubscriptions[_id2];\n\n          this._subscribe(_sub2, 'slotSubscribe', []);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var _iterator4 = _createForOfIteratorHelper$1(signatureKeys),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _id3 = _step4.value;\n          var _sub3 = this._signatureSubscriptions[_id3];\n\n          this._subscribe(_sub3, 'signatureSubscribe', this._buildArgs([_sub3.signature], _sub3.commitment));\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var _iterator5 = _createForOfIteratorHelper$1(rootKeys),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _id4 = _step5.value;\n          var _sub4 = this._rootSubscriptions[_id4];\n\n          this._subscribe(_sub4, 'rootSubscribe', []);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_wsOnAccountNotification\",\n    value: function _wsOnAccountNotification(notification) {\n      var res = AccountNotificationResult(notification);\n\n      if (res.error) {\n        throw new Error('account notification failed: ' + res.error.message);\n      }\n\n      assert(typeof res.result !== 'undefined');\n      var keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n\n      var _iterator6 = _createForOfIteratorHelper$1(keys),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var id = _step6.value;\n          var sub = this._accountChangeSubscriptions[id];\n\n          if (sub.subscriptionId === res.subscription) {\n            var result = res.result;\n            var value = result.value,\n                _context56 = result.context;\n            assert(value.data[1] === 'base64');\n            sub.callback({\n              executable: value.executable,\n              owner: new PublicKey(value.owner),\n              lamports: value.lamports,\n              data: Buffer.from(value.data[0], 'base64')\n            }, _context56);\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n    /**\n     * Register a callback to be invoked whenever the specified account changes\n     *\n     * @param publicKey Public key of the account to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onAccountChange\",\n    value: function onAccountChange(publicKey, callback, commitment) {\n      var id = ++this._accountChangeSubscriptionCounter;\n      this._accountChangeSubscriptions[id] = {\n        publicKey: publicKey.toBase58(),\n        callback: callback,\n        commitment: commitment,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeAccountChangeListener\",\n    value: function () {\n      var _removeAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee56$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n                if (!this._accountChangeSubscriptions[id]) {\n                  _context57.next = 8;\n                  break;\n                }\n\n                subInfo = this._accountChangeSubscriptions[id];\n                delete this._accountChangeSubscriptions[id];\n                _context57.next = 5;\n                return this._unsubscribe(subInfo, 'accountUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context57.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown account change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee56, this);\n      }));\n\n      function removeAccountChangeListener(_x84) {\n        return _removeAccountChangeListener.apply(this, arguments);\n      }\n\n      return removeAccountChangeListener;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_wsOnProgramAccountNotification\",\n    value: function _wsOnProgramAccountNotification(notification) {\n      var res = ProgramAccountNotificationResult(notification);\n\n      if (res.error) {\n        throw new Error('program account notification failed: ' + res.error.message);\n      }\n\n      assert(typeof res.result !== 'undefined');\n      var keys = Object.keys(this._programAccountChangeSubscriptions).map(Number);\n\n      var _iterator7 = _createForOfIteratorHelper$1(keys),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var id = _step7.value;\n          var sub = this._programAccountChangeSubscriptions[id];\n\n          if (sub.subscriptionId === res.subscription) {\n            var result = res.result;\n            var value = result.value,\n                _context58 = result.context;\n            assert(value.account.data[1] === 'base64');\n            sub.callback({\n              accountId: value.pubkey,\n              accountInfo: {\n                executable: value.account.executable,\n                owner: new PublicKey(value.account.owner),\n                lamports: value.account.lamports,\n                data: Buffer.from(value.account.data[0], 'base64')\n              }\n            }, _context58);\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n    /**\n     * Register a callback to be invoked whenever accounts owned by the\n     * specified program change\n     *\n     * @param programId Public key of the program to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onProgramAccountChange\",\n    value: function onProgramAccountChange(programId, callback, commitment) {\n      var id = ++this._programAccountChangeSubscriptionCounter;\n      this._programAccountChangeSubscriptions[id] = {\n        programId: programId.toBase58(),\n        callback: callback,\n        commitment: commitment,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeProgramAccountChangeListener\",\n    value: function () {\n      var _removeProgramAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee57$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n                if (!this._programAccountChangeSubscriptions[id]) {\n                  _context59.next = 8;\n                  break;\n                }\n\n                subInfo = this._programAccountChangeSubscriptions[id];\n                delete this._programAccountChangeSubscriptions[id];\n                _context59.next = 5;\n                return this._unsubscribe(subInfo, 'programUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context59.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown program account change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n        }, _callee57, this);\n      }));\n\n      function removeProgramAccountChangeListener(_x85) {\n        return _removeProgramAccountChangeListener.apply(this, arguments);\n      }\n\n      return removeProgramAccountChangeListener;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_wsOnSlotNotification\",\n    value: function _wsOnSlotNotification(notification) {\n      var res = SlotNotificationResult(notification);\n\n      if (res.error) {\n        throw new Error('slot notification failed: ' + res.error.message);\n      }\n\n      assert(typeof res.result !== 'undefined');\n      var _res$result3 = res.result,\n          parent = _res$result3.parent,\n          slot = _res$result3.slot,\n          root = _res$result3.root;\n      var keys = Object.keys(this._slotSubscriptions).map(Number);\n\n      var _iterator8 = _createForOfIteratorHelper$1(keys),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var id = _step8.value;\n          var sub = this._slotSubscriptions[id];\n\n          if (sub.subscriptionId === res.subscription) {\n            sub.callback({\n              parent: parent,\n              slot: slot,\n              root: root\n            });\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n    /**\n     * Register a callback to be invoked upon slot changes\n     *\n     * @param callback Function to invoke whenever the slot changes\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSlotChange\",\n    value: function onSlotChange(callback) {\n      var id = ++this._slotSubscriptionCounter;\n      this._slotSubscriptions[id] = {\n        callback: callback,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a slot notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSlotChangeListener\",\n    value: function () {\n      var _removeSlotChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee58$(_context60) {\n          while (1) {\n            switch (_context60.prev = _context60.next) {\n              case 0:\n                if (!this._slotSubscriptions[id]) {\n                  _context60.next = 8;\n                  break;\n                }\n\n                subInfo = this._slotSubscriptions[id];\n                delete this._slotSubscriptions[id];\n                _context60.next = 5;\n                return this._unsubscribe(subInfo, 'slotUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context60.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown slot change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context60.stop();\n            }\n          }\n        }, _callee58, this);\n      }));\n\n      function removeSlotChangeListener(_x86) {\n        return _removeSlotChangeListener.apply(this, arguments);\n      }\n\n      return removeSlotChangeListener;\n    }()\n  }, {\n    key: \"_buildArgs\",\n    value: function _buildArgs(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n\n      if (commitment || encoding || extra) {\n        var options = {};\n\n        if (encoding) {\n          options.encoding = encoding;\n        }\n\n        if (commitment) {\n          options.commitment = commitment;\n        }\n\n        if (extra) {\n          options = Object.assign(options, extra);\n        }\n\n        args.push(options);\n      }\n\n      return args;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_wsOnSignatureNotification\",\n    value: function _wsOnSignatureNotification(notification) {\n      var res = SignatureNotificationResult(notification);\n\n      if (res.error) {\n        throw new Error('signature notification failed: ' + res.error.message);\n      }\n\n      assert(typeof res.result !== 'undefined');\n      var keys = Object.keys(this._signatureSubscriptions).map(Number);\n\n      var _iterator9 = _createForOfIteratorHelper$1(keys),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var id = _step9.value;\n          var sub = this._signatureSubscriptions[id];\n\n          if (sub.subscriptionId === res.subscription) {\n            // Signatures subscriptions are auto-removed by the RPC service so\n            // no need to explicitly send an unsubscribe message\n            delete this._signatureSubscriptions[id];\n\n            this._updateSubscriptions();\n\n            sub.callback(res.result.value, res.result.context);\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n    /**\n     * Register a callback to be invoked upon signature updates\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param commitment Specify the commitment level signature must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSignature\",\n    value: function onSignature(signature, callback, commitment) {\n      var id = ++this._signatureSubscriptionCounter;\n      this._signatureSubscriptions[id] = {\n        signature: signature,\n        callback: callback,\n        commitment: commitment,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a signature notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSignatureListener\",\n    value: function () {\n      var _removeSignatureListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee59$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n                if (!this._signatureSubscriptions[id]) {\n                  _context61.next = 8;\n                  break;\n                }\n\n                subInfo = this._signatureSubscriptions[id];\n                delete this._signatureSubscriptions[id];\n                _context61.next = 5;\n                return this._unsubscribe(subInfo, 'signatureUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context61.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown signature result id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n        }, _callee59, this);\n      }));\n\n      function removeSignatureListener(_x87) {\n        return _removeSignatureListener.apply(this, arguments);\n      }\n\n      return removeSignatureListener;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_wsOnRootNotification\",\n    value: function _wsOnRootNotification(notification) {\n      var res = RootNotificationResult(notification);\n\n      if (res.error) {\n        throw new Error('root notification failed: ' + res.error.message);\n      }\n\n      assert(typeof res.result !== 'undefined');\n      var root = res.result;\n      var keys = Object.keys(this._rootSubscriptions).map(Number);\n\n      var _iterator10 = _createForOfIteratorHelper$1(keys),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var id = _step10.value;\n          var sub = this._rootSubscriptions[id];\n\n          if (sub.subscriptionId === res.subscription) {\n            sub.callback(root);\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n    /**\n     * Register a callback to be invoked upon root changes\n     *\n     * @param callback Function to invoke whenever the root changes\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onRootChange\",\n    value: function onRootChange(callback) {\n      var id = ++this._rootSubscriptionCounter;\n      this._rootSubscriptions[id] = {\n        callback: callback,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a root notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeRootChangeListener\",\n    value: function () {\n      var _removeRootChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee60$(_context62) {\n          while (1) {\n            switch (_context62.prev = _context62.next) {\n              case 0:\n                if (!this._rootSubscriptions[id]) {\n                  _context62.next = 8;\n                  break;\n                }\n\n                subInfo = this._rootSubscriptions[id];\n                delete this._rootSubscriptions[id];\n                _context62.next = 5;\n                return this._unsubscribe(subInfo, 'rootUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context62.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown root change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context62.stop();\n            }\n          }\n        }, _callee60, this);\n      }));\n\n      function removeRootChangeListener(_x88) {\n        return _removeRootChangeListener.apply(this, arguments);\n      }\n\n      return removeRootChangeListener;\n    }()\n  }, {\n    key: \"commitment\",\n    get: function get() {\n      return this._commitment;\n    }\n  }]);\n\n  return Connection;\n}();\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n\nfunction sendAndConfirmTransaction(_x, _x2, _x3, _x4) {\n  return _sendAndConfirmTransaction.apply(this, arguments);\n}\n\nfunction _sendAndConfirmTransaction() {\n  _sendAndConfirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, transaction, signers, options) {\n    var sendOptions, signature, status;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            sendOptions = options && {\n              skipPreflight: options.skipPreflight,\n              preflightCommitment: options.preflightCommitment || options.commitment\n            };\n            _context.next = 3;\n            return connection.sendTransaction(transaction, signers, sendOptions);\n\n          case 3:\n            signature = _context.sent;\n            _context.next = 6;\n            return connection.confirmTransaction(signature, options && options.commitment);\n\n          case 6:\n            status = _context.sent.value;\n\n            if (!status.err) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(\"Transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 9:\n            return _context.abrupt(\"return\", signature);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _sendAndConfirmTransaction.apply(this, arguments);\n}\n/**\n * @typedef {Object} InstructionType\n * @property (index} The Instruction index (from solana upstream program)\n * @property (BufferLayout} The BufferLayout to use to build data\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n */\n\n\nfunction encodeData(type, fields) {\n  var allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  var data = Buffer.alloc(allocLength);\n  var layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n */\n\n\nfunction decodeData(type, buffer) {\n  var data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\"invalid instruction; instruction index mismatch \".concat(data.instruction, \" != \").concat(type.index));\n  }\n\n  return data;\n}\n/**\n * Create account system transaction params\n * @typedef {Object} CreateAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\n\n/**\n * System Instruction class\n */\n\n\nvar SystemInstruction = /*#__PURE__*/function () {\n  function SystemInstruction() {\n    _classCallCheck(this, SystemInstruction);\n  }\n\n  _createClass(SystemInstruction, null, [{\n    key: \"decodeInstructionType\",\n\n    /**\n     * Decode a system instruction and retrieve the instruction type.\n     */\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i = 0, _Object$keys = Object.keys(SYSTEM_INSTRUCTION_LAYOUTS); _i < _Object$keys.length; _i++) {\n        var t = _Object$keys[_i];\n\n        if (SYSTEM_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n          type = t;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a SystemInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode a create account system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeCreateAccount\",\n    value: function decodeCreateAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data),\n          lamports = _decodeData.lamports,\n          space = _decodeData.space,\n          programId = _decodeData.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a transfer system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeTransfer\",\n    value: function decodeTransfer(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData2 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data),\n          lamports = _decodeData2.lamports;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a transfer with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeTransferWithSeed\",\n    value: function decodeTransferWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData3 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data),\n          lamports = _decodeData3.lamports,\n          seed = _decodeData3.seed,\n          programId = _decodeData3.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        basePubkey: instruction.keys[1].pubkey,\n        toPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an allocate system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAllocate\",\n    value: function decodeAllocate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData4 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data),\n          space = _decodeData4.space;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        space: space\n      };\n    }\n    /**\n     * Decode an allocate with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAllocateWithSeed\",\n    value: function decodeAllocateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData5 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data),\n          base = _decodeData5.base,\n          seed = _decodeData5.seed,\n          space = _decodeData5.space,\n          programId = _decodeData5.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAssign\",\n    value: function decodeAssign(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData6 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data),\n          programId = _decodeData6.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAssignWithSeed\",\n    value: function decodeAssignWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData7 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data),\n          base = _decodeData7.base,\n          seed = _decodeData7.seed,\n          programId = _decodeData7.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a create account with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeCreateWithSeed\",\n    value: function decodeCreateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData8 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data),\n          base = _decodeData8.base,\n          seed = _decodeData8.seed,\n          lamports = _decodeData8.lamports,\n          space = _decodeData8.space,\n          programId = _decodeData8.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a nonce initialize system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceInitialize\",\n    value: function decodeNonceInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData9 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data),\n          authorized = _decodeData9.authorized;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * Decode a nonce advance system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceAdvance\",\n    value: function decodeNonceAdvance(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * Decode a nonce withdraw system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceWithdraw\",\n    value: function decodeNonceWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n\n      var _decodeData10 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data),\n          lamports = _decodeData10.lamports;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a nonce authorize system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceAuthorize\",\n    value: function decodeNonceAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData11 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data),\n          authorized = _decodeData11.authorized;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[1].pubkey,\n        newAuthorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(SystemProgram.programId)) {\n        throw new Error('invalid instruction; programId is not SystemProgram');\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return SystemInstruction;\n}();\n/**\n * An enumeration of valid SystemInstructionType's\n * @typedef {'Create' | 'Assign' | 'Transfer' | 'CreateWithSeed'\n | 'AdvanceNonceAccount' | 'WithdrawNonceAccount' | 'InitializeNonceAccount'\n | 'AuthorizeNonceAccount'} SystemInstructionType\n */\n\n/**\n * An enumeration of valid system InstructionType's\n */\n\n\nvar SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: struct([u32('instruction'), ns64('lamports'), ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: struct([u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: struct([u32('instruction'), ns64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: struct([u32('instruction'), publicKey('base'), rustString('seed'), ns64('lamports'), ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: struct([u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: struct([u32('instruction'), ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: struct([u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: struct([u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: struct([u32('instruction'), ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: struct([u32('instruction'), publicKey('base'), rustString('seed'), ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: struct([u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: struct([u32('instruction'), ns64('lamports'), rustString('seed'), publicKey('programId')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nvar SystemProgram = /*#__PURE__*/function () {\n  function SystemProgram() {\n    _classCallCheck(this, SystemProgram);\n  }\n\n  _createClass(SystemProgram, null, [{\n    key: \"createAccount\",\n\n    /**\n     * Generate a transaction instruction that creates a new account\n     */\n    value: function createAccount(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n      var data = encodeData(type, {\n        lamports: params.lamports,\n        space: params.space,\n        programId: params.programId.toBuffer()\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.newAccountPubkey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that transfers lamports from one account to another\n     */\n\n  }, {\n    key: \"transfer\",\n    value: function transfer(params) {\n      var data;\n      var keys;\n\n      if (params.basePubkey) {\n        var type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n        data = encodeData(type, {\n          lamports: params.lamports,\n          seed: params.seed,\n          programId: params.programId.toBuffer()\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      } else {\n        var _type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n        data = encodeData(_type, {\n          lamports: params.lamports\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that assigns an account to a program\n     */\n\n  }, {\n    key: \"assign\",\n    value: function assign(params) {\n      var data;\n      var keys;\n\n      if (params.basePubkey) {\n        var type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n        data = encodeData(type, {\n          base: params.basePubkey.toBuffer(),\n          seed: params.seed,\n          programId: params.programId.toBuffer()\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type2 = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n        data = encodeData(_type2, {\n          programId: params.programId.toBuffer()\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that creates a new account at\n     *   an address generated with `from`, a seed, and programId\n     */\n\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n      var data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        lamports: params.lamports,\n        space: params.space,\n        programId: params.programId.toBuffer()\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.newAccountPubkey,\n          isSigner: false,\n          isWritable: true\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction that creates a new Nonce account\n     */\n\n  }, {\n    key: \"createNonceAccount\",\n    value: function createNonceAccount(params) {\n      var transaction = new Transaction();\n\n      if (params.basePubkey && params.seed) {\n        transaction.add(SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      } else {\n        transaction.add(SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      }\n\n      var initParams = {\n        noncePubkey: params.noncePubkey,\n        authorizedPubkey: params.authorizedPubkey\n      };\n      transaction.add(this.nonceInitialize(initParams));\n      return transaction;\n    }\n    /**\n     * Generate an instruction to initialize a Nonce account\n     */\n\n  }, {\n    key: \"nonceInitialize\",\n    value: function nonceInitialize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n      var data = encodeData(type, {\n        authorized: params.authorizedPubkey.toBuffer()\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate an instruction to advance the nonce in a Nonce account\n     */\n\n  }, {\n    key: \"nonceAdvance\",\n    value: function nonceAdvance(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n      var data = encodeData(type);\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a transaction instruction that withdraws lamports from a Nonce account\n     */\n\n  }, {\n    key: \"nonceWithdraw\",\n    value: function nonceWithdraw(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n      var data = encodeData(type, {\n        lamports: params.lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that authorizes a new PublicKey as the authority\n     * on a Nonce account.\n     */\n\n  }, {\n    key: \"nonceAuthorize\",\n    value: function nonceAuthorize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n      var data = encodeData(type, {\n        authorized: params.newAuthorizedPubkey.toBuffer()\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that allocates space in an account without funding\n     */\n\n  }, {\n    key: \"allocate\",\n    value: function allocate(params) {\n      var data;\n      var keys;\n\n      if (params.basePubkey) {\n        var type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n        data = encodeData(type, {\n          base: params.basePubkey.toBuffer(),\n          seed: params.seed,\n          space: params.space,\n          programId: params.programId.toBuffer()\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type3 = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n        data = encodeData(_type3, {\n          space: params.space\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"programId\",\n\n    /**\n     * Public key that identifies the System program\n     */\n    get: function get() {\n      return new PublicKey('11111111111111111111111111111111');\n    }\n  }]);\n\n  return SystemProgram;\n}();\n/**\n * Program loader interface\n */\n\n\nvar Loader = /*#__PURE__*/function () {\n  function Loader() {\n    _classCallCheck(this, Loader);\n  }\n\n  _createClass(Loader, null, [{\n    key: \"getMinNumSignatures\",\n\n    /**\n     * Minimum number of signatures required to load a program not including\n     * retries\n     *\n     * Can be used to calculate transaction fees\n     */\n    value: function getMinNumSignatures(dataLength) {\n      return 2 * ( // Every transaction requires two signatures (payer + program)\n      Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n      1) // Add one for Finalize transaction\n      ;\n    }\n    /**\n     * Loads a generic program\n     *\n     * @param connection The connection to use\n     * @param payer System account that pays to load the program\n     * @param program Account to load the program into\n     * @param programId Public key that identifies the loader\n     * @param data Program octets\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, payer, program, programId, data) {\n        var balanceNeeded, programInfo, transaction, dataLayout, chunkSize, offset$1, array, transactions, bytes, _data, _transaction, REQUESTS_PER_SECOND, _dataLayout, _data2, _transaction2;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return connection.getMinimumBalanceForRentExemption(data.length);\n\n              case 2:\n                balanceNeeded = _context.sent;\n                _context.next = 5;\n                return connection.getAccountInfo(program.publicKey, 'singleGossip');\n\n              case 5:\n                programInfo = _context.sent;\n                transaction = null;\n\n                if (!(programInfo !== null)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                if (!programInfo.executable) {\n                  _context.next = 11;\n                  break;\n                }\n\n                console.error('Program load failed, account is already executable');\n                return _context.abrupt(\"return\", false);\n\n              case 11:\n                if (programInfo.data.length !== data.length) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.allocate({\n                    accountPubkey: program.publicKey,\n                    space: data.length\n                  }));\n                }\n\n                if (!programInfo.owner.equals(programId)) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.assign({\n                    accountPubkey: program.publicKey,\n                    programId: programId\n                  }));\n                }\n\n                if (programInfo.lamports < balanceNeeded) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.transfer({\n                    fromPubkey: payer.publicKey,\n                    toPubkey: program.publicKey,\n                    lamports: balanceNeeded - programInfo.lamports\n                  }));\n                }\n\n                _context.next = 17;\n                break;\n\n              case 16:\n                transaction = new Transaction().add(SystemProgram.createAccount({\n                  fromPubkey: payer.publicKey,\n                  newAccountPubkey: program.publicKey,\n                  lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n                  space: data.length,\n                  programId: programId\n                }));\n\n              case 17:\n                if (!(transaction !== null)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.next = 20;\n                return sendAndConfirmTransaction(connection, transaction, [payer, program], {\n                  commitment: 'singleGossip'\n                });\n\n              case 20:\n                dataLayout = struct([u32('instruction'), u32('offset'), u32('bytesLength'), u32('bytesLengthPadding'), seq(u8('byte'), offset(u32(), -8), 'bytes')]);\n                chunkSize = Loader.chunkSize;\n                offset$1 = 0;\n                array = data;\n                transactions = [];\n\n              case 25:\n                if (!(array.length > 0)) {\n                  _context.next = 39;\n                  break;\n                }\n\n                bytes = array.slice(0, chunkSize);\n                _data = Buffer.alloc(chunkSize + 16);\n                dataLayout.encode({\n                  instruction: 0,\n                  // Load instruction\n                  offset: offset$1,\n                  bytes: bytes\n                }, _data);\n                _transaction = new Transaction().add({\n                  keys: [{\n                    pubkey: program.publicKey,\n                    isSigner: true,\n                    isWritable: true\n                  }],\n                  programId: programId,\n                  data: _data\n                });\n                transactions.push(sendAndConfirmTransaction(connection, _transaction, [payer, program], {\n                  commitment: 'singleGossip'\n                })); // Delay between sends in an attempt to reduce rate limit errors\n\n                if (!connection._rpcEndpoint.includes('solana.com')) {\n                  _context.next = 35;\n                  break;\n                }\n\n                REQUESTS_PER_SECOND = 4;\n                _context.next = 35;\n                return sleep(1000 / REQUESTS_PER_SECOND);\n\n              case 35:\n                offset$1 += chunkSize;\n                array = array.slice(chunkSize);\n                _context.next = 25;\n                break;\n\n              case 39:\n                _context.next = 41;\n                return Promise.all(transactions);\n\n              case 41:\n                _dataLayout = struct([u32('instruction')]);\n                _data2 = Buffer.alloc(_dataLayout.span);\n\n                _dataLayout.encode({\n                  instruction: 1 // Finalize instruction\n\n                }, _data2);\n\n                _transaction2 = new Transaction().add({\n                  keys: [{\n                    pubkey: program.publicKey,\n                    isSigner: true,\n                    isWritable: true\n                  }, {\n                    pubkey: SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false\n                  }],\n                  programId: programId,\n                  data: _data2\n                });\n                _context.next = 47;\n                return sendAndConfirmTransaction(connection, _transaction2, [payer, program], {\n                  commitment: 'singleGossip'\n                });\n\n              case 47:\n                return _context.abrupt(\"return\", true);\n\n              case 48:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function load(_x, _x2, _x3, _x4, _x5) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"chunkSize\",\n\n    /**\n     * Amount of program data placed in each load Transaction\n     */\n    get: function get() {\n      // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n      // rest of the Transaction fields\n      //\n      // TODO: replace 300 with a proper constant for the size of the other\n      // Transaction fields\n      return PACKET_DATA_SIZE - 300;\n    }\n  }]);\n\n  return Loader;\n}();\n\nvar BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nvar BpfLoader = /*#__PURE__*/function () {\n  function BpfLoader() {\n    _classCallCheck(this, BpfLoader);\n  }\n\n  _createClass(BpfLoader, null, [{\n    key: \"getMinNumSignatures\",\n\n    /**\n     * Minimum number of signatures required to load a program not including\n     * retries\n     *\n     * Can be used to calculate transaction fees\n     */\n    value: function getMinNumSignatures(dataLength) {\n      return Loader.getMinNumSignatures(dataLength);\n    }\n    /**\n     * Load a BPF program\n     *\n     * @param connection The connection to use\n     * @param payer Account that will pay program loading fees\n     * @param program Account to load the program into\n     * @param elf The entire ELF containing the BPF program\n     * @param loaderProgramId The program id of the BPF loader to use\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n\n  }, {\n    key: \"load\",\n    value: function load(connection, payer, program, elf, loaderProgramId) {\n      return Loader.load(connection, payer, program, loaderProgramId, elf);\n    }\n  }]);\n\n  return BpfLoader;\n}();\n\nvar STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\nvar Authorized =\n/**\n * Create a new Authorized object\n */\nfunction Authorized(staker, withdrawer) {\n  _classCallCheck(this, Authorized);\n\n  _defineProperty(this, \"staker\", void 0);\n\n  _defineProperty(this, \"withdrawer\", void 0);\n\n  this.staker = staker;\n  this.withdrawer = withdrawer;\n};\n\nvar Lockup =\n/**\n * Create a new Lockup object\n */\nfunction Lockup(unixTimestamp, epoch, custodian) {\n  _classCallCheck(this, Lockup);\n\n  _defineProperty(this, \"unixTimestamp\", void 0);\n\n  _defineProperty(this, \"epoch\", void 0);\n\n  _defineProperty(this, \"custodian\", void 0);\n\n  this.unixTimestamp = unixTimestamp;\n  this.epoch = epoch;\n  this.custodian = custodian;\n};\n/**\n * Create stake account transaction params\n * @typedef {Object} CreateStakeAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\n\n/**\n * Stake Instruction class\n */\n\n\nvar StakeInstruction = /*#__PURE__*/function () {\n  function StakeInstruction() {\n    _classCallCheck(this, StakeInstruction);\n  }\n\n  _createClass(StakeInstruction, null, [{\n    key: \"decodeInstructionType\",\n\n    /**\n     * Decode a stake instruction and retrieve the instruction type.\n     */\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i = 0, _Object$keys = Object.keys(STAKE_INSTRUCTION_LAYOUTS); _i < _Object$keys.length; _i++) {\n        var t = _Object$keys[_i];\n\n        if (STAKE_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n          type = t;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a StakeInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode a initialize stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeInitialize\",\n    value: function decodeInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data),\n          authorized = _decodeData.authorized,\n          lockup = _decodeData.lockup;\n\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n        lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n      };\n    }\n    /**\n     * Decode a delegate stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeDelegate\",\n    value: function decodeDelegate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 6);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        votePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[5].pubkey\n      };\n    }\n    /**\n     * Decode an authorize stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData2 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n          newAuthorized = _decodeData2.newAuthorized,\n          stakeAuthorizationType = _decodeData2.stakeAuthorizationType;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorizeWithSeed\",\n    value: function decodeAuthorizeWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData3 = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),\n          newAuthorized = _decodeData3.newAuthorized,\n          stakeAuthorizationType = _decodeData3.stakeAuthorizationType,\n          authoritySeed = _decodeData3.authoritySeed,\n          authorityOwner = _decodeData3.authorityOwner;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorityBase: instruction.keys[1].pubkey,\n        authoritySeed: authoritySeed,\n        authorityOwner: new PublicKey(authorityOwner),\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode a split stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeSplit\",\n    value: function decodeSplit(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData4 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data),\n          lamports = _decodeData4.lamports;\n\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        splitStakePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a withdraw stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n\n      var _decodeData5 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n          lamports = _decodeData5.lamports;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n\n      if (instruction.keys.length > 5) {\n        o.custodianPubkey = instruction.keys[5].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode a deactivate stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeDeactivate\",\n    value: function decodeDeactivate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(StakeProgram.programId)) {\n        throw new Error('invalid instruction; programId is not StakeProgram');\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return StakeInstruction;\n}();\n/**\n * An enumeration of valid StakeInstructionType's\n * @typedef { 'Initialize' | 'Authorize' | 'AuthorizeWithSeed' | 'Delegate' | 'Split' | 'Withdraw'\n | 'Deactivate' } StakeInstructionType\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n */\n\n\nvar STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: struct([u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: struct([u32('instruction'), publicKey('newAuthorized'), u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: struct([u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: struct([u32('instruction'), ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: struct([u32('instruction'), ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: struct([u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: struct([u32('instruction'), publicKey('newAuthorized'), u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * @typedef {Object} StakeAuthorizationType\n * @property (index} The Stake Authorization index (from solana-stake-program)\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nvar StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nvar StakeProgram = /*#__PURE__*/function () {\n  function StakeProgram() {\n    _classCallCheck(this, StakeProgram);\n  }\n\n  _createClass(StakeProgram, null, [{\n    key: \"initialize\",\n\n    /**\n     * Generate an Initialize instruction to add to a Stake Create transaction\n     */\n    value: function initialize(params) {\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          lockup = params.lockup;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n      var data = encodeData(type, {\n        authorized: {\n          staker: authorized.staker.toBuffer(),\n          withdrawer: authorized.withdrawer.toBuffer()\n        },\n        lockup: {\n          unixTimestamp: lockup.unixTimestamp,\n          epoch: lockup.epoch,\n          custodian: lockup.custodian.toBuffer()\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account at\n     *   an address generated with `from`, a seed, and the Stake programId\n     */\n\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account\n     */\n\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that delegates Stake tokens to a validator\n     * Vote PublicKey. This transaction can also be used to redelegate Stake\n     * to a new validator Vote PublicKey.\n     */\n\n  }, {\n    key: \"delegate\",\n    value: function delegate(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          votePubkey = params.votePubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: STAKE_CONFIG_ID,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          stakeAuthorizationType = params.stakeAuthorizationType,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: newAuthorizedPubkey.toBuffer(),\n        stakeAuthorizationType: stakeAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n\n  }, {\n    key: \"authorizeWithSeed\",\n    value: function authorizeWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n          authorityBase = params.authorityBase,\n          authoritySeed = params.authoritySeed,\n          authorityOwner = params.authorityOwner,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          stakeAuthorizationType = params.stakeAuthorizationType,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n      var data = encodeData(type, {\n        newAuthorized: newAuthorizedPubkey.toBuffer(),\n        stakeAuthorizationType: stakeAuthorizationType.index,\n        authoritySeed: authoritySeed,\n        authorityOwner: authorityOwner.toBuffer()\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorityBase,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that splits Stake tokens into another stake account\n     */\n\n  }, {\n    key: \"split\",\n    value: function split(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          splitStakePubkey = params.splitStakePubkey,\n          lamports = params.lamports;\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId\n      }));\n      var type = STAKE_INSTRUCTION_LAYOUTS.Split;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      return transaction.add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: splitStakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that withdraws deactivated Stake tokens.\n     */\n\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          toPubkey = params.toPubkey,\n          lamports = params.lamports,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that deactivates Stake tokens.\n     */\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"programId\",\n\n    /**\n     * Public key that identifies the Stake program\n     */\n    get: function get() {\n      return new PublicKey('Stake11111111111111111111111111111111111111');\n    }\n    /**\n     * Max space of a Stake account\n     *\n     * This is generated from the solana-stake-program StakeState struct as\n     * `std::mem::size_of::<StakeState>()`:\n     * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n     */\n\n  }, {\n    key: \"space\",\n    get: function get() {\n      return 200;\n    }\n  }]);\n\n  return StakeProgram;\n}();\n\nvar publicKeyCreate = secp256k1.publicKeyCreate,\n    ecdsaSign = secp256k1.ecdsaSign;\nvar PRIVATE_KEY_BYTES = 32;\nvar PUBLIC_KEY_BYTES = 65;\nvar HASHED_PUBKEY_SERIALIZED_SIZE = 20;\nvar SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Create a Secp256k1 instruction using a public key params\n * @typedef {Object} CreateSecp256k1InstructionWithPublicKeyParams\n * @property {Buffer | Uint8Array | Array<number>} publicKey\n * @property {Buffer | Uint8Array | Array<number>} message\n * @property {Buffer | Uint8Array | Array<number>} signature\n * @property {number} recoveryId\n */\n\nvar SECP256K1_INSTRUCTION_LAYOUT = struct([u8('numSignatures'), u16('signatureOffset'), u8('signatureInstructionIndex'), u16('ethAddressOffset'), u8('ethAddressInstructionIndex'), u16('messageDataOffset'), u16('messageDataSize'), u8('messageInstructionIndex'), blob(20, 'ethPublicKey'), blob(64, 'signature'), u8('recoveryId')]);\n\nvar Secp256k1Program = /*#__PURE__*/function () {\n  function Secp256k1Program() {\n    _classCallCheck(this, Secp256k1Program);\n  }\n\n  _createClass(Secp256k1Program, null, [{\n    key: \"createInstructionWithPublicKey\",\n\n    /**\n     * Create a secp256k1 instruction with public key\n     */\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n          message = params.message,\n          signature = params.signature,\n          recoveryId = params.recoveryId;\n      assert(publicKey.length === PUBLIC_KEY_BYTES, \"Public key must be \".concat(PUBLIC_KEY_BYTES, \" bytes\"));\n      var ethPublicKey;\n\n      try {\n        ethPublicKey = constructEthPubkey(publicKey);\n      } catch (error) {\n        throw new Error(\"Error constructing ethereum public key: \".concat(error));\n      }\n\n      var dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n      var ethAddressOffset = dataStart;\n      var signatureOffset = dataStart + ethPublicKey.length;\n      var messageDataOffset = signatureOffset + signature.length + 1;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n      SECP256K1_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: 0,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: 0,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: 0,\n        signature: toBuffer(signature),\n        ethPublicKey: ethPublicKey,\n        recoveryId: recoveryId\n      }, instructionData);\n      instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Secp256k1Program.programId,\n        data: instructionData\n      });\n    }\n    /**\n     * Create a secp256k1 instruction with private key\n     */\n\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var privateKey = params.privateKey,\n          message = params.message;\n      assert(privateKey.length === PRIVATE_KEY_BYTES, \"Private key must be \".concat(PRIVATE_KEY_BYTES, \" bytes\"));\n\n      try {\n        var publicKey = publicKeyCreate(privateKey, false);\n        var messageHash = createKeccakHash('keccak256').update(toBuffer(message)).digest();\n\n        var _ecdsaSign = ecdsaSign(messageHash, privateKey),\n            signature = _ecdsaSign.signature,\n            recoveryId = _ecdsaSign.recid;\n\n        return this.createInstructionWithPublicKey({\n          publicKey: publicKey,\n          message: message,\n          signature: signature,\n          recoveryId: recoveryId\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }, {\n    key: \"programId\",\n\n    /**\n     * Public key that identifies the Secp256k program\n     */\n    get: function get() {\n      return new PublicKey('KeccakSecp256k11111111111111111111111111111');\n    }\n  }]);\n\n  return Secp256k1Program;\n}();\n\nfunction constructEthPubkey(publicKey) {\n  return createKeccakHash('keccak256').update(toBuffer(publicKey.slice(1))) // throw away leading byte\n  .digest().slice(-HASHED_PUBKEY_SERIALIZED_SIZE);\n}\n\nvar VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @private\n */\n\nvar InfoString = struct$1({\n  name: 'string',\n  website: 'string?',\n  details: 'string?',\n  keybaseUsername: 'string?'\n});\n/**\n * ValidatorInfo class\n */\n\nvar ValidatorInfo = /*#__PURE__*/function () {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  function ValidatorInfo(key, info) {\n    _classCallCheck(this, ValidatorInfo);\n\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"info\", void 0);\n\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  _createClass(ValidatorInfo, null, [{\n    key: \"fromConfigData\",\n    value: function fromConfigData(buffer) {\n      var PUBKEY_LENGTH = 32;\n\n      var byteArray = _toConsumableArray(buffer);\n\n      var configKeyCount = decodeLength(byteArray);\n      if (configKeyCount !== 2) return null;\n      var configKeys = [];\n\n      for (var i = 0; i < 2; i++) {\n        var publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n        byteArray = byteArray.slice(PUBKEY_LENGTH);\n        var isSigner = byteArray.slice(0, 1)[0] === 1;\n        byteArray = byteArray.slice(1);\n        configKeys.push({\n          publicKey: publicKey,\n          isSigner: isSigner\n        });\n      }\n\n      if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n        if (configKeys[1].isSigner) {\n          var rawInfo = rustString().decode(Buffer.from(byteArray));\n          var info = InfoString(JSON.parse(rawInfo));\n          return new ValidatorInfo(configKeys[1].publicKey, info);\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return ValidatorInfo;\n}();\n\nvar VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @private\n */\n\nvar VoteAccountLayout = struct([publicKey('nodePubkey'), publicKey('authorizedVoterPubkey'), publicKey('authorizedWithdrawerPubkey'), u8('commission'), nu64(), // votes.length\nseq(struct([nu64('slot'), u32('confirmationCount')]), offset(u32(), -8), 'votes'), u8('rootSlotValid'), nu64('rootSlot'), nu64('epoch'), nu64('credits'), nu64('lastEpochCredits'), nu64(), // epochCredits.length\nseq(struct([nu64('epoch'), nu64('credits'), nu64('prevCredits')]), offset(u32(), -8), 'epochCredits')]);\n/**\n * VoteAccount class\n */\n\nvar VoteAccount = /*#__PURE__*/function () {\n  function VoteAccount() {\n    _classCallCheck(this, VoteAccount);\n\n    _defineProperty(this, \"nodePubkey\", void 0);\n\n    _defineProperty(this, \"authorizedVoterPubkey\", void 0);\n\n    _defineProperty(this, \"authorizedWithdrawerPubkey\", void 0);\n\n    _defineProperty(this, \"commission\", void 0);\n\n    _defineProperty(this, \"votes\", void 0);\n\n    _defineProperty(this, \"rootSlot\", void 0);\n\n    _defineProperty(this, \"epoch\", void 0);\n\n    _defineProperty(this, \"credits\", void 0);\n\n    _defineProperty(this, \"lastEpochCredits\", void 0);\n\n    _defineProperty(this, \"epochCredits\", void 0);\n  }\n\n  _createClass(VoteAccount, null, [{\n    key: \"fromAccountData\",\n\n    /**\n     * Deserialize VoteAccount from the account data.\n     *\n     * @param buffer account data\n     * @return VoteAccount\n     */\n    value: function fromAccountData(buffer) {\n      var va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n      va.nodePubkey = new PublicKey(va.nodePubkey);\n      va.authorizedVoterPubkey = new PublicKey(va.authorizedVoterPubkey);\n      va.authorizedWithdrawerPubkey = new PublicKey(va.authorizedWithdrawerPubkey);\n\n      if (!va.rootSlotValid) {\n        va.rootSlot = null;\n      }\n\n      return va;\n    }\n  }]);\n\n  return VoteAccount;\n}();\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n\nfunction sendAndConfirmRawTransaction(_x, _x2, _x3) {\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\nfunction _sendAndConfirmRawTransaction() {\n  _sendAndConfirmRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, rawTransaction, options) {\n    var sendOptions, signature, status;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            sendOptions = options && {\n              skipPreflight: options.skipPreflight,\n              preflightCommitment: options.preflightCommitment || options.commitment\n            };\n            _context.next = 3;\n            return connection.sendRawTransaction(rawTransaction, sendOptions);\n\n          case 3:\n            signature = _context.sent;\n            _context.next = 6;\n            return connection.confirmTransaction(signature, options && options.commitment);\n\n          case 6:\n            status = _context.sent.value;\n\n            if (!status.err) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 9:\n            return _context.abrupt(\"return\", signature);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n/**\n * @private\n */\n\n\nvar endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com'\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  var key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  var url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(\"Unknown \".concat(key, \" cluster: \").concat(cluster));\n  }\n\n  return url;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nvar LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, Connection, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PublicKey, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, StakeAuthorizationLayout, StakeInstruction, StakeProgram, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"sources":["../src/util/to-buffer.js","../src/publickey.js","../src/account.js","../src/bpf-loader-deprecated.js","../src/layout.js","../src/util/shortvec-encoding.js","../src/message.js","../src/transaction.js","../src/sysvar.js","../src/fee-calculator.js","../src/nonce-account.js","../src/timing.js","../src/util/sleep.js","../src/util/promise-timeout.js","../src/agent-manager.js","../src/connection.js","../src/util/send-and-confirm-transaction.js","../src/instruction.js","../src/system-program.js","../src/loader.js","../src/bpf-loader.js","../src/stake-program.js","../src/secp256k1-program.js","../src/validator-info.js","../src/vote-account.js","../src/util/send-and-confirm-raw-transaction.js","../src/util/cluster.js","../src/index.js"],"names":["toBuffer","arr","Buffer","naclLowLevel","nacl","MAX_SEED_LENGTH","PublicKey","decoded","bs58","publicKey","b","zeroPad","buffer","fromPublicKey","programId","hash","sha256","seeds","seed","publicKeyBytes","is_on_curve","nonce","seedsWithNonce","address","r","t","chk","num","den","den2","den4","den6","neq25519","gf1","I","c","d","Account","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","_encode","data","chars","authorized","lockup","alloc","type","item","fields","len","size","elem","bytes","rem_len","PUBKEY_LENGTH","Message","args","index","numKeys","keyCount","shortvec","instructions","accounts","programIdIndex","instruction","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","length","signDataLayout","Layout","transaction","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","keys","key","recentBlockhash","signData","byteArray","accountCount","accountKeys","i","account","messageArgs","header","DEFAULT_SIGNATURE","PACKET_DATA_SIZE","SIGNATURE_LENGTH","TransactionInstruction","opts","Object","Transaction","items","nonceInfo","feePayer","programIds","accountMetas","pubkey","isSigner","isWritable","checkSigner","x","y","checkWritable","uniqueMetas","pubkeyString","accountMeta","uniqueIndex","feePayerIndex","payerMeta","signature","console","signedKeys","unsignedKeys","meta","invariant","keyIndex","message","valid","pair","signers","seen","uniqueSigners","signer","sigpair","requireAllSignatures","verifySignatures","signatures","signatureCount","transactionLength","wireTransaction","keyObj","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","span","NonceAccount","nonceAccount","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","setTimeout","timeoutPromise","timeoutId","resolve","clearTimeout","DESTROY_TIMEOUT_MS","AgentManager","options","keepAlive","maxSockets","https","http","useHttps","process","BLOCKHASH_CACHE_TIMEOUT_MS","jsonRpcResult","context","struct","slot","value","resultDescription","jsonRpcVersion","jsonrpc","id","error","result","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","epoch","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","err","Version","SimulatedTransactionResponseValidator","jsonRpcResultAndContext","logs","agentManager","server","jayson","agent","method","body","headers","too_many_requests_retries","res","waitTime","fetch","sleep","text","callback","reject","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","GetBalanceAndContextRpcResult","GetBlockTimeRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","amount","uiAmount","decimals","GetTokenLargestAccountsResult","GetTokenAccountBalance","GetTokenSupplyRpcResult","GetTokenAccountsByOwner","executable","owner","lamports","rentEpoch","GetParsedTokenAccountsByOwner","program","parsed","space","GetLargestAccountsRpcResult","GetVersionRpcResult","AccountInfoResult","ParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetAccountInfoAndContextRpcResult","GetParsedAccountInfoResult","GetStakeActivationResult","GetConfirmedSignaturesForAddressRpcResult","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","AccountNotificationResult","subscription","notificationResultAndContext","ProgramAccountInfoResult","ParsedProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SignatureNotificationResult","RootNotificationResult","GetProgramAccountsRpcResult","GetParsedProgramAccountsRpcResult","GetSlot","GetSlotLeader","GetClusterNodes","gossip","tpu","rpc","version","GetVoteAccounts","current","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","delinquent","GetSignatureStatusesRpcResult","confirmations","confirmationStatus","GetTransactionCountRpcResult","GetTotalSupplyRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedConfirmedTransactionResult","writable","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","accountIndex","mint","uiTokenAmount","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","transactions","rewards","postBalance","rewardType","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","feeCalculator","lamportsPerSignature","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","Connection","url","urlParse","createRpcRequest","lastFetch","transactionSignatures","simulatedSignatures","String","Number","urlFormat","autoconnect","max_reconnects","Infinity","unsafeRes","assert","tokenMintAddress","tokenAddress","_args","ownerAddress","filter","arg","commitment","config","mintAddress","resultData","decodedSignature","start","Date","subscriptionCommitment","response","confirmPromise","subscriptionId","timeoutMs","promiseTimeout","duration","params","limit","inner","ix","accountKey","mapped","accountInfo","to","expired","startTime","disableCache","encodedTransaction","encoding","skipPreflight","preflightCommitment","Array","traceIndent","logTrace","setInterval","clearInterval","code","sub","unsubscribeId","s","programKeys","slotKeys","signatureKeys","rootKeys","subInfo","accountId","override","sendOptions","connection","status","JSON","allocLength","layoutFields","SystemInstruction","instructionTypeLayout","typeIndex","SYSTEM_INSTRUCTION_LAYOUTS","decodeData","fromPubkey","newAccountPubkey","toPubkey","basePubkey","accountPubkey","base","noncePubkey","authorizedPubkey","newAuthorizedPubkey","SystemProgram","Create","layout","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","encodeData","initParams","instructionData","Loader","Math","balanceNeeded","programInfo","payer","sendAndConfirmTransaction","dataLayout","chunkSize","offset","array","REQUESTS_PER_SECOND","Promise","BPF_LOADER_PROGRAM_ID","BpfLoader","STAKE_CONFIG_ID","Authorized","Lockup","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","stakePubkey","newAuthorized","stakeAuthorizationType","o","authoritySeed","authorityOwner","authorityBase","splitStakePubkey","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","staker","withdrawer","unixTimestamp","custodian","custodianPubkey","publicKeyCreate","ecdsaSign","secp256k1","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","HASHED_PUBKEY_SERIALIZED_SIZE","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","ethPublicKey","constructEthPubkey","dataStart","ethAddressOffset","signatureOffset","messageDataOffset","numSignatures","signatureInstructionIndex","ethAddressInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","messageHash","createKeccakHash","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","configKeyCount","configKeys","rawInfo","info","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","va","endpoint","devnet","testnet","tls","LAMPORTS_PER_SOL"],"mappings":"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","sourcesContent":["// @flow\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\n//$FlowFixMe\nlet naclLowLevel = nacl.lowlevel;\n\ntype PublicKeyNonce = [PublicKey, number]; // This type exists to workaround an esdoc parse error\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Uint8Array | Array<number>) {\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      const decoded = bs58.decode(value);\n      if (decoded.length != 32) {\n        throw new Error(`Invalid public key input`);\n      }\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new Error(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, Buffer.from(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(null, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKeyNonce> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n}\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0,\n  0x4a0e,\n  0x1b27,\n  0xc4ee,\n  0xe478,\n  0xad2f,\n  0x1806,\n  0x2f43,\n  0xd7a7,\n  0x3dfb,\n  0x0099,\n  0x2b4d,\n  0xdf0b,\n  0x4fc1,\n  0x2480,\n  0x2b83,\n]);\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n","// @flow\n\nimport {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: Object, fields: Object): number {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","// @flow\n\nimport bs58 from 'bs58';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\n\n/**\n * The message header, identifying signed and read-only account\n *\n * @typedef {Object} MessageHeader\n * @property {number} numRequiredSignatures The number of signatures required for this message to be considered valid. The\n * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n * @property {number} numReadonlySignedAccounts: The last `numReadonlySignedAccounts` of the signed keys are read-only accounts\n * @property {number} numReadonlyUnsignedAccounts The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts\n */\nexport type MessageHeader = {\n  numRequiredSignatures: number,\n  numReadonlySignedAccounts: number,\n  numReadonlyUnsignedAccounts: number,\n};\n\n/**\n * An instruction to execute by a program\n *\n * @typedef {Object} CompiledInstruction\n * @property {number} programIdIndex Index into the transaction keys array indicating the program account that executes this instruction\n * @property {number[]} accounts Ordered indices into the transaction keys array indicating which accounts to pass to the program\n * @property {string} data The program input data encoded as base 58\n */\nexport type CompiledInstruction = {\n  programIdIndex: number,\n  accounts: number[],\n  data: string,\n};\n\n/**\n * Message constructor arguments\n *\n * @typedef {Object} MessageArgs\n * @property {MessageHeader} header The message header, identifying signed and read-only `accountKeys`\n * @property {string[]} accounts All the account keys used by this transaction\n * @property {Blockhash} recentBlockhash The hash of a recent ledger block\n * @property {CompiledInstruction[]} instructions Instructions that will be executed in sequence and committed in one atomic transaction if all succeed.\n */\ntype MessageArgs = {\n  header: MessageHeader,\n  accountKeys: string[],\n  recentBlockhash: Blockhash,\n  instructions: CompiledInstruction[],\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => key.toBuffer()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIdIndex = byteArray.shift();\n      const accountCount = shortvec.decodeLength(byteArray);\n      instruction.accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = byteArray.slice(0, dataLength);\n      instruction.data = bs58.encode(Buffer.from(data));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport type {CompiledInstruction} from './message';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n *\n * @typedef {Object} AccountMeta\n * @property {PublicKey} pubkey An account's public key\n * @property {boolean} isSigner True if an instruction requires a transaction signature matching `pubkey`\n * @property {boolean} isWritable True if the `pubkey` can be loaded as a read-write account.\n */\nexport type AccountMeta = {\n  pubkey: PublicKey,\n  isSigner: boolean,\n  isWritable: boolean,\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} data\n */\nexport type TransactionInstructionCtorFields = {|\n  keys?: Array<AccountMeta>,\n  programId?: PublicKey,\n  data?: Buffer,\n|};\n\n/**\n * Configuration object for Transaction.serialize()\n *\n * @typedef {Object} SerializeConfig\n * @property {boolean|undefined} requireAllSignatures Require all transaction signatures be present (default: true)\n * @property {boolean|undefined} verifySignatures Verify provided signatures (default: true)\n */\nexport type SerializeConfig = {\n  requireAllSignatures?: boolean,\n  verifySignatures?: boolean,\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property {?Blockhash} recentBlockhash A recent blockhash\n * @property {?PublicKey} feePayer The transaction fee payer\n * @property {?Array<SignaturePubkeyPair>} signatures One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  recentBlockhash?: Blockhash | null,\n  nonceInfo?: NonceInformation | null,\n  feePayer?: PublicKey | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * NonceInformation to be used to build a Transaction.\n *\n * @typedef {Object} NonceInformation\n * @property {Blockhash} nonce The current Nonce blockhash\n * @property {TransactionInstruction} nonceInstruction AdvanceNonceAccount Instruction\n */\ntype NonceInformation = {|\n  nonce: Blockhash,\n  nonceInstruction: TransactionInstruction,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer: ?PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash: ?Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo: ?NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @private\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @private\n   */\n  _partialSign(message: Message, ...signers: Array<Account>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, signature);\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @private\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @private\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @private\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","// @flow\nimport {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @private\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * @typedef {Object} FeeCalculator\n * @property {number} lamportsPerSignature lamports Cost in lamports to validate a signature\n */\nexport type FeeCalculator = {\n  lamportsPerSignature: number,\n};\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @private\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    nonceAccount.authorizedPubkey = new PublicKey(\n      nonceAccount.authorizedPubkey,\n    );\n    nonceAccount.nonce = new PublicKey(nonceAccount.nonce).toString();\n    return nonceAccount;\n  }\n}\n","// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @ignore\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @ignore\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @flow\n\nexport function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: TimeoutID;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","// @flow\n\nimport http from 'http';\nimport https from 'https';\n\nexport const DESTROY_TIMEOUT_MS = 5000;\n\nexport class AgentManager {\n  _agent: http.Agent | https.Agent;\n  _activeRequests = 0;\n  _destroyTimeout: TimeoutID | null = null;\n  _useHttps: boolean;\n\n  static _newAgent(useHttps: boolean): http.Agent | https.Agent {\n    const options = {keepAlive: true, maxSockets: 25};\n    if (useHttps) {\n      return new https.Agent(options);\n    } else {\n      return new http.Agent(options);\n    }\n  }\n\n  constructor(useHttps?: boolean) {\n    this._useHttps = useHttps === true;\n    this._agent = AgentManager._newAgent(this._useHttps);\n  }\n\n  requestStart(): http.Agent | https.Agent {\n    // $FlowExpectedError - Don't manage agents in the browser\n    if (process.browser) return;\n\n    this._activeRequests++;\n    clearTimeout(this._destroyTimeout);\n    this._destroyTimeout = null;\n    return this._agent;\n  }\n\n  requestEnd() {\n    // $FlowExpectedError - Don't manage agents in the browser\n    if (process.browser) return;\n\n    this._activeRequests--;\n    if (this._activeRequests === 0 && this._destroyTimeout === null) {\n      this._destroyTimeout = setTimeout(() => {\n        this._agent.destroy();\n        this._agent = AgentManager._newAgent(this._useHttps);\n      }, DESTROY_TIMEOUT_MS);\n    }\n  }\n}\n","// @flow\n\nimport assert from 'assert';\nimport bs58 from 'bs58';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\nimport {AgentManager} from './agent-manager';\n\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype TokenAccountsFilter =\n  | {|\n      mint: PublicKey,\n    |}\n  | {|\n      programId: PublicKey,\n    |};\n\n/**\n * Extra contextual information for RPC responses\n *\n * @typedef {Object} Context\n * @property {number} slot\n */\ntype Context = {\n  slot: number,\n};\n\n/**\n * Options for sending transactions\n *\n * @typedef {Object} SendOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type SendOptions = {\n  skipPreflight?: boolean,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for confirming transactions\n *\n * @typedef {Object} ConfirmOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} commitment desired commitment level\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type ConfirmOptions = {\n  skipPreflight?: boolean,\n  commitment?: Commitment,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n *\n * @typedef {Object} ConfirmedSignaturesForAddress2Options\n * @property {TransactionSignature | undefined} before start searching backwards from this transaction signature.\n *               If not provided the search starts from the highest max confirmed block.\n * @property {number | undefined} limit maximum transaction signatures to return (between 1 and 1,000, default: 1,000).\n *\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  before?: TransactionSignature,\n  limit?: number,\n};\n\n/**\n * RPC Response with extra contextual information\n *\n * @typedef {Object} RpcResponseAndContext\n * @property {Context} context\n * @property {T} value response\n */\ntype RpcResponseAndContext<T> = {\n  context: Context,\n  value: T,\n};\n\n/**\n * @private\n */\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return jsonRpcResult({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nfunction notificationResultAndContext(resultDescription: any) {\n  return struct({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'max':    Query the most recent block which has been finalized by the cluster\n *   'recent': Query the most recent block which has reached 1 confirmation by the connected node\n *   'root':   Query the most recent block which has been rooted by the connected node\n *   'single': Query the most recent block which has reached 1 confirmation by the cluster\n *   'singleGossip': Query the most recent block which has reached 1 confirmation according to votes seen in gossip\n * </pre>\n *\n * @typedef {'max' | 'recent' | 'root' | 'single' | 'singleGossip'} Commitment\n */\nexport type Commitment = 'max' | 'recent' | 'root' | 'single' | 'singleGossip';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n *\n * @typedef {'circulating' | 'nonCirculating'} LargestAccountsFilter\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n *\n * @typedef {Object} GetLargestAccountsConfig\n * @property {Commitment|undefined} commitment The level of commitment desired\n * @property {LargestAccountsFilter|undefined} filter Filter largest accounts by whether they are part of the circulating supply\n */\ntype GetLargestAccountsConfig = {\n  commitment: ?Commitment,\n  filter: ?LargestAccountsFilter,\n};\n\n/**\n * Configuration object for changing query behavior\n *\n * @typedef {Object} SignatureStatusConfig\n * @property {boolean} searchTransactionHistory enable searching status history, not needed for recent transactions\n */\nexport type SignatureStatusConfig = {\n  searchTransactionHistory: boolean,\n};\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string|null} gossip Gossip network address for the node\n * @property {string|null} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n * @property {string|null} version Software version of the node (null if not available)\n */\ntype ContactInfo = {\n  pubkey: string,\n  gossip: string | null,\n  tpu: string | null,\n  rpc: string | null,\n  version: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {number} activatedStake The stake, in lamports, delegated to this vote account and activated\n * @property {boolean} epochVoteAccount Whether the vote account is staked for this epoch\n * @property {Array<Array<number>>} epochCredits Recent epoch voting credit history for this voter\n * @property {number} commission A percentage (0-100) of rewards payout owed to the voter\n * @property {number} lastVote Most recent slot voted on by this vote account\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  activatedStake: number,\n  epochVoteAccount: boolean,\n  epochCredits: Array<[number, number, number]>,\n  commission: number,\n  lastVote: number,\n};\n\n/**\n * A collection of cluster vote accounts\n *\n * @typedef {Object} VoteAccountStatus\n * @property {Array<VoteAccountInfo>} current Active vote accounts\n * @property {Array<VoteAccountInfo>} delinquent Inactive vote accounts\n */\ntype VoteAccountStatus = {\n  current: Array<VoteAccountInfo>,\n  delinquent: Array<VoteAccountInfo>,\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n *\n * @typedef {Object} InflationGovernor\n * @property {number} foundation\n * @property {number} foundation_term\n * @property {number} initial\n * @property {number} taper\n * @property {number} terminal\n */\ntype InflationGovernor = {\n  foundation: number,\n  foundationTerm: number,\n  initial: number,\n  taper: number,\n  terminal: number,\n};\n\nconst GetInflationGovernorResult = struct({\n  foundation: 'number',\n  foundationTerm: 'number',\n  initial: 'number',\n  taper: 'number',\n  terminal: 'number',\n});\n\n/**\n * Information about the current epoch\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n * @property {number} blockHeight\n * @property {number} transactionCount\n */\ntype EpochInfo = {\n  epoch: number,\n  slotIndex: number,\n  slotsInEpoch: number,\n  absoluteSlot: number,\n  blockHeight: number | null,\n  transactionCount: number | null,\n};\n\nconst GetEpochInfoResult = struct({\n  epoch: 'number',\n  slotIndex: 'number',\n  slotsInEpoch: 'number',\n  absoluteSlot: 'number',\n  blockHeight: 'number?',\n  transactionCount: 'number?',\n});\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slotsPerEpoch The maximum number of slots in each epoch\n * @property {number} leaderScheduleSlotOffset The number of slots before beginning of an epoch to calculate a leader schedule for that epoch\n * @property {boolean} warmup Indicates whether epochs start short and grow\n * @property {number} firstNormalEpoch The first epoch with `slotsPerEpoch` slots\n * @property {number} firstNormalSlot The first slot of `firstNormalEpoch`\n */\ntype EpochSchedule = {\n  slotsPerEpoch: number,\n  leaderScheduleSlotOffset: number,\n  warmup: boolean,\n  firstNormalEpoch: number,\n  firstNormalSlot: number,\n};\n\nconst GetEpochScheduleResult = struct({\n  slotsPerEpoch: 'number',\n  leaderScheduleSlotOffset: 'number',\n  warmup: 'boolean',\n  firstNormalEpoch: 'number',\n  firstNormalSlot: 'number',\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n *\n * @typedef {Object} LeaderSchedule\n */\ntype LeaderSchedule = {\n  [address: string]: number[],\n};\n\nconst GetLeaderScheduleResult = struct.record([\n  'string',\n  'any', // validating struct.array(['number']) is extremely slow\n]);\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = struct.union(['null', 'object']);\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = struct({err: TransactionErrorResult});\n\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\nconst Version = struct.pick({\n  'solana-core': 'string',\n  'feature-set': 'number?',\n});\n\ntype SimulatedTransactionResponse = {\n  err: TransactionError | string | null,\n  logs: Array<string> | null,\n};\n\nconst SimulatedTransactionResponseValidator = jsonRpcResultAndContext(\n  struct.pick({\n    err: struct.union(['null', 'object', 'string']),\n    logs: struct.union(['null', struct.array(['string'])]),\n  }),\n);\n\ntype ParsedInnerInstruction = {\n  index: number,\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n};\n\ntype TokenBalance = {\n  accountIndex: number,\n  mint: string,\n  uiTokenAmount: TokenAmount,\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<ParsedInnerInstruction>} innerInstructions An array of cross program invoked parsed instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {Array<TokenBalance>} preTokenBalances The token balances of the transaction accounts before processing\n * @property {Array<TokenBalance>} postTokenBalances The token balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ParsedConfirmedTransactionMeta = {\n  fee: number,\n  innerInstructions?: ParsedInnerInstruction[],\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  logMessages?: Array<string>,\n  preTokenBalances?: Array<TokenBalance>,\n  postTokenBalances?: Array<TokenBalance>,\n  err: TransactionError | null,\n};\n\ntype CompiledInnerInstruction = {\n  index: number,\n  instructions: CompiledInstruction[],\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<CompiledInnerInstruction>} innerInstructions An array of cross program invoked instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {Array<TokenBalance>} preTokenBalances The token balances of the transaction accounts before processing\n * @property {Array<TokenBalance>} postTokenBalances The token balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ConfirmedTransactionMeta = {\n  fee: number,\n  innerInstructions?: CompiledInnerInstruction[],\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  logMessages?: Array<string>,\n  preTokenBalances?: Array<TokenBalance>,\n  postTokenBalances?: Array<TokenBalance>,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {Transaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n * @property {number|null|undefined} blockTime The unix timestamp of when the transaction was processed\n */\ntype ConfirmedTransaction = {\n  slot: number,\n  transaction: Transaction,\n  meta: ConfirmedTransactionMeta | null,\n  blockTime?: number | null,\n};\n\n/**\n * A partially decoded transaction instruction\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {PublicKey} accounts Indicates if the account signed the transaction\n * @property {string} data Raw base-58 instruction data\n */\ntype PartiallyDecodedInstruction = {|\n  programId: PublicKey,\n  accounts: Array<PublicKey>,\n  data: string,\n|};\n\n/**\n * A parsed transaction message account\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {boolean} signer Indicates if the account signed the transaction\n * @property {boolean} writable Indicates if the account is writable for this transaction\n */\ntype ParsedMessageAccount = {\n  pubkey: PublicKey,\n  signer: boolean,\n  writable: boolean,\n};\n\n/**\n * A parsed transaction instruction\n *\n * @typedef {Object} ParsedInstruction\n * @property {string} program Name of the program for this instruction\n * @property {PublicKey} programId ID of the program for this instruction\n * @property {any} parsed Parsed instruction info\n */\ntype ParsedInstruction = {|\n  program: string,\n  programId: PublicKey,\n  parsed: any,\n|};\n\n/**\n * A parsed transaction message\n *\n * @typedef {Object} ParsedMessage\n * @property {Array<ParsedMessageAccount>} accountKeys Accounts used in the instructions\n * @property {Array<ParsedInstruction | PartiallyDecodedInstruction>} instructions The atomically executed instructions for the transaction\n * @property {string} recentBlockhash Recent blockhash\n */\ntype ParsedMessage = {\n  accountKeys: ParsedMessageAccount[],\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n  recentBlockhash: string,\n};\n\n/**\n * A parsed transaction\n *\n * @typedef {Object} ParsedTransaction\n * @property {Array<string>} signatures Signatures for the transaction\n * @property {ParsedMessage} message Message of the transaction\n */\ntype ParsedTransaction = {\n  signatures: Array<string>,\n  message: ParsedMessage,\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {ParsedTransaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n * @property {number|null|undefined} blockTime The unix timestamp of when the transaction was processed\n */\ntype ParsedConfirmedTransaction = {\n  slot: number,\n  transaction: ParsedTransaction,\n  meta: ParsedConfirmedTransactionMeta | null,\n  blockTime?: number | null,\n};\n\n/**\n * A ConfirmedBlock on the ledger\n *\n * @typedef {Object} ConfirmedBlock\n * @property {Blockhash} blockhash Blockhash of this block\n * @property {Blockhash} previousBlockhash Blockhash of this block's parent\n * @property {number} parentSlot Slot index of this block's parent\n * @property {Array<object>} transactions Vector of transactions and status metas\n * @property {Array<object>} rewards Vector of block rewards\n */\ntype ConfirmedBlock = {\n  blockhash: Blockhash,\n  previousBlockhash: Blockhash,\n  parentSlot: number,\n  transactions: Array<{\n    transaction: Transaction,\n    meta: ConfirmedTransactionMeta | null,\n  }>,\n  rewards: Array<{\n    pubkey: string,\n    lamports: number,\n    postBalance: number | null,\n    rewardType: string | null,\n  }>,\n};\n\n/**\n * A performance sample\n *\n * @typedef {Object} PerfSample\n * @property {number} slot Slot number of sample\n * @property {number} numTransactions Number of transactions in a sample window\n * @property {number} numSlots Number of slots in a sample window\n * @property {number} samplePeriodSecs Sample window in seconds\n */\ntype PerfSample = {\n  slot: number,\n  numTransactions: number,\n  numSlots: number,\n  samplePeriodSecs: number,\n};\n\nfunction createRpcRequest(url: string, useHttps: boolean): RpcRequest {\n  const agentManager = new AgentManager(useHttps);\n\n  const server = jayson(async (request, callback) => {\n    const agent = agentManager.requestStart();\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res = {};\n      let waitTime = 500;\n      for (;;) {\n        res = await fetch(url, options);\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager.requestEnd();\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetInflationGovernorResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochScheduleResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\nconst GetBalanceAndContextRpcResult = jsonRpcResultAndContext('number?');\n\n/**\n * Expected JSON RPC response for the \"getBlockTime\" message\n */\nconst GetBlockTimeRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: struct.union(['null', 'number', 'undefined']),\n});\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number',\n});\n\n/**\n * Supply\n *\n * @typedef {Object} Supply\n * @property {number} total Total supply in lamports\n * @property {number} circulating Circulating supply in lamports\n * @property {number} nonCirculating Non-circulating supply in lamports\n * @property {Array<PublicKey>} nonCirculatingAccounts List of non-circulating account addresses\n */\ntype Supply = {\n  total: number,\n  circulating: number,\n  nonCirculating: number,\n  nonCirculatingAccounts: Array<PublicKey>,\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  struct({\n    total: 'number',\n    circulating: 'number',\n    nonCirculating: 'number',\n    nonCirculatingAccounts: struct.array(['string']),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n *\n * @typedef {Object} TokenAmount\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAmount = {\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = struct.object({\n  amount: 'string',\n  uiAmount: 'number',\n  decimals: 'number',\n});\n\n/**\n * Token address and balance.\n *\n * @typedef {Object} TokenAccountBalancePair\n * @property {PublicKey} address Address of the token account\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAccountBalancePair = {\n  address: PublicKey,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.pick({\n      address: 'string',\n      amount: 'string',\n      uiAmount: 'number',\n      decimals: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountBalance\" message\n */\nconst GetTokenAccountBalance = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenSupply\" message\n */\nconst GetTokenSupplyRpcResult = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: ['string', struct.literal('base64')],\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: struct.pick({\n          program: 'string',\n          parsed: 'any',\n          space: 'number',\n        }),\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Pair of an account address and its balance\n *\n * @typedef {Object} AccountBalancePair\n * @property {PublicKey} address\n * @property {number} lamports\n */\ntype AccountBalancePair = {\n  address: PublicKey,\n  lamports: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct({\n      lamports: 'number',\n      address: 'string',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVersion\" message\n */\nconst GetVersionRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: Version,\n});\n\n/**\n * @private\n */\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst ParsedAccountInfoResult = struct.object({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: struct.union([\n    ['string', struct.literal('base64')],\n    struct.pick({\n      program: 'string',\n      parsed: 'any',\n      space: 'number',\n    }),\n  ]),\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst StakeActivationResult = struct.object({\n  state: struct.union([\n    struct.literal('active'),\n    struct.literal('inactive'),\n    struct.literal('activating'),\n    struct.literal('deactivating'),\n  ]),\n  active: 'number',\n  inactive: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\nconst GetAccountInfoAndContextRpcResult = jsonRpcResultAndContext(\n  struct.union(['null', AccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message with jsonParsed param\n */\nconst GetParsedAccountInfoResult = jsonRpcResultAndContext(\n  struct.union(['null', ParsedAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getStakeActivation\" message with jsonParsed param\n */\nconst GetStakeActivationResult = jsonRpcResult(StakeActivationResult);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress\" message\n */\nconst GetConfirmedSignaturesForAddressRpcResult = jsonRpcResult(\n  struct.array(['string']),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      signature: 'string',\n      slot: 'number',\n      err: TransactionErrorResult,\n      memo: struct.union(['null', 'string']),\n      blockTime: struct.union(['undefined', 'null', 'number']),\n    }),\n  ]),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @private\n */\nconst ProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: AccountInfoResult,\n});\n\n/**\n * @private\n */\nconst ParsedProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: ParsedAccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @private\n */\nconst SlotInfoResult = struct({\n  parent: 'number',\n  slot: 'number',\n  root: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = struct({\n  subscription: 'number',\n  result: SlotInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(SignatureStatusResult),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = struct({\n  subscription: 'number',\n  result: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetParsedProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ParsedProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getSlot\" message\n */\nconst GetSlot = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getSlotLeader\" message\n */\nconst GetSlotLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"getClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      pubkey: 'string',\n      gossip: struct.union(['null', 'string']),\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n      version: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  struct({\n    current: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n    delinquent: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.union([\n      'null',\n      struct.pick({\n        slot: 'number',\n        confirmations: struct.union(['number', 'null']),\n        err: TransactionErrorResult,\n        confirmationStatus: 'string?',\n      }),\n    ]),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\nconst GetTransactionCountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\nconst GetTotalSupplyRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult('number');\n\n/**\n * @private\n */\nconst ConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array(['string']),\n    header: struct({\n      numRequiredSignatures: 'number',\n      numReadonlySignedAccounts: 'number',\n      numReadonlyUnsignedAccounts: 'number',\n    }),\n    instructions: struct.array([\n      struct({\n        accounts: struct.array(['number']),\n        data: 'string',\n        programIdIndex: 'number',\n      }),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ParsedConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array([\n      struct({\n        pubkey: 'string',\n        signer: 'boolean',\n        writable: 'boolean',\n      }),\n    ]),\n    instructions: struct.array([\n      struct.union([\n        struct({\n          accounts: struct.array(['string']),\n          data: 'string',\n          programId: 'string',\n        }),\n        struct({\n          parsed: 'any',\n          program: 'string',\n          programId: 'string',\n        }),\n      ]),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ConfirmedTransactionMetaResult = struct.union([\n  'null',\n  struct.pick({\n    err: TransactionErrorResult,\n    fee: 'number',\n    innerInstructions: struct.union([\n      struct.array([\n        struct({\n          index: 'number',\n          instructions: struct.array([\n            struct({\n              accounts: struct.array(['number']),\n              data: 'string',\n              programIdIndex: 'number',\n            }),\n          ]),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    preBalances: struct.array(['number']),\n    postBalances: struct.array(['number']),\n    logMessages: struct.union([struct.array(['string']), 'null', 'undefined']),\n    preTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    postTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n  }),\n]);\n/**\n * @private\n */\nconst ParsedConfirmedTransactionMetaResult = struct.union([\n  'null',\n  struct.pick({\n    err: TransactionErrorResult,\n    fee: 'number',\n    innerInstructions: struct.union([\n      struct.array([\n        struct({\n          index: 'number',\n          instructions: struct.array([\n            struct.union([\n              struct({\n                accounts: struct.array(['string']),\n                data: 'string',\n                programId: 'string',\n              }),\n              struct({\n                parsed: 'any',\n                program: 'string',\n                programId: 'string',\n              }),\n            ]),\n          ]),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    preBalances: struct.array(['number']),\n    postBalances: struct.array(['number']),\n    logMessages: struct.union([struct.array(['string']), 'null', 'undefined']),\n    preTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    postTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nexport const GetConfirmedBlockRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      blockhash: 'string',\n      previousBlockhash: 'string',\n      parentSlot: 'number',\n      transactions: struct.array([\n        struct({\n          transaction: ConfirmedTransactionResult,\n          meta: ConfirmedTransactionMetaResult,\n        }),\n      ]),\n      rewards: struct.union([\n        'undefined',\n        struct.array([\n          struct({\n            pubkey: 'string',\n            lamports: 'number',\n            postBalance: struct.union(['number', 'undefined']),\n            rewardType: struct.union(['string', 'undefined']),\n          }),\n        ]),\n      ]),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ConfirmedTransactionResult,\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: struct.union(['number', 'null', 'undefined']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ParsedConfirmedTransactionResult,\n      meta: ParsedConfirmedTransactionMetaResult,\n      blockTime: struct.union(['number', 'null', 'undefined']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  struct({\n    blockhash: 'string',\n    feeCalculator: struct({\n      lamportsPerSignature: 'number',\n    }),\n  }),\n);\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      slot: 'number',\n      numTransactions: 'number',\n      numSlots: 'number',\n      samplePeriodSecs: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  struct.union([\n    'null',\n    struct({\n      feeCalculator: struct({\n        lamportsPerSignature: 'number',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult('string');\n\n/**\n * Information about the latest slot being processed by a node\n *\n * @typedef {Object} SlotInfo\n * @property {number} slot Currently processing slot\n * @property {number} parent Parent of the current slot\n * @property {number} root The root block of the current slot's fork\n */\ntype SlotInfo = {\n  slot: number,\n  parent: number,\n  root: number,\n};\n\n/**\n * Parsed account data\n *\n * @typedef {Object} ParsedAccountData\n * @property {string} program Name of the program that owns this account\n * @property {any} parsed Parsed account data\n * @property {number} space Space used by account data\n */\ntype ParsedAccountData = {\n  program: string,\n  parsed: any,\n  space: number,\n};\n\n/**\n * Stake Activation data\n *\n * @typedef {Object} StakeActivationData\n * @property {string} state: <string - the stake account's activation state, one of: active, inactive, activating, deactivating\n * @property {number} active: stake active during the epoch\n * @property {number} inactive: stake inactive during the epoch\n */\ntype StakeActivationData = {\n  state: 'active' | 'inactive' | 'activating' | 'deactivating',\n  active: number,\n  inactive: number,\n};\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {T} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountInfo<T> = {\n  executable: boolean,\n  owner: PublicKey,\n  lamports: number,\n  data: T,\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo<Buffer>} accountInfo\n */\ntype KeyedAccountInfo = {\n  accountId: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string, // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @private\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature, // TransactionSignature as a base 58 string\n  callback: SignatureResultCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @private\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Signature result\n *\n * @typedef {Object} SignatureResult\n */\nexport type SignatureResult = {|\n  err: TransactionError | null,\n|};\n\n/**\n * Transaction error\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {};\n\n/**\n * Signature status\n *\n * @typedef {Object} SignatureStatus\n * @property {number} slot when the transaction was processed\n * @property {number | null} confirmations the number of blocks that have been confirmed and voted on in the fork containing `slot` (TODO)\n * @property {TransactionError | null} err error, if any\n * @property {string | null} confirmationStatus the transaction's cluster confirmation status, if data available. Possible non-null responses: `processed`, `confirmed`, `finalized`\n */\nexport type SignatureStatus = {\n  slot: number,\n  confirmations: number | null,\n  err: TransactionError | null,\n  confirmationStatus: string | null,\n};\n\n/**\n * A confirmed signature with its status\n *\n * @typedef {Object} ConfirmedSignatureInfo\n * @property {string} signature the transaction signature\n * @property {number} slot when the transaction was processed\n * @property {TransactionError | null} err error, if any\n * @property {string | null} memo memo associated with the transaction, if any\n * @property {number | null | undefined} blockTime The unix timestamp of when the transaction was processed\n */\nexport type ConfirmedSignatureInfo = {\n  signature: string,\n  slot: number,\n  err: TransactionError | null,\n  memo: string | null,\n  blockTime?: number | null,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcEndpoint: string;\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n  _rpcWebSocketHeartbeat: IntervalID | null = null;\n  _rpcWebSocketIdleTimeout: TimeoutID | null = null;\n\n  _commitment: ?Commitment;\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    lastFetch: Date,\n    simulatedSignatures: Array<string>,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _pollingBlockhash: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _programAccountChangeSubscriptions: {\n    [number]: ProgramAccountSubscriptionInfo,\n  } = {};\n  _programAccountChangeSubscriptionCounter: number = 0;\n  _slotSubscriptions: {\n    [number]: SlotSubscriptionInfo,\n  } = {};\n  _slotSubscriptionCounter: number = 0;\n  _signatureSubscriptions: {\n    [number]: SignatureSubscriptionInfo,\n  } = {};\n  _signatureSubscriptionCounter: number = 0;\n  _rootSubscriptions: {\n    [number]: RootSubscriptionInfo,\n  } = {};\n  _rootSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  constructor(endpoint: string, commitment: ?Commitment) {\n    this._rpcEndpoint = endpoint;\n\n    let url = urlParse(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    this._rpcRequest = createRpcRequest(url.href, useHttps);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: new Date(0),\n      transactionSignatures: [],\n      simulatedSignatures: [],\n    };\n\n    url.protocol = useHttps ? 'wss:' : 'ws:';\n    url.host = '';\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): ?Commitment {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = GetBalanceAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = GetBlockTimeRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = GetSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value.nonCirculatingAccounts = res.result.value.nonCirculatingAccounts.map(\n      account => new PublicKey(account),\n    );\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = GetTokenSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = GetTokenAccountBalance(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => {\n        assert(result.account.data[1] === 'base64');\n        return {\n          pubkey: new PublicKey(result.pubkey),\n          account: {\n            executable: result.account.executable,\n            owner: new PublicKey(result.account.owner),\n            lamports: result.account.lamports,\n            data: Buffer.from(result.account.data[0], 'base64'),\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetParsedTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => ({\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: result.account.data,\n        },\n      })),\n    };\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config: ?GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = GetLargestAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(({address, lamports}) => ({\n      address: new PublicKey(address),\n      lamports,\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = GetTokenLargestAccountsResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(pair => ({\n      ...pair,\n      address: new PublicKey(pair.address),\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetAccountInfoAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data} = res.result.value;\n      assert(data[1] === 'base64');\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>,\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetParsedAccountInfoResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data: resultData} = res.result.value;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data,\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    return await this.getAccountInfoAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n    epoch: ?number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = GetStakeActivationResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    const {state, active, inactive} = res.result;\n    return {state, active, inactive};\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>> {\n    const args = this._buildArgs([programId.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      assert(result.account.data[1] === 'base64');\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: Buffer.from(result.account.data[0], 'base64'),\n        },\n      };\n    });\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey,\n      account: AccountInfo<Buffer | ParsedAccountData>,\n    }>,\n  > {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetParsedProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      const resultData = result.account.data;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data,\n        },\n      };\n    });\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result, context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve();\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'recent':\n      case 'single':\n      case 'singleGossip': {\n        timeoutMs = 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment: ?Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = GetVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = GetSlot(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment: ?Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = GetSlotLeader(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(value.length === 1);\n    return {context, value: value[0]};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = GetSignatureStatusesRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = GetTransactionCountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   */\n  async getTotalSupply(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTotalSupply', args);\n    const res = GetTotalSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('faied to get total supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment: ?Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = GetInflationGovernorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetInflationGovernorResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment: ?Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = GetEpochInfoRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochInfoResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = GetEpochScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochScheduleResult(res.result);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = GetLeaderScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = GetMinimumBalanceForRentExemptionRpcResult(unsafeRes);\n    if (res.error) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>,\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n\n    const res = GetRecentBlockhashAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit: ?number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n\n    const res = GetRecentPerformanceSamplesRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = GetFeeCalculatorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value && value.feeCalculator,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment: ?Commitment,\n  ): Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}> {\n    return await this.getRecentBlockhashAndContext(commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error('failed to get recent blockhash: ' + e);\n      });\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = GetVersionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(slot: number): Promise<ConfirmedBlock> {\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', [slot]);\n    const res = GetConfirmedBlockRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    assert(typeof result !== 'undefined');\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return {\n      blockhash: new PublicKey(result.blockhash).toString(),\n      previousBlockhash: new PublicKey(result.previousBlockhash).toString(),\n      parentSlot: result.parentSlot,\n      transactions: result.transactions.map(result => {\n        const {message, signatures} = result.transaction;\n        return {\n          transaction: Transaction.populate(new Message(message), signatures),\n          meta: result.meta,\n        };\n      }),\n      rewards: result.rewards || [],\n    };\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n    ]);\n    const {result, error} = GetConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) {\n      return result;\n    }\n\n    const {message, signatures} = result.transaction;\n    return {\n      slot: result.slot,\n      transaction: Transaction.populate(new Message(message), signatures),\n      meta: result.meta,\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n      'jsonParsed',\n    ]);\n    const {result, error} = GetParsedConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) return result;\n\n    if (result.meta.innerInstructions) {\n      result.meta.innerInstructions.forEach(inner => {\n        inner.instructions.forEach(ix => {\n          ix.programId = new PublicKey(ix.programId);\n\n          if (ix.accounts) {\n            ix.accounts = ix.accounts.map(account => new PublicKey(account));\n          }\n        });\n      });\n    }\n\n    const {\n      accountKeys,\n      instructions,\n      recentBlockhash,\n    } = result.transaction.message;\n    return {\n      slot: result.slot,\n      meta: result.meta,\n      transaction: {\n        signatures: result.transaction.signatures,\n        message: {\n          accountKeys: accountKeys.map(accountKey => ({\n            pubkey: new PublicKey(accountKey.pubkey),\n            signer: accountKey.signer,\n            writable: accountKey.writable,\n          })),\n          instructions: instructions.map(ix => {\n            let mapped: any = {programId: new PublicKey(ix.programId)};\n            if ('accounts' in ix) {\n              mapped.accounts = ix.accounts.map(key => new PublicKey(key));\n            }\n\n            return {\n              ...ix,\n              ...mapped,\n            };\n          }),\n          recentBlockhash,\n        },\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress',\n      [address.toBase58(), startSlot, endSlot],\n    );\n    const result = GetConfirmedSignaturesForAddressRpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options: ?ConfirmedSignaturesForAddress2Options,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      [address.toBase58(), options],\n    );\n    const result = GetConfirmedSignaturesForAddress2RpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = RequestAirdropRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const expired =\n        Date.now() - this._blockhashInfo.lastFetch >=\n        BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('max');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: new Date(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Account>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n    const args = [encodedTransaction, config];\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = SimulatedTransactionResponseValidator(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Account>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * @private\n   */\n  async validatorExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('validatorExit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error('validator exit failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const args = [encodedTransaction, config];\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = SendTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      if (res.error.data) {\n        const logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number) {\n    clearInterval(this._rpcWebSocketHeartbeat);\n    this._rpcWebSocketHeartbeat = null;\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  async _subscribe<SubInfo: {subscriptionId: ?SubscriptionId}, RpcArgs>(\n    sub: SubInfo,\n    rpcMethod: string,\n    rpcArgs: RpcArgs,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _unsubscribe<SubInfo: {subscriptionId: ?SubscriptionId}>(\n    sub: SubInfo,\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetSubscriptions() {\n    (Object.values(this._accountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._programAccountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._signatureSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._slotSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._rootSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @private\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      this._subscribe(\n        sub,\n        'signatureSubscribe',\n        this._buildArgs([sub.signature], sub.commitment),\n      );\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = AccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error('account notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.data[1] === 'base64');\n        sub.callback(\n          {\n            executable: value.executable,\n            owner: new PublicKey(value.owner),\n            lamports: value.lamports,\n            data: Buffer.from(value.data[0], 'base64'),\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ProgramAccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(\n        'program account notification failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._programAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.account.data[1] === 'base64');\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: {\n              executable: value.account.executable,\n              owner: new PublicKey(value.account.owner),\n              lamports: value.account.lamports,\n              data: Buffer.from(value.account.data[0], 'base64'),\n            },\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = SlotNotificationResult(notification);\n    if (res.error) {\n      throw new Error('slot notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {parent, slot, root} = res.result;\n    const keys = Object.keys(this._slotSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._slotSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback({\n          parent,\n          slot,\n          root,\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override: ?Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = SignatureNotificationResult(notification);\n    if (res.error) {\n      throw new Error('signature notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._signatureSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._signatureSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        // Signatures subscriptions are auto-removed by the RPC service so\n        // no need to explicitly send an unsubscribe message\n        delete this._signatureSubscriptions[id];\n        this._updateSubscriptions();\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = RootNotificationResult(notification);\n    if (res.error) {\n      throw new Error('root notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const root = res.result;\n    const keys = Object.keys(this._rootSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._rootSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(root);\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {Account} from '../account';\nimport type {ConfirmOptions} from '../connection';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @typedef {Object} InstructionType\n * @property (index} The Instruction index (from solana upstream program)\n * @property (BufferLayout} The BufferLayout to use to build data\n */\nexport type InstructionType = {|\n  index: number,\n  layout: typeof BufferLayout,\n|};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n */\nexport function encodeData(type: InstructionType, fields: Object): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): Object {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\n/**\n * Create account system transaction params\n * @typedef {Object} CreateAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer system transaction params\n * @typedef {Object} TransferParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type TransferParams = {|\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Assign system transaction params\n * @typedef {Object} AssignParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} programId\n */\nexport type AssignParams = {|\n  accountPubkey: PublicKey,\n  programId: PublicKey,\n|};\n\n/**\n * Create account with seed system transaction params\n * @typedef {Object} CreateAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Create nonce account system transaction params\n * @typedef {Object} CreateNonceAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {number} lamports\n */\nexport type CreateNonceAccountParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Create nonce account with seed system transaction params\n * @typedef {Object} CreateNonceAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n */\nexport type CreateNonceAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n  basePubkey: PublicKey,\n  seed: string,\n|};\n\n/**\n * Initialize nonce account system instruction params\n * @typedef {Object} InitializeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type InitializeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Advance nonce account system instruction params\n * @typedef {Object} AdvanceNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type AdvanceNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Withdraw nonce account system transaction params\n * @typedef {Object} WithdrawNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Authorize nonce account system transaction params\n * @typedef {Object} AuthorizeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n */\nexport type AuthorizeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n|};\n\n/**\n * Allocate account system transaction params\n * @typedef {Object} AllocateParams\n * @property {PublicKey} accountPubkey\n * @property {number} space\n */\nexport type AllocateParams = {|\n  accountPubkey: PublicKey,\n  space: number,\n|};\n\n/**\n * Allocate account with seed system transaction params\n * @typedef {Object} AllocateWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type AllocateWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Assign account with seed system transaction params\n * @typedef {Object} AssignWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type AssignWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer with seed system transaction params\n * @typedef {Object} TransferWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} basePubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type TransferWithSeedParams = {|\n  fromPubkey: PublicKey,\n  basePubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (SYSTEM_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n * @typedef {'Create' | 'Assign' | 'Transfer' | 'CreateWithSeed'\n | 'AdvanceNonceAccount' | 'WithdrawNonceAccount' | 'InitializeNonceAccount'\n | 'AuthorizeNonceAccount'} SystemInstructionType\n */\nexport type SystemInstructionType = $Keys<typeof SYSTEM_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid system InstructionType's\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('11111111111111111111111111111111');\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {programId: params.programId.toBuffer()});\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: params.basePubkey.toBuffer(),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if (params.basePubkey && params.seed) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.authorizedPubkey.toBuffer(),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.newAuthorizedPubkey.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        space: params.space,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'singleGossip',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'singleGossip',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'singleGossip',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'singleGossip',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\nexport class Authorized {\n  staker: PublicKey;\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\nexport class Lockup {\n  unixTimestamp: number;\n  epoch: number;\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n}\n\n/**\n * Create stake account transaction params\n * @typedef {Object} CreateStakeAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Create stake account with seed transaction params\n * @typedef {Object} CreateStakeAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Initialize stake instruction params\n * @typedef {Object} InitializeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n */\nexport type InitializeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n|};\n\n/**\n * Delegate stake instruction params\n * @typedef {Object} DelegateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} votePubkey\n */\nexport type DelegateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  votePubkey: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params\n * @typedef {Object} AuthorizeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n * @property {PublicKey} custodianPubkey\n */\nexport type AuthorizeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params using a derived key\n * @typedef {Object} AuthorizeWithSeedStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorityBase\n * @property {string} authoritySeed\n * @property {PublicKey} authorityOwner\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n * @property {PublicKey} custodianPubkey\n */\nexport type AuthorizeWithSeedStakeParams = {|\n  stakePubkey: PublicKey,\n  authorityBase: PublicKey,\n  authoritySeed: string,\n  authorityOwner: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Split stake instruction params\n * @typedef {Object} SplitStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} splitStakePubkey\n * @property {number} lamports\n */\nexport type SplitStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  splitStakePubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Withdraw stake instruction params\n * @typedef {Object} WithdrawStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n * @property {PublicKey} custodianPubkey\n */\nexport type WithdrawStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Deactivate stake instruction params\n * @typedef {Object} DeactivateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type DeactivateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (STAKE_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n * @typedef { 'Initialize' | 'Authorize' | 'AuthorizeWithSeed' | 'Delegate' | 'Split' | 'Withdraw'\n | 'Deactivate' } StakeInstructionType\n */\nexport type StakeInstructionType = $Keys<typeof STAKE_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid stake InstructionType's\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * @typedef {Object} StakeAuthorizationType\n * @property (index} The Stake Authorization index (from solana-stake-program)\n */\nexport type StakeAuthorizationType = {|\n  index: number,\n|};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * Public key that identifies the Stake program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Stake11111111111111111111111111111111111111');\n  }\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static get space(): number {\n    return 200;\n  }\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: authorized.staker.toBuffer(),\n        withdrawer: authorized.withdrawer.toBuffer(),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: lockup.custodian.toBuffer(),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: authorityOwner.toBuffer(),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey,\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport createKeccakHash from 'keccak';\nimport assert from 'assert';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst PUBLIC_KEY_BYTES = 65;\nconst HASHED_PUBKEY_SERIALIZED_SIZE = 20;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Create a Secp256k1 instruction using a public key params\n * @typedef {Object} CreateSecp256k1InstructionWithPublicKeyParams\n * @property {Buffer | Uint8Array | Array<number>} publicKey\n * @property {Buffer | Uint8Array | Array<number>} message\n * @property {Buffer | Uint8Array | Array<number>} signature\n * @property {number} recoveryId\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {|\n  publicKey: Buffer | Uint8Array | Array<number>,\n  message: Buffer | Uint8Array | Array<number>,\n  signature: Buffer | Uint8Array | Array<number>,\n  recoveryId: number,\n|};\n\n/**\n * Create a Secp256k1 instruction using a private key params\n * @typedef {Object} CreateSecp256k1InstructionWithPrivateKeyParams\n * @property {Buffer | Uint8Array | Array<number>} privateKey\n * @property {Buffer | Uint8Array | Array<number>} message\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {|\n  privateKey: Buffer | Uint8Array | Array<number>,\n  message: Buffer | Uint8Array | Array<number>,\n|};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethPublicKey'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * Public key that identifies the Secp256k program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('KeccakSecp256k11111111111111111111111111111');\n  }\n\n  /**\n   * Create a secp256k1 instruction with public key\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes`,\n    );\n\n    let ethPublicKey;\n    try {\n      ethPublicKey = constructEthPubkey(publicKey);\n    } catch (error) {\n      throw new Error(`Error constructing ethereum public key: ${error}`);\n    }\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethPublicKey.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: 0,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: 0,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: 0,\n        signature: toBuffer(signature),\n        ethPublicKey: ethPublicKey,\n        recoveryId: recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create a secp256k1 instruction with private key\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes`,\n    );\n\n    try {\n      const publicKey = publicKeyCreate(privateKey, false);\n      const messageHash = createKeccakHash('keccak256')\n        .update(toBuffer(message))\n        .digest();\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n\nexport function constructEthPubkey(\n  publicKey: Buffer | Uint8Array | Array<number>,\n): Buffer {\n  return createKeccakHash('keccak256')\n    .update(toBuffer(publicKey.slice(1))) // throw away leading byte\n    .digest()\n    .slice(-HASHED_PUBKEY_SERIALIZED_SIZE);\n}\n","// @flow\n\nimport {struct} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @private\n */\ntype ConfigKey = {|\n  publicKey: PublicKey,\n  isSigner: boolean,\n|};\n\n/**\n * Info used to identity validators.\n *\n * @typedef {Object} Info\n * @property {string} name validator name\n * @property {?string} website optional, validator website\n * @property {?string} details optional, extra information the validator chose to share\n * @property {?string} keybaseUsername optional, used to identify validators on keybase.io\n */\nexport type Info = {|\n  name: string,\n  website?: string,\n  details?: string,\n  keybaseUsername?: string,\n|};\n\nconst InfoString = struct({\n  name: 'string',\n  website: 'string?',\n  details: 'string?',\n  keybaseUsername: 'string?',\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = InfoString(JSON.parse(rawInfo));\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {|\n  slot: number,\n  confirmationCount: number,\n|};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {|\n  epoch: number,\n  credits: number,\n  prevCredits: number,\n|};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @private\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n    va.nodePubkey = new PublicKey(va.nodePubkey);\n    va.authorizedVoterPubkey = new PublicKey(va.authorizedVoterPubkey);\n    va.authorizedWithdrawerPubkey = new PublicKey(\n      va.authorizedWithdrawerPubkey,\n    );\n    if (!va.rootSlotValid) {\n      va.rootSlot = null;\n    }\n    return va;\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","//@flow\n\n/**\n * @private\n */\nconst endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","// @flow\nexport {Account} from './account';\nexport {BPF_LOADER_DEPRECATED_PROGRAM_ID} from './bpf-loader-deprecated';\nexport {BpfLoader, BPF_LOADER_PROGRAM_ID} from './bpf-loader';\nexport {Connection} from './connection';\nexport {Loader} from './loader';\nexport {Message} from './message';\nexport {NonceAccount, NONCE_ACCOUNT_LENGTH} from './nonce-account';\nexport {MAX_SEED_LENGTH, PublicKey} from './publickey';\nexport {\n  STAKE_CONFIG_ID,\n  Authorized,\n  Lockup,\n  StakeAuthorizationLayout,\n  StakeInstruction,\n  STAKE_INSTRUCTION_LAYOUTS,\n  StakeProgram,\n} from './stake-program';\nexport {\n  SystemInstruction,\n  SystemProgram,\n  SYSTEM_INSTRUCTION_LAYOUTS,\n} from './system-program';\nexport {Secp256k1Program} from './secp256k1-program';\nexport {Transaction, TransactionInstruction} from './transaction';\nexport {VALIDATOR_INFO_KEY, ValidatorInfo} from './validator-info';\nexport {VOTE_PROGRAM_ID, VoteAccount} from './vote-account';\nexport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from './sysvar';\nexport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nexport {sendAndConfirmRawTransaction} from './util/send-and-confirm-raw-transaction';\nexport {clusterApiUrl} from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}