{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MultiTokenSender.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react'; //imports\n\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { ConnectionContext, useConnection } from '../utils/connection';\nimport { parseMintData, parseTokenAccountData } from '../utils/tokens/data';\nimport { TOKEN_PROGRAM_ID } from '../utils/tokens/instructions';\nimport _ from 'lodash';\nimport Queue from '../utils/Queue';\nimport { getTokenInfo, useTokenInfos } from '../utils/tokens/names';\nimport { WalletGiftcard } from 'mdi-material-ui';\nimport { resolve } from 'path';\nimport { findAssociatedTokenAddress, transferTokens } from '../utils/tokens';\nimport { useWallet } from '../utils/wallet';\nimport { useSendTransaction } from '../utils/notifications';\nimport CSVReader from 'react-csv-reader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MultiTokenSender() {\n  _s();\n\n  const [sendTransaction, sending] = useSendTransaction();\n  const [items, setItems] = useState([{\n    name: 'usdc',\n    toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n    spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    amountToSend: '1'\n  }, {\n    name: 'usdt',\n    toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n    spl_address: '6AdCQrMEbqoucMeBj64BNE78FmZoocHipJr2eaP8MwWV',\n    amountToSend: '1'\n  }, {\n    name: 'usdc',\n    toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n    spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    amountToSend: '1'\n  }, {\n    name: 'usdt',\n    toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n    spl_address: '6AdCQrMEbqoucMeBj64BNE78FmZoocHipJr2eaP8MwWV',\n    amountToSend: '1'\n  }, {\n    name: 'usdc',\n    toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n    spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    amountToSend: '1'\n  }, {\n    name: 'usdt',\n    toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n    spl_address: '6AdCQrMEbqoucMeBj64BNE78FmZoocHipJr2eaP8MwWV',\n    amountToSend: '1'\n  }, {\n    name: 'usdc',\n    toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n    spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    amountToSend: '1'\n  }, {\n    name: 'usdc',\n    toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n    spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    amountToSend: '1'\n  }, {\n    name: 'usdc',\n    toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n    spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    amountToSend: '1'\n  }, {\n    name: 'usdc',\n    toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n    spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    amountToSend: '1'\n  } // {\n  //   name: 'serum',\n  //   to: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //   spl_address: 'SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt',\n  //   amountToSend: '40',\n  // },\n  ]);\n  const [queue, setQueue] = useState('');\n  let context = useContext(ConnectionContext);\n  const tokenInfos = useTokenInfos();\n  const wallet = useWallet();\n  const {\n    endpoint,\n    setEndpoint,\n    connection\n  } = context;\n  let number = 0;\n\n  const fun = () => {\n    const queue = new Queue();\n    items.map(item => {\n      const send = () => {\n        return async () => {\n          try {\n            const mint = new PublicKey(item.spl_address);\n            const sourcePublicKey = await findAssociatedTokenAddress(wallet.publicKey, mint);\n            console.log('here2');\n            const accountInfo = await connection.getAccountInfo(sourcePublicKey);\n            const mintInfo = await connection.getAccountInfo(mint); // const infos = getTokenInfo(mint, endpoint, tokenInfos);\n\n            let {\n              decimals\n            } = parseMintData(mintInfo.data);\n            const amountToSend = item.amount = Math.round(parseFloat(item.amountToSend) * 10 ** decimals);\n            let {\n              owner,\n              amount\n            } = (accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.owner.equals(TOKEN_PROGRAM_ID)) ? parseTokenAccountData(accountInfo.data) : {};\n            console.log('here 3');\n            const transaction = {\n              wallet,\n              amountToSend,\n              mint,\n              decimals,\n              override: true,\n              destinationPublicKey: new PublicKey(item.toAddress)\n            };\n            const tx = {\n              connection,\n              owner: wallet,\n              sourcePublicKey: sourcePublicKey,\n              destinationPublicKey: transaction.destinationPublicKey,\n              amount: amountToSend,\n              memo: '',\n              mint: mint,\n              decimals: decimals,\n              overrideDestinationCheck: true\n            };\n            const result = await sendTransaction(transferTokens(tx));\n            console.log(result);\n            console.log('end');\n            console.log(number);\n            number = number + 1;\n            console.log(number);\n          } catch (error) {\n            console.log(error);\n          }\n        };\n      };\n\n      queue.populatePromises(send());\n      console.log(queue);\n    });\n    setQueue(queue); //   });\n  };\n\n  const beginSend = () => {\n    setInterval(() => {\n      queue.run();\n    }, 3000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        display: 'flex',\n        padding: '1rem',\n        fontWeight: 'bold'\n      },\n      children: \"Multi Token Sender\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        padding: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CSVReader, {\n        style: {\n          marginTop: '1.5rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: beginSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MultiTokenSender, \"hxsBDA8Uor98qYP6alX+b3Qx33M=\", false, function () {\n  return [useSendTransaction, useTokenInfos, useWallet];\n});\n\n_c = MultiTokenSender;\nexport default MultiTokenSender;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiTokenSender\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MultiTokenSender.jsx"],"names":["React","useContext","useState","Connection","PublicKey","ConnectionContext","useConnection","parseMintData","parseTokenAccountData","TOKEN_PROGRAM_ID","_","Queue","getTokenInfo","useTokenInfos","WalletGiftcard","resolve","findAssociatedTokenAddress","transferTokens","useWallet","useSendTransaction","CSVReader","MultiTokenSender","sendTransaction","sending","items","setItems","name","toAddress","spl_address","amountToSend","queue","setQueue","context","tokenInfos","wallet","endpoint","setEndpoint","connection","number","fun","map","item","send","mint","sourcePublicKey","publicKey","console","log","accountInfo","getAccountInfo","mintInfo","decimals","data","amount","Math","round","parseFloat","owner","equals","transaction","override","destinationPublicKey","tx","memo","overrideDestinationCheck","result","error","populatePromises","beginSend","setInterval","run","display","padding","fontWeight","marginTop"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\n\n//imports\n\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { ConnectionContext, useConnection } from '../utils/connection';\nimport { parseMintData, parseTokenAccountData } from '../utils/tokens/data';\nimport { TOKEN_PROGRAM_ID } from '../utils/tokens/instructions';\nimport _ from 'lodash';\nimport Queue from '../utils/Queue';\nimport { getTokenInfo, useTokenInfos } from '../utils/tokens/names';\nimport { WalletGiftcard } from 'mdi-material-ui';\nimport { resolve } from 'path';\nimport { findAssociatedTokenAddress, transferTokens } from '../utils/tokens';\nimport { useWallet } from '../utils/wallet';\nimport { useSendTransaction } from '../utils/notifications';\nimport CSVReader from 'react-csv-reader';\n\nfunction MultiTokenSender() {\n  const [sendTransaction, sending] = useSendTransaction();\n  const [items, setItems] = useState([\n    {\n      name: 'usdc',\n      toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n      spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n      amountToSend: '1',\n    },\n    {\n      name: 'usdt',\n\n      toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n      spl_address: '6AdCQrMEbqoucMeBj64BNE78FmZoocHipJr2eaP8MwWV',\n      amountToSend: '1',\n    },\n    {\n      name: 'usdc',\n      toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n      spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n      amountToSend: '1',\n    },\n    {\n      name: 'usdt',\n\n      toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n      spl_address: '6AdCQrMEbqoucMeBj64BNE78FmZoocHipJr2eaP8MwWV',\n      amountToSend: '1',\n    },\n    {\n      name: 'usdc',\n      toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n      spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n      amountToSend: '1',\n    },\n    {\n      name: 'usdt',\n\n      toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n      spl_address: '6AdCQrMEbqoucMeBj64BNE78FmZoocHipJr2eaP8MwWV',\n      amountToSend: '1',\n    },\n    {\n      name: 'usdc',\n      toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n      spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n      amountToSend: '1',\n    },\n    {\n      name: 'usdc',\n      toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n      spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n      amountToSend: '1',\n    },\n    {\n      name: 'usdc',\n      toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n      spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n      amountToSend: '1',\n    },\n    {\n      name: 'usdc',\n      toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n      spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n      amountToSend: '1',\n    },\n    // {\n    //   name: 'serum',\n    //   to: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n    //   spl_address: 'SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt',\n    //   amountToSend: '40',\n    // },\n  ]);\n\n  const [queue, setQueue] = useState('');\n  let context = useContext(ConnectionContext);\n  const tokenInfos = useTokenInfos();\n\n  const wallet = useWallet();\n  const { endpoint, setEndpoint, connection } = context;\n\n  let number = 0;\n\n  const fun = () => {\n    const queue = new Queue();\n    items.map((item) => {\n      const send = () => {\n        return async () => {\n          try {\n            const mint = new PublicKey(item.spl_address);\n            const sourcePublicKey = await findAssociatedTokenAddress(\n              wallet.publicKey,\n              mint,\n            );\n            console.log('here2');\n            const accountInfo = await connection.getAccountInfo(\n              sourcePublicKey,\n            );\n            const mintInfo = await connection.getAccountInfo(mint);\n            // const infos = getTokenInfo(mint, endpoint, tokenInfos);\n            let { decimals } = parseMintData(mintInfo.data);\n            const amountToSend = (item.amount = Math.round(\n              parseFloat(item.amountToSend) * 10 ** decimals,\n            ));\n            let { owner, amount } = accountInfo?.owner.equals(TOKEN_PROGRAM_ID)\n              ? parseTokenAccountData(accountInfo.data)\n              : {};\n\n            console.log('here 3');\n            const transaction = {\n              wallet,\n              amountToSend,\n              mint,\n              decimals,\n              override: true,\n              destinationPublicKey: new PublicKey(item.toAddress),\n            };\n\n            const tx = {\n              connection,\n              owner: wallet,\n              sourcePublicKey: sourcePublicKey,\n              destinationPublicKey: transaction.destinationPublicKey,\n              amount: amountToSend,\n              memo: '',\n              mint: mint,\n              decimals: decimals,\n              overrideDestinationCheck: true,\n            };\n\n            const result = await sendTransaction(transferTokens(tx));\n            console.log(result);\n\n            console.log('end');\n            console.log(number);\n            number = number + 1;\n            console.log(number);\n          } catch (error) {\n            console.log(error);\n          }\n        };\n      };\n\n      queue.populatePromises(send());\n      console.log(queue);\n    });\n    setQueue(queue);\n    //   });\n  };\n\n  const beginSend = () => {\n    setInterval(() => {\n      queue.run();\n    }, 3000);\n  };\n\n  return (\n    <>\n      <p style={{ display: 'flex', padding: '1rem', fontWeight: 'bold' }}>\n        Multi Token Sender\n      </p>\n      <div style={{ display: 'flex', padding: '1rem' }}>\n        <CSVReader style={{ marginTop: '1.5rem' }}></CSVReader>\n\n        <button onClick={beginSend}>Send</button>\n      </div>\n    </>\n  );\n}\n\nexport default MultiTokenSender;\n"]},"metadata":{},"sourceType":"module"}