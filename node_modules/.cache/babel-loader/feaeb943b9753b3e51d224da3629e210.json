{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/swap/eth.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport ERC20_ABI from './erc20-abi.json';\nimport SWAP_ABI from './swap-abi.json';\nimport Button from '@material-ui/core/Button';\nimport { useCallAsync } from '../notifications';\nimport { isExtension } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst web3 = new Web3(window.ethereum); // Change to use estimated gas limit\n\nconst SUGGESTED_GAS_LIMIT = 200000;\nexport function useEthAccount() {\n  _s();\n\n  const [account, setAccount] = useState(null);\n  useEffect(() => {\n    if (!window.ethereum) {\n      return;\n    }\n\n    const onChange = accounts => setAccount(accounts.length > 0 ? accounts[0] : null);\n\n    window.ethereum.request({\n      method: 'eth_accounts'\n    }).then(onChange);\n    window.ethereum.on('accountsChanged', onChange);\n    return () => window.ethereum.removeListener('accountsChanged', onChange);\n  }, []);\n  return account;\n}\n\n_s(useEthAccount, \"86F8VZ8lfjh6tQB+p37fx1M0D7Q=\");\n\nexport async function getErc20Balance(account, erc20Address) {\n  if (!erc20Address) {\n    return parseInt(await web3.eth.getBalance(account)) / 1e18;\n  }\n\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\n  const [value, decimals] = await Promise.all([erc20.methods.balanceOf(account).call(), erc20.methods.decimals().call()]);\n  return parseInt(value, 10) / 10 ** parseInt(decimals, 10);\n}\nexport async function estimateErc20SwapFees({\n  erc20Address,\n  swapAddress,\n  ethAccount\n}) {\n  if (!erc20Address) {\n    return estimateEthSwapFees({\n      swapAddress\n    });\n  }\n\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\n  const decimals = parseInt(await erc20.methods.decimals().call(), 10);\n  const approveAmount = addDecimals('100000000', decimals);\n  let approveEstimatedGas = await erc20.methods.approve(swapAddress, approveAmount).estimateGas({\n    from: ethAccount\n  }); // Account for Metamask over-estimation\n\n  approveEstimatedGas *= 1.5; // Use estimated gas limit for now\n\n  const swapEstimatedGas = SUGGESTED_GAS_LIMIT;\n  const gasPrice = (await web3.eth.getGasPrice()) * 1e-18;\n  return [approveEstimatedGas * gasPrice, swapEstimatedGas * gasPrice];\n}\nexport async function estimateEthSwapFees() {\n  const estimatedGas = SUGGESTED_GAS_LIMIT;\n  const gasPrice = (await web3.eth.getGasPrice()) * 1e-18;\n  return estimatedGas * gasPrice;\n}\nexport async function swapErc20ToSpl({\n  ethAccount,\n  erc20Address,\n  swapAddress,\n  destination,\n  amount,\n  // string\n  onStatusChange\n}) {\n  if (!erc20Address) {\n    return swapEthToSpl({\n      ethAccount,\n      swapAddress,\n      destination,\n      amount,\n      onStatusChange\n    });\n  }\n\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\n  const swap = new web3.eth.Contract(SWAP_ABI, swapAddress);\n  const decimals = parseInt(await erc20.methods.decimals().call(), 10);\n  const encodedAmount = addDecimals(amount, decimals);\n  const approveTx = erc20.methods.approve(swapAddress, encodedAmount).send({\n    from: ethAccount\n  });\n  await waitForTxid(approveTx);\n  onStatusChange({\n    step: 1\n  });\n  const swapTx = swap.methods.swapErc20(erc20Address, destination, encodedAmount).send({\n    from: ethAccount,\n    gasLimit: SUGGESTED_GAS_LIMIT\n  });\n  const swapTxid = await waitForTxid(swapTx);\n  onStatusChange({\n    step: 2,\n    txid: swapTxid,\n    confirms: 0\n  });\n  await Promise.all([approveTx, swapTx, waitForConfirms(swapTx, onStatusChange)]);\n  onStatusChange({\n    step: 3\n  });\n}\nexport async function swapEthToSpl({\n  ethAccount,\n  swapAddress,\n  destination,\n  amount,\n  onStatusChange\n}) {\n  const swap = new web3.eth.Contract(SWAP_ABI, swapAddress);\n  const encodedAmount = addDecimals(amount, 18);\n  const swapTx = swap.methods.swapEth(destination).send({\n    from: ethAccount,\n    value: encodedAmount\n  });\n  const swapTxid = await waitForTxid(swapTx);\n  onStatusChange({\n    step: 2,\n    txid: swapTxid,\n    confirms: 0\n  });\n  await Promise.all([swapTx, waitForConfirms(swapTx, onStatusChange)]);\n  onStatusChange({\n    step: 3\n  });\n}\n\nfunction addDecimals(str, decimals) {\n  if (!/^\\d*\\.?\\d*$/.test(str)) {\n    throw new Error('Invalid number');\n  }\n\n  if (!str.includes('.')) {\n    str += '.';\n  }\n\n  let [intStr, fractionStr] = str.split('.');\n\n  if (fractionStr.length > decimals) {\n    fractionStr = fractionStr.slice(0, decimals);\n  } else {\n    fractionStr += '0'.repeat(decimals - fractionStr.length);\n  }\n\n  return (intStr + fractionStr).replace(/^0+/, '') || '0';\n}\n\nconst pendingNonces = new Set();\nexport async function withdrawEth(from, withdrawal, callAsync) {\n  const {\n    params,\n    signature\n  } = withdrawal.txData;\n  const swap = new web3.eth.Contract(SWAP_ABI, params[1]);\n  let method, nonce;\n\n  if (params[0] === 'withdrawErc20') {\n    method = swap.methods.withdrawErc20(params[2], params[3], params[4], params[5], signature);\n    nonce = params[5];\n  } else if (params[0] === 'withdrawEth') {\n    method = swap.methods.withdrawEth(params[2], params[3], params[4], signature);\n    nonce = params[4];\n  } else {\n    return;\n  }\n\n  if (pendingNonces.has(nonce)) {\n    return;\n  }\n\n  try {\n    await method.estimateGas();\n  } catch (e) {\n    return;\n  }\n\n  pendingNonces.add(nonce);\n  await callAsync(method.send({\n    from,\n    gasLimit: SUGGESTED_GAS_LIMIT\n  }), {\n    progressMessage: `Completing ${withdrawal.coin.ticker} transfer...`\n  });\n  pendingNonces.delete(nonce);\n}\n\nfunction waitForTxid(tx) {\n  return new Promise((resolve, reject) => {\n    tx.once('transactionHash', resolve).catch(reject);\n  });\n}\n\nfunction waitForConfirms(tx, onStatusChange) {\n  return new Promise((resolve, reject) => {\n    let resolved = false;\n    tx.on('confirmation', (confirms, receipt) => {\n      if (!resolved) {\n        onStatusChange({\n          confirms: confirms + 1\n        });\n\n        if (!receipt.status) {\n          reject('Transaction failed');\n          resolved = true;\n        } else if (confirms >= 11) {\n          resolve();\n          resolved = true;\n        }\n      }\n    });\n  });\n}\n\nexport function ConnectToMetamaskButton() {\n  _s2();\n\n  const callAsync = useCallAsync();\n\n  if (!window.ethereum) {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"outlined\",\n      component: \"a\",\n      href: isExtension ? 'https://sollet.io' : 'https://metamask.io/',\n      target: \"_blank\",\n      rel: \"noopener\",\n      children: isExtension ? 'Open sollet.io' : 'Connect to MetaMask'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this);\n  }\n\n  function connect() {\n    callAsync(window.ethereum.request({\n      method: 'eth_requestAccounts'\n    }), {\n      progressMessage: 'Connecting to MetaMask...',\n      successMessage: 'Connected to MetaMask'\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    color: \"primary\",\n    variant: \"outlined\",\n    onClick: connect,\n    children: \"Connect to MetaMask\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConnectToMetamaskButton, \"sy/oZWvWKQYV3d90GSvpqgaHLdg=\", false, function () {\n  return [useCallAsync];\n});\n\n_c = ConnectToMetamaskButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectToMetamaskButton\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/swap/eth.js"],"names":["React","useEffect","useState","Web3","ERC20_ABI","SWAP_ABI","Button","useCallAsync","isExtension","web3","window","ethereum","SUGGESTED_GAS_LIMIT","useEthAccount","account","setAccount","onChange","accounts","length","request","method","then","on","removeListener","getErc20Balance","erc20Address","parseInt","eth","getBalance","erc20","Contract","value","decimals","Promise","all","methods","balanceOf","call","estimateErc20SwapFees","swapAddress","ethAccount","estimateEthSwapFees","approveAmount","addDecimals","approveEstimatedGas","approve","estimateGas","from","swapEstimatedGas","gasPrice","getGasPrice","estimatedGas","swapErc20ToSpl","destination","amount","onStatusChange","swapEthToSpl","swap","encodedAmount","approveTx","send","waitForTxid","step","swapTx","swapErc20","gasLimit","swapTxid","txid","confirms","waitForConfirms","swapEth","str","test","Error","includes","intStr","fractionStr","split","slice","repeat","replace","pendingNonces","Set","withdrawEth","withdrawal","callAsync","params","signature","txData","nonce","withdrawErc20","has","e","add","progressMessage","coin","ticker","delete","tx","resolve","reject","once","catch","resolved","receipt","status","ConnectToMetamaskButton","connect","successMessage"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport ERC20_ABI from './erc20-abi.json';\nimport SWAP_ABI from './swap-abi.json';\nimport Button from '@material-ui/core/Button';\nimport { useCallAsync } from '../notifications';\nimport { isExtension } from '../utils';\n\nconst web3 = new Web3(window.ethereum);\n// Change to use estimated gas limit\nconst SUGGESTED_GAS_LIMIT = 200000;\n\nexport function useEthAccount() {\n  const [account, setAccount] = useState(null);\n\n  useEffect(() => {\n    if (!window.ethereum) {\n      return;\n    }\n    const onChange = (accounts) =>\n      setAccount(accounts.length > 0 ? accounts[0] : null);\n    window.ethereum.request({ method: 'eth_accounts' }).then(onChange);\n    window.ethereum.on('accountsChanged', onChange);\n    return () => window.ethereum.removeListener('accountsChanged', onChange);\n  }, []);\n\n  return account;\n}\n\nexport async function getErc20Balance(account, erc20Address) {\n  if (!erc20Address) {\n    return parseInt(await web3.eth.getBalance(account)) / 1e18;\n  }\n\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\n  const [value, decimals] = await Promise.all([\n    erc20.methods.balanceOf(account).call(),\n    erc20.methods.decimals().call(),\n  ]);\n  return parseInt(value, 10) / 10 ** parseInt(decimals, 10);\n}\n\nexport async function estimateErc20SwapFees({\n  erc20Address,\n  swapAddress,\n  ethAccount,\n}) {\n  if (!erc20Address) {\n    return estimateEthSwapFees({ swapAddress });\n  }\n\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\n  const decimals = parseInt(await erc20.methods.decimals().call(), 10);\n\n  const approveAmount = addDecimals('100000000', decimals);\n\n  let approveEstimatedGas = await erc20.methods\n    .approve(swapAddress, approveAmount)\n    .estimateGas({ from: ethAccount });\n  // Account for Metamask over-estimation\n  approveEstimatedGas *= 1.5;\n\n  // Use estimated gas limit for now\n  const swapEstimatedGas = SUGGESTED_GAS_LIMIT;\n\n  const gasPrice = (await web3.eth.getGasPrice()) * 1e-18;\n\n  return [approveEstimatedGas * gasPrice, swapEstimatedGas * gasPrice];\n}\n\nexport async function estimateEthSwapFees() {\n  const estimatedGas = SUGGESTED_GAS_LIMIT;\n\n  const gasPrice = (await web3.eth.getGasPrice()) * 1e-18;\n\n  return estimatedGas * gasPrice;\n}\n\nexport async function swapErc20ToSpl({\n  ethAccount,\n  erc20Address,\n  swapAddress,\n  destination,\n  amount, // string\n  onStatusChange,\n}) {\n  if (!erc20Address) {\n    return swapEthToSpl({\n      ethAccount,\n      swapAddress,\n      destination,\n      amount,\n      onStatusChange,\n    });\n  }\n\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\n  const swap = new web3.eth.Contract(SWAP_ABI, swapAddress);\n  const decimals = parseInt(await erc20.methods.decimals().call(), 10);\n\n  const encodedAmount = addDecimals(amount, decimals);\n\n  const approveTx = erc20.methods\n    .approve(swapAddress, encodedAmount)\n    .send({ from: ethAccount });\n  await waitForTxid(approveTx);\n\n  onStatusChange({ step: 1 });\n\n  const swapTx = swap.methods\n    .swapErc20(erc20Address, destination, encodedAmount)\n    .send({ from: ethAccount, gasLimit: SUGGESTED_GAS_LIMIT });\n  const swapTxid = await waitForTxid(swapTx);\n\n  onStatusChange({ step: 2, txid: swapTxid, confirms: 0 });\n\n  await Promise.all([\n    approveTx,\n    swapTx,\n    waitForConfirms(swapTx, onStatusChange),\n  ]);\n\n  onStatusChange({ step: 3 });\n}\n\nexport async function swapEthToSpl({\n  ethAccount,\n  swapAddress,\n  destination,\n  amount,\n  onStatusChange,\n}) {\n  const swap = new web3.eth.Contract(SWAP_ABI, swapAddress);\n\n  const encodedAmount = addDecimals(amount, 18);\n  const swapTx = swap.methods\n    .swapEth(destination)\n    .send({ from: ethAccount, value: encodedAmount });\n  const swapTxid = await waitForTxid(swapTx);\n\n  onStatusChange({ step: 2, txid: swapTxid, confirms: 0 });\n\n  await Promise.all([swapTx, waitForConfirms(swapTx, onStatusChange)]);\n\n  onStatusChange({ step: 3 });\n}\n\nfunction addDecimals(str, decimals) {\n  if (!/^\\d*\\.?\\d*$/.test(str)) {\n    throw new Error('Invalid number');\n  }\n  if (!str.includes('.')) {\n    str += '.';\n  }\n  let [intStr, fractionStr] = str.split('.');\n  if (fractionStr.length > decimals) {\n    fractionStr = fractionStr.slice(0, decimals);\n  } else {\n    fractionStr += '0'.repeat(decimals - fractionStr.length);\n  }\n  return (intStr + fractionStr).replace(/^0+/, '') || '0';\n}\n\nconst pendingNonces = new Set();\n\nexport async function withdrawEth(from, withdrawal, callAsync) {\n  const { params, signature } = withdrawal.txData;\n  const swap = new web3.eth.Contract(SWAP_ABI, params[1]);\n  let method, nonce;\n  if (params[0] === 'withdrawErc20') {\n    method = swap.methods.withdrawErc20(\n      params[2],\n      params[3],\n      params[4],\n      params[5],\n      signature,\n    );\n    nonce = params[5];\n  } else if (params[0] === 'withdrawEth') {\n    method = swap.methods.withdrawEth(\n      params[2],\n      params[3],\n      params[4],\n      signature,\n    );\n    nonce = params[4];\n  } else {\n    return;\n  }\n  if (pendingNonces.has(nonce)) {\n    return;\n  }\n  try {\n    await method.estimateGas();\n  } catch (e) {\n    return;\n  }\n  pendingNonces.add(nonce);\n  await callAsync(method.send({ from, gasLimit: SUGGESTED_GAS_LIMIT }), {\n    progressMessage: `Completing ${withdrawal.coin.ticker} transfer...`,\n  });\n  pendingNonces.delete(nonce);\n}\n\nfunction waitForTxid(tx) {\n  return new Promise((resolve, reject) => {\n    tx.once('transactionHash', resolve).catch(reject);\n  });\n}\n\nfunction waitForConfirms(tx, onStatusChange) {\n  return new Promise((resolve, reject) => {\n    let resolved = false;\n    tx.on('confirmation', (confirms, receipt) => {\n      if (!resolved) {\n        onStatusChange({ confirms: confirms + 1 });\n        if (!receipt.status) {\n          reject('Transaction failed');\n          resolved = true;\n        } else if (confirms >= 11) {\n          resolve();\n          resolved = true;\n        }\n      }\n    });\n  });\n}\n\nexport function ConnectToMetamaskButton() {\n  const callAsync = useCallAsync();\n\n  if (!window.ethereum) {\n    return (\n      <Button\n        color=\"primary\"\n        variant=\"outlined\"\n        component=\"a\"\n        href={isExtension ? 'https://sollet.io' : 'https://metamask.io/'}\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        {isExtension ? 'Open sollet.io' : 'Connect to MetaMask'}\n      </Button>\n    );\n  }\n\n  function connect() {\n    callAsync(\n      window.ethereum.request({\n        method: 'eth_requestAccounts',\n      }),\n      {\n        progressMessage: 'Connecting to MetaMask...',\n        successMessage: 'Connected to MetaMask',\n      },\n    );\n  }\n\n  return (\n    <Button color=\"primary\" variant=\"outlined\" onClick={connect}>\n      Connect to MetaMask\n    </Button>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}