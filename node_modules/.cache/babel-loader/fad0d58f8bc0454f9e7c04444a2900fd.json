{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/** @file jsonrpc.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Aaron Kumavis <aaron@kumavis.me>\n * @date 2015\n */\n\"use strict\"; // Initialize Jsonrpc as a simple object with utility functions.\n\nvar Jsonrpc = {\n  messageId: 0\n};\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\n\nJsonrpc.toPayload = function (method, params) {\n  if (!method) {\n    throw new Error('JSONRPC method should be specified for params: \"' + JSON.stringify(params) + '\"!');\n  } // advance message ID\n\n\n  Jsonrpc.messageId++;\n  return {\n    jsonrpc: '2.0',\n    id: Jsonrpc.messageId,\n    method: method,\n    params: params || []\n  };\n};\n/**\n * Should be called to check if jsonrpc response is valid\n *\n * @method isValidResponse\n * @param {Object}\n * @returns {Boolean} true if response is valid, otherwise false\n */\n\n\nJsonrpc.isValidResponse = function (response) {\n  return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n\n  function validateSingleMessage(message) {\n    return !!message && !message.error && message.jsonrpc === '2.0' && (typeof message.id === 'number' || typeof message.id === 'string') && message.result !== undefined; // only undefined is not valid json object\n  }\n};\n/**\n * Should be called to create batch payload object\n *\n * @method toBatchPayload\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\n * @returns {Array} batch payload\n */\n\n\nJsonrpc.toBatchPayload = function (messages) {\n  return messages.map(function (message) {\n    return Jsonrpc.toPayload(message.method, message.params);\n  });\n};\n\nmodule.exports = Jsonrpc;","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/web3-core-requestmanager/lib/jsonrpc.js"],"names":["Jsonrpc","messageId","toPayload","method","params","Error","JSON","stringify","jsonrpc","id","isValidResponse","response","Array","isArray","every","validateSingleMessage","message","error","result","undefined","toBatchPayload","messages","map","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,a,CACA;;AACA,IAAIA,OAAO,GAAG;AACVC,EAAAA,SAAS,EAAE;AADD,CAAd;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,OAAO,CAACE,SAAR,GAAoB,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AAC1C,MAAI,CAACD,MAAL,EAAa;AACT,UAAM,IAAIE,KAAJ,CAAU,qDAAqDC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAArD,GAA8E,IAAxF,CAAN;AACH,GAHyC,CAI1C;;;AACAJ,EAAAA,OAAO,CAACC,SAAR;AACA,SAAO;AACHO,IAAAA,OAAO,EAAE,KADN;AAEHC,IAAAA,EAAE,EAAET,OAAO,CAACC,SAFT;AAGHE,IAAAA,MAAM,EAAEA,MAHL;AAIHC,IAAAA,MAAM,EAAEA,MAAM,IAAI;AAJf,GAAP;AAMH,CAZD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACU,eAAR,GAA0B,UAAUC,QAAV,EAAoB;AAC1C,SAAOC,KAAK,CAACC,OAAN,CAAcF,QAAd,IAA0BA,QAAQ,CAACG,KAAT,CAAeC,qBAAf,CAA1B,GAAkEA,qBAAqB,CAACJ,QAAD,CAA9F;;AACA,WAASI,qBAAT,CAA+BC,OAA/B,EAAwC;AACpC,WAAO,CAAC,CAACA,OAAF,IACH,CAACA,OAAO,CAACC,KADN,IAEHD,OAAO,CAACR,OAAR,KAAoB,KAFjB,KAGF,OAAOQ,OAAO,CAACP,EAAf,KAAsB,QAAtB,IAAkC,OAAOO,OAAO,CAACP,EAAf,KAAsB,QAHtD,KAIHO,OAAO,CAACE,MAAR,KAAmBC,SAJvB,CADoC,CAKF;AACrC;AACJ,CATD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,OAAO,CAACoB,cAAR,GAAyB,UAAUC,QAAV,EAAoB;AACzC,SAAOA,QAAQ,CAACC,GAAT,CAAa,UAAUN,OAAV,EAAmB;AACnC,WAAOhB,OAAO,CAACE,SAAR,CAAkBc,OAAO,CAACb,MAA1B,EAAkCa,OAAO,CAACZ,MAA1C,CAAP;AACH,GAFM,CAAP;AAGH,CAJD;;AAKAmB,MAAM,CAACC,OAAP,GAAiBxB,OAAjB","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file jsonrpc.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Aaron Kumavis <aaron@kumavis.me>\n * @date 2015\n */\n\"use strict\";\n// Initialize Jsonrpc as a simple object with utility functions.\nvar Jsonrpc = {\n    messageId: 0\n};\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\nJsonrpc.toPayload = function (method, params) {\n    if (!method) {\n        throw new Error('JSONRPC method should be specified for params: \"' + JSON.stringify(params) + '\"!');\n    }\n    // advance message ID\n    Jsonrpc.messageId++;\n    return {\n        jsonrpc: '2.0',\n        id: Jsonrpc.messageId,\n        method: method,\n        params: params || []\n    };\n};\n/**\n * Should be called to check if jsonrpc response is valid\n *\n * @method isValidResponse\n * @param {Object}\n * @returns {Boolean} true if response is valid, otherwise false\n */\nJsonrpc.isValidResponse = function (response) {\n    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n    function validateSingleMessage(message) {\n        return !!message &&\n            !message.error &&\n            message.jsonrpc === '2.0' &&\n            (typeof message.id === 'number' || typeof message.id === 'string') &&\n            message.result !== undefined; // only undefined is not valid json object\n    }\n};\n/**\n * Should be called to create batch payload object\n *\n * @method toBatchPayload\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\n * @returns {Array} batch payload\n */\nJsonrpc.toBatchPayload = function (messages) {\n    return messages.map(function (message) {\n        return Jsonrpc.toPayload(message.method, message.params);\n    });\n};\nmodule.exports = Jsonrpc;\n"]},"metadata":{},"sourceType":"script"}