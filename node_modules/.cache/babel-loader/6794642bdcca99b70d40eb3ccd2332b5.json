{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DebugButtons.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { refreshWalletPublicKeys, useBalanceInfo, useWallet } from '../utils/wallet';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { Account, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { abbreviateAddress, sleep } from '../utils/utils';\nimport { refreshAccountInfo, useConnectionConfig, MAINNET_URL } from '../utils/connection';\nimport { createAndInitializeMint } from '../utils/tokens';\nimport { Tooltip, Button, Paper } from '@material-ui/core';\nimport MintTokenDialog from '../components/MintTokenDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DebugButtons() {\n  _s();\n\n  const wallet = useWallet();\n  const updateTokenName = useUpdateTokenName();\n  const {\n    endpoint\n  } = useConnectionConfig();\n  const balanceInfo = useBalanceInfo(wallet.publicKey);\n  const [sendTransaction, sending] = useSendTransaction();\n  const [showMintTokenDialog, setShowMintTokenDialog] = useState(false);\n  const callAsync = useCallAsync();\n  let {\n    amount\n  } = balanceInfo || {};\n\n  function requestAirdrop() {\n    callAsync(wallet.connection.requestAirdrop(wallet.publicKey, LAMPORTS_PER_SOL), {\n      onSuccess: async () => {\n        await sleep(5000);\n        refreshAccountInfo(wallet.connection, wallet.publicKey);\n      },\n      successMessage: 'Success! Please wait up to 30 seconds for the SOL tokens to appear in your wallet.'\n    });\n  }\n\n  function mintTestToken() {\n    // let mint = new Account();\n    // updateTokenName(\n    //   mint.publicKey,\n    //   `TEST`,\n    //   `TEST`,\n    // );\n    // sendTransaction(\n    //   createAndInitializeMint({\n    //     connection: wallet.connection,\n    //     owner: wallet,\n    //     mint,\n    //     amount: 1000000000,\n    //     decimals: 0,\n    //     initialAccount: new Account(),\n    //   }),\n    //   { onSuccess: () => refreshWalletPublicKeys(wallet) },\n    // );\n    setShowMintTokenDialog(true);\n  }\n\n  const noSol = amount === 0;\n  const requestAirdropDisabled = endpoint === MAINNET_URL;\n  const spacing = 24;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      marginLeft: spacing\n    },\n    children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n      title: requestAirdropDisabled ? 'Receive some devnet SOL for free. Only enabled on the devnet' : 'Receive some devnet SOL for free',\n      children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: noSol ? 'Generate and receive balances in a new test token. Requires SOL balance' : 'Generate and receive balances in a new test token',\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: mintTestToken,\n          disabled: sending || noSol,\n          style: {\n            marginLeft: spacing\n          },\n          children: \"Mint A Token\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MintTokenDialog, {\n          open: showMintTokenDialog,\n          onClose: () => setShowMintTokenDialog(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DebugButtons, \"vLetJIwKrrfTgDRc1nGFd7erXZs=\", false, function () {\n  return [useWallet, useUpdateTokenName, useConnectionConfig, useBalanceInfo, useSendTransaction, useCallAsync];\n});\n\n_c = DebugButtons;\n\nvar _c;\n\n$RefreshReg$(_c, \"DebugButtons\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DebugButtons.js"],"names":["React","useState","useMemo","useCallback","useEffect","refreshWalletPublicKeys","useBalanceInfo","useWallet","useUpdateTokenName","useCallAsync","useSendTransaction","Account","LAMPORTS_PER_SOL","abbreviateAddress","sleep","refreshAccountInfo","useConnectionConfig","MAINNET_URL","createAndInitializeMint","Tooltip","Button","Paper","MintTokenDialog","DebugButtons","wallet","updateTokenName","endpoint","balanceInfo","publicKey","sendTransaction","sending","showMintTokenDialog","setShowMintTokenDialog","callAsync","amount","requestAirdrop","connection","onSuccess","successMessage","mintTestToken","noSol","requestAirdropDisabled","spacing","display","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet\n} from '../utils/wallet';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { Account, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { abbreviateAddress, sleep } from '../utils/utils';\nimport {\n  refreshAccountInfo,\n  useConnectionConfig,\n  MAINNET_URL,\n} from '../utils/connection';\nimport { createAndInitializeMint } from '../utils/tokens';\nimport { Tooltip, Button, Paper } from '@material-ui/core';\nimport MintTokenDialog from '../components/MintTokenDialog';\n\nexport default function DebugButtons() {\n  const wallet = useWallet();\n  const updateTokenName = useUpdateTokenName();\n  const { endpoint } = useConnectionConfig();\n  const balanceInfo = useBalanceInfo(wallet.publicKey);\n  const [sendTransaction, sending] = useSendTransaction();\n  const [showMintTokenDialog, setShowMintTokenDialog] = useState(false);\n  const callAsync = useCallAsync();\n\n  let { amount } = balanceInfo || {};\n\n  function requestAirdrop() {\n    callAsync(\n      wallet.connection.requestAirdrop(wallet.publicKey, LAMPORTS_PER_SOL),\n      {\n        onSuccess: async () => {\n          await sleep(5000);\n          refreshAccountInfo(wallet.connection, wallet.publicKey);\n        },\n        successMessage:\n          'Success! Please wait up to 30 seconds for the SOL tokens to appear in your wallet.',\n      },\n    );\n  }\n\n  function mintTestToken() {\n    // let mint = new Account();\n    // updateTokenName(\n    //   mint.publicKey,\n    //   `TEST`,\n    //   `TEST`,\n    // );\n    // sendTransaction(\n    //   createAndInitializeMint({\n    //     connection: wallet.connection,\n    //     owner: wallet,\n    //     mint,\n    //     amount: 1000000000,\n    //     decimals: 0,\n    //     initialAccount: new Account(),\n    //   }),\n    //   { onSuccess: () => refreshWalletPublicKeys(wallet) },\n    // );\n    setShowMintTokenDialog(true);\n\n  }\n\n  const noSol = amount === 0;\n  const requestAirdropDisabled = endpoint === MAINNET_URL;\n  const spacing = 24;\n  return (\n    <div style={{ display: 'flex', marginLeft: spacing }}>\n\n      <Tooltip\n        title={\n          requestAirdropDisabled\n            ? 'Receive some devnet SOL for free. Only enabled on the devnet'\n            : 'Receive some devnet SOL for free'\n        }\n      >\n        <span>\n          {/* <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={requestAirdrop}\n            disabled={requestAirdropDisabled}\n          >\n            Request Airdrop\n          </Button> */}\n        </span>\n      </Tooltip>\n      <Tooltip\n        title={\n          noSol\n            ? 'Generate and receive balances in a new test token. Requires SOL balance'\n            : 'Generate and receive balances in a new test token'\n        }\n      >\n        <span>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={mintTestToken}\n            disabled={sending || noSol}\n            style={{ marginLeft: spacing }}\n          >\n            Mint A Token\n          </Button>\n          <MintTokenDialog open={showMintTokenDialog} onClose={()=>setShowMintTokenDialog(false)} />\n        </span>\n      </Tooltip>\n    </div>\n    \n  );\n}\n"]},"metadata":{},"sourceType":"module"}