{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexDataLength, hexDataSlice, hexlify, hexZeroPad, isBytesLike, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ///////////////////////////////\n\nfunction handleAddress(value) {\n  if (value === \"0x\") {\n    return null;\n  }\n\n  return getAddress(value);\n}\n\nfunction handleNumber(value) {\n  if (value === \"0x\") {\n    return Zero;\n  }\n\n  return BigNumber.from(value);\n} // Legacy Transaction Fields\n\n\nconst transactionFields = [{\n  name: \"nonce\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasPrice\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasLimit\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"to\",\n  length: 20\n}, {\n  name: \"value\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"data\"\n}];\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true\n};\nexport function computeAddress(key) {\n  const publicKey = computePublicKey(key);\n  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nexport function recoverAddress(digest, signature) {\n  return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\n\nfunction formatNumber(value, name) {\n  const result = stripZeros(BigNumber.from(value).toHexString());\n\n  if (result.length > 32) {\n    logger.throwArgumentError(\"invalid length for \" + name, \"transaction:\" + name, value);\n  }\n\n  return result;\n}\n\nfunction accessSetify(addr, storageKeys) {\n  return {\n    address: getAddress(addr),\n    storageKeys: (storageKeys || []).map((storageKey, index) => {\n      if (hexDataLength(storageKey) !== 32) {\n        logger.throwArgumentError(\"invalid access list storageKey\", `accessList[${addr}:${index}]`, storageKey);\n      }\n\n      return storageKey.toLowerCase();\n    })\n  };\n}\n\nexport function accessListify(value) {\n  if (Array.isArray(value)) {\n    return value.map((set, index) => {\n      if (Array.isArray(set)) {\n        if (set.length > 2) {\n          logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", `value[${index}]`, set);\n        }\n\n        return accessSetify(set[0], set[1]);\n      }\n\n      return accessSetify(set.address, set.storageKeys);\n    });\n  }\n\n  const result = Object.keys(value).map(addr => {\n    const storageKeys = value[addr].reduce((accum, storageKey) => {\n      accum[storageKey] = true;\n      return accum;\n    }, {});\n    return accessSetify(addr, Object.keys(storageKeys).sort());\n  });\n  result.sort((a, b) => a.address.localeCompare(b.address));\n  return result;\n}\n\nfunction formatAccessList(value) {\n  return accessListify(value).map(set => [set.address, set.storageKeys]);\n}\n\nfunction _serializeEip2930(transaction, signature) {\n  const fields = [formatNumber(transaction.chainId || 0, \"chainId\"), formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(transaction.gasPrice || 0, \"gasPrice\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to != null ? getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\", formatAccessList(transaction.accessList || [])];\n\n  if (signature) {\n    const sig = splitSignature(signature);\n    fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n    fields.push(stripZeros(sig.r));\n    fields.push(stripZeros(sig.s));\n  }\n\n  return hexConcat([\"0x01\", RLP.encode(fields)]);\n} // Legacy Transactions and EIP-155\n\n\nfunction _serialize(transaction, signature) {\n  checkProperties(transaction, allowedTransactionKeys);\n  const raw = [];\n  transactionFields.forEach(function (fieldInfo) {\n    let value = transaction[fieldInfo.name] || [];\n    const options = {};\n\n    if (fieldInfo.numeric) {\n      options.hexPad = \"left\";\n    }\n\n    value = arrayify(hexlify(value, options)); // Fixed-width field\n\n    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n      logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n    } // Variable-width (with a maximum)\n\n\n    if (fieldInfo.maxLength) {\n      value = stripZeros(value);\n\n      if (value.length > fieldInfo.maxLength) {\n        logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n      }\n    }\n\n    raw.push(hexlify(value));\n  });\n  let chainId = 0;\n\n  if (transaction.chainId != null) {\n    // A chainId was provided; if non-zero we'll use EIP-155\n    chainId = transaction.chainId;\n\n    if (typeof chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n    }\n  } else if (signature && !isBytesLike(signature) && signature.v > 28) {\n    // No chainId provided, but the signature is signing with EIP-155; derive chainId\n    chainId = Math.floor((signature.v - 35) / 2);\n  } // We have an EIP-155 transaction (chainId was specified and non-zero)\n\n\n  if (chainId !== 0) {\n    raw.push(hexlify(chainId)); // @TODO: hexValue?\n\n    raw.push(\"0x\");\n    raw.push(\"0x\");\n  } // Requesting an unsigned transation\n\n\n  if (!signature) {\n    return RLP.encode(raw);\n  } // The splitSignature will ensure the transaction has a recoveryParam in the\n  // case that the signTransaction function only adds a v.\n\n\n  const sig = splitSignature(signature); // We pushed a chainId and null r, s on for hashing only; remove those\n\n  let v = 27 + sig.recoveryParam;\n\n  if (chainId !== 0) {\n    raw.pop();\n    raw.pop();\n    raw.pop();\n    v += chainId * 2 + 8; // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n\n    if (sig.v > 28 && sig.v !== v) {\n      logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n  } else if (sig.v !== v) {\n    logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n  }\n\n  raw.push(hexlify(v));\n  raw.push(stripZeros(arrayify(sig.r)));\n  raw.push(stripZeros(arrayify(sig.s)));\n  return RLP.encode(raw);\n}\n\nexport function serialize(transaction, signature) {\n  // Legacy and EIP-155 Transactions\n  if (transaction.type == null) {\n    if (transaction.accessList != null) {\n      logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n    }\n\n    return _serialize(transaction, signature);\n  } // Typed Transactions (EIP-2718)\n\n\n  switch (transaction.type) {\n    case 1:\n      return _serializeEip2930(transaction, signature);\n\n    default:\n      break;\n  }\n\n  return logger.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"serializeTransaction\",\n    transactionType: transaction.type\n  });\n}\n\nfunction _parseEip2930(payload) {\n  const transaction = RLP.decode(payload.slice(1));\n\n  if (transaction.length !== 8 && transaction.length !== 11) {\n    logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n  }\n\n  const tx = {\n    type: 1,\n    chainId: handleNumber(transaction[0]).toNumber(),\n    nonce: handleNumber(transaction[1]).toNumber(),\n    gasPrice: handleNumber(transaction[2]),\n    gasLimit: handleNumber(transaction[3]),\n    to: handleAddress(transaction[4]),\n    value: handleNumber(transaction[5]),\n    data: transaction[6],\n    accessList: accessListify(transaction[7])\n  }; // Unsigned EIP-2930 Transaction\n\n  if (transaction.length === 8) {\n    return tx;\n  }\n\n  try {\n    const recid = handleNumber(transaction[8]).toNumber();\n\n    if (recid !== 0 && recid !== 1) {\n      throw new Error(\"bad recid\");\n    }\n\n    tx.v = recid;\n  } catch (error) {\n    logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", transaction[8]);\n  }\n\n  tx.r = hexZeroPad(transaction[9], 32);\n  tx.s = hexZeroPad(transaction[10], 32);\n\n  try {\n    const digest = keccak256(_serializeEip2930(tx));\n    tx.from = recoverAddress(digest, {\n      r: tx.r,\n      s: tx.s,\n      recoveryParam: tx.v\n    });\n  } catch (error) {\n    console.log(error);\n  }\n\n  tx.hash = keccak256(payload);\n  return tx;\n} // Legacy Transactions and EIP-155\n\n\nfunction _parse(rawTransaction) {\n  const transaction = RLP.decode(rawTransaction);\n\n  if (transaction.length !== 9 && transaction.length !== 6) {\n    logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n  }\n\n  const tx = {\n    nonce: handleNumber(transaction[0]).toNumber(),\n    gasPrice: handleNumber(transaction[1]),\n    gasLimit: handleNumber(transaction[2]),\n    to: handleAddress(transaction[3]),\n    value: handleNumber(transaction[4]),\n    data: transaction[5],\n    chainId: 0\n  }; // Legacy unsigned transaction\n\n  if (transaction.length === 6) {\n    return tx;\n  }\n\n  try {\n    tx.v = BigNumber.from(transaction[6]).toNumber();\n  } catch (error) {\n    console.log(error);\n    return tx;\n  }\n\n  tx.r = hexZeroPad(transaction[7], 32);\n  tx.s = hexZeroPad(transaction[8], 32);\n\n  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.v;\n    tx.v = 0;\n  } else {\n    // Signed Tranasaction\n    tx.chainId = Math.floor((tx.v - 35) / 2);\n\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n\n    let recoveryParam = tx.v - 27;\n    const raw = transaction.slice(0, 6);\n\n    if (tx.chainId !== 0) {\n      raw.push(hexlify(tx.chainId));\n      raw.push(\"0x\");\n      raw.push(\"0x\");\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n\n    const digest = keccak256(RLP.encode(raw));\n\n    try {\n      tx.from = recoverAddress(digest, {\n        r: hexlify(tx.r),\n        s: hexlify(tx.s),\n        recoveryParam: recoveryParam\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n    tx.hash = keccak256(rawTransaction);\n  }\n\n  tx.type = null;\n  return tx;\n}\n\nexport function parse(rawTransaction) {\n  const payload = arrayify(rawTransaction); // Legacy and EIP-155 Transactions\n\n  if (payload[0] > 0x7f) {\n    return _parse(payload);\n  } // Typed Transaction (EIP-2718)\n\n\n  switch (payload[0]) {\n    case 1:\n      return _parseEip2930(payload);\n\n    default:\n      break;\n  }\n\n  return logger.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"parseTransaction\",\n    transactionType: payload[0]\n  });\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexDataLength, hexDataSlice, hexlify, hexZeroPad, isBytesLike, splitSignature, stripZeros, } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return getAddress(value);\n}\nfunction handleNumber(value) {\n    if (value === \"0x\") {\n        return Zero;\n    }\n    return BigNumber.from(value);\n}\n// Legacy Transaction Fields\nconst transactionFields = [\n    { name: \"nonce\", maxLength: 32, numeric: true },\n    { name: \"gasPrice\", maxLength: 32, numeric: true },\n    { name: \"gasLimit\", maxLength: 32, numeric: true },\n    { name: \"to\", length: 20 },\n    { name: \"value\", maxLength: 32, numeric: true },\n    { name: \"data\" },\n];\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true\n};\nexport function computeAddress(key) {\n    const publicKey = computePublicKey(key);\n    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nexport function recoverAddress(digest, signature) {\n    return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\nfunction formatNumber(value, name) {\n    const result = stripZeros(BigNumber.from(value).toHexString());\n    if (result.length > 32) {\n        logger.throwArgumentError(\"invalid length for \" + name, (\"transaction:\" + name), value);\n    }\n    return result;\n}\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: getAddress(addr),\n        storageKeys: (storageKeys || []).map((storageKey, index) => {\n            if (hexDataLength(storageKey) !== 32) {\n                logger.throwArgumentError(\"invalid access list storageKey\", `accessList[${addr}:${index}]`, storageKey);\n            }\n            return storageKey.toLowerCase();\n        })\n    };\n}\nexport function accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index) => {\n            if (Array.isArray(set)) {\n                if (set.length > 2) {\n                    logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", `value[${index}]`, set);\n                }\n                return accessSetify(set[0], set[1]);\n            }\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    const result = Object.keys(value).map((addr) => {\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\nfunction formatAccessList(value) {\n    return accessListify(value).map((set) => [set.address, set.storageKeys]);\n}\nfunction _serializeEip2930(transaction, signature) {\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.gasPrice || 0, \"gasPrice\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        ((transaction.to != null) ? getAddress(transaction.to) : \"0x\"),\n        formatNumber(transaction.value || 0, \"value\"),\n        (transaction.data || \"0x\"),\n        (formatAccessList(transaction.accessList || []))\n    ];\n    if (signature) {\n        const sig = splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push(stripZeros(sig.r));\n        fields.push(stripZeros(sig.s));\n    }\n    return hexConcat([\"0x01\", RLP.encode(fields)]);\n}\n// Legacy Transactions and EIP-155\nfunction _serialize(transaction, signature) {\n    checkProperties(transaction, allowedTransactionKeys);\n    const raw = [];\n    transactionFields.forEach(function (fieldInfo) {\n        let value = transaction[fieldInfo.name] || ([]);\n        const options = {};\n        if (fieldInfo.numeric) {\n            options.hexPad = \"left\";\n        }\n        value = arrayify(hexlify(value, options));\n        // Fixed-width field\n        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n            logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n        }\n        // Variable-width (with a maximum)\n        if (fieldInfo.maxLength) {\n            value = stripZeros(value);\n            if (value.length > fieldInfo.maxLength) {\n                logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n            }\n        }\n        raw.push(hexlify(value));\n    });\n    let chainId = 0;\n    if (transaction.chainId != null) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = transaction.chainId;\n        if (typeof (chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n        }\n    }\n    else if (signature && !isBytesLike(signature) && signature.v > 28) {\n        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n        chainId = Math.floor((signature.v - 35) / 2);\n    }\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== 0) {\n        raw.push(hexlify(chainId)); // @TODO: hexValue?\n        raw.push(\"0x\");\n        raw.push(\"0x\");\n    }\n    // Requesting an unsigned transation\n    if (!signature) {\n        return RLP.encode(raw);\n    }\n    // The splitSignature will ensure the transaction has a recoveryParam in the\n    // case that the signTransaction function only adds a v.\n    const sig = splitSignature(signature);\n    // We pushed a chainId and null r, s on for hashing only; remove those\n    let v = 27 + sig.recoveryParam;\n    if (chainId !== 0) {\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += chainId * 2 + 8;\n        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n        if (sig.v > 28 && sig.v !== v) {\n            logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n        }\n    }\n    else if (sig.v !== v) {\n        logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r)));\n    raw.push(stripZeros(arrayify(sig.s)));\n    return RLP.encode(raw);\n}\nexport function serialize(transaction, signature) {\n    // Legacy and EIP-155 Transactions\n    if (transaction.type == null) {\n        if (transaction.accessList != null) {\n            logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n        }\n        return _serialize(transaction, signature);\n    }\n    // Typed Transactions (EIP-2718)\n    switch (transaction.type) {\n        case 1:\n            return _serializeEip2930(transaction, signature);\n        default:\n            break;\n    }\n    return logger.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"serializeTransaction\",\n        transactionType: transaction.type\n    });\n}\nfunction _parseEip2930(payload) {\n    const transaction = RLP.decode(payload.slice(1));\n    if (transaction.length !== 8 && transaction.length !== 11) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n    }\n    const tx = {\n        type: 1,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        gasPrice: handleNumber(transaction[2]),\n        gasLimit: handleNumber(transaction[3]),\n        to: handleAddress(transaction[4]),\n        value: handleNumber(transaction[5]),\n        data: transaction[6],\n        accessList: accessListify(transaction[7]),\n    };\n    // Unsigned EIP-2930 Transaction\n    if (transaction.length === 8) {\n        return tx;\n    }\n    try {\n        const recid = handleNumber(transaction[8]).toNumber();\n        if (recid !== 0 && recid !== 1) {\n            throw new Error(\"bad recid\");\n        }\n        tx.v = recid;\n    }\n    catch (error) {\n        logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", transaction[8]);\n    }\n    tx.r = hexZeroPad(transaction[9], 32);\n    tx.s = hexZeroPad(transaction[10], 32);\n    try {\n        const digest = keccak256(_serializeEip2930(tx));\n        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });\n    }\n    catch (error) {\n        console.log(error);\n    }\n    tx.hash = keccak256(payload);\n    return tx;\n}\n// Legacy Transactions and EIP-155\nfunction _parse(rawTransaction) {\n    const transaction = RLP.decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n    }\n    const tx = {\n        nonce: handleNumber(transaction[0]).toNumber(),\n        gasPrice: handleNumber(transaction[1]),\n        gasLimit: handleNumber(transaction[2]),\n        to: handleAddress(transaction[3]),\n        value: handleNumber(transaction[4]),\n        data: transaction[5],\n        chainId: 0\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 6) {\n        return tx;\n    }\n    try {\n        tx.v = BigNumber.from(transaction[6]).toNumber();\n    }\n    catch (error) {\n        console.log(error);\n        return tx;\n    }\n    tx.r = hexZeroPad(transaction[7], 32);\n    tx.s = hexZeroPad(transaction[8], 32);\n    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.v;\n        tx.v = 0;\n    }\n    else {\n        // Signed Tranasaction\n        tx.chainId = Math.floor((tx.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        let recoveryParam = tx.v - 27;\n        const raw = transaction.slice(0, 6);\n        if (tx.chainId !== 0) {\n            raw.push(hexlify(tx.chainId));\n            raw.push(\"0x\");\n            raw.push(\"0x\");\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        const digest = keccak256(RLP.encode(raw));\n        try {\n            tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });\n        }\n        catch (error) {\n            console.log(error);\n        }\n        tx.hash = keccak256(rawTransaction);\n    }\n    tx.type = null;\n    return tx;\n}\nexport function parse(rawTransaction) {\n    const payload = arrayify(rawTransaction);\n    // Legacy and EIP-155 Transactions\n    if (payload[0] > 0x7f) {\n        return _parse(payload);\n    }\n    // Typed Transaction (EIP-2718)\n    switch (payload[0]) {\n        case 1:\n            return _parseEip2930(payload);\n        default:\n            break;\n    }\n    return logger.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"parseTransaction\",\n        transactionType: payload[0]\n    });\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}