{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst sha3 = require(\"js-sha3\");\n/**\r\n * Keccak256 hash\r\n * @param data The data\r\n */\n\n\nfunction keccak256(data) {\n  return '0x' + sha3.keccak_256(toByteArray(data));\n}\n\nexports.keccak256 = keccak256;\n/**\r\n * Adding padding to string on the left\r\n * @param value The value\r\n * @param chars The chars\r\n */\n\nexports.padLeft = (value, chars) => {\n  const hasPrefix = /^0x/i.test(value) || typeof value === 'number';\n  value = value.toString().replace(/^0x/i, '');\n  const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + new Array(padding).join('0') + value;\n};\n/**\r\n * Convert bytes to hex\r\n * @param bytes The bytes\r\n */\n\n\nfunction bytesToHex(bytes) {\n  const hex = [];\n\n  for (let i = 0; i < bytes.length; i++) {\n    hex.push((bytes[i] >>> 4).toString(16));\n    hex.push((bytes[i] & 0xf).toString(16));\n  }\n\n  return `0x${hex.join('').replace(/^0+/, '')}`;\n}\n\nexports.bytesToHex = bytesToHex;\n/**\r\n * To byte array\r\n * @param value The value\r\n */\n\nfunction toByteArray(value) {\n  if (value == null) {\n    throw new Error('cannot convert null value to array');\n  }\n\n  if (typeof value === 'string') {\n    const match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n\n    if (!match) {\n      throw new Error('invalid hexidecimal string');\n    }\n\n    if (match[1] !== '0x') {\n      throw new Error('hex string must have 0x prefix');\n    }\n\n    value = value.substring(2);\n\n    if (value.length % 2) {\n      value = '0' + value;\n    }\n\n    const result = [];\n\n    for (let i = 0; i < value.length; i += 2) {\n      result.push(parseInt(value.substr(i, 2), 16));\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (isByteArray(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  throw new Error('invalid arrayify value');\n}\n\nexports.toByteArray = toByteArray;\n/**\r\n * Is byte array\r\n * @param value The value\r\n */\n\nfunction isByteArray(value) {\n  if (!value || // tslint:disable-next-line: radix\n  parseInt(String(value.length)) != value.length || typeof value === 'string') {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i]; // tslint:disable-next-line: radix\n\n    if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * Add slice to array\r\n * @param array The array\r\n */\n\n\nfunction addSlice(array) {\n  if (array.slice !== undefined) {\n    return array;\n  }\n\n  array.slice = () => {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/ethereum-bloom-filters/dist/utils.js"],"names":["Object","defineProperty","exports","value","sha3","require","keccak256","data","keccak_256","toByteArray","padLeft","chars","hasPrefix","test","toString","replace","padding","length","Array","join","bytesToHex","bytes","hex","i","push","Error","match","substring","result","parseInt","substr","addSlice","Uint8Array","isByteArray","String","v","array","slice","undefined","args","prototype","call","arguments","apply"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst sha3 = require(\"js-sha3\");\r\n/**\r\n * Keccak256 hash\r\n * @param data The data\r\n */\r\nfunction keccak256(data) {\r\n    return '0x' + sha3.keccak_256(toByteArray(data));\r\n}\r\nexports.keccak256 = keccak256;\r\n/**\r\n * Adding padding to string on the left\r\n * @param value The value\r\n * @param chars The chars\r\n */\r\nexports.padLeft = (value, chars) => {\r\n    const hasPrefix = /^0x/i.test(value) || typeof value === 'number';\r\n    value = value.toString().replace(/^0x/i, '');\r\n    const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;\r\n    return (hasPrefix ? '0x' : '') + new Array(padding).join('0') + value;\r\n};\r\n/**\r\n * Convert bytes to hex\r\n * @param bytes The bytes\r\n */\r\nfunction bytesToHex(bytes) {\r\n    const hex = [];\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        hex.push((bytes[i] >>> 4).toString(16));\r\n        hex.push((bytes[i] & 0xf).toString(16));\r\n    }\r\n    return `0x${hex.join('').replace(/^0+/, '')}`;\r\n}\r\nexports.bytesToHex = bytesToHex;\r\n/**\r\n * To byte array\r\n * @param value The value\r\n */\r\nfunction toByteArray(value) {\r\n    if (value == null) {\r\n        throw new Error('cannot convert null value to array');\r\n    }\r\n    if (typeof value === 'string') {\r\n        const match = value.match(/^(0x)?[0-9a-fA-F]*$/);\r\n        if (!match) {\r\n            throw new Error('invalid hexidecimal string');\r\n        }\r\n        if (match[1] !== '0x') {\r\n            throw new Error('hex string must have 0x prefix');\r\n        }\r\n        value = value.substring(2);\r\n        if (value.length % 2) {\r\n            value = '0' + value;\r\n        }\r\n        const result = [];\r\n        for (let i = 0; i < value.length; i += 2) {\r\n            result.push(parseInt(value.substr(i, 2), 16));\r\n        }\r\n        return addSlice(new Uint8Array(result));\r\n    }\r\n    if (isByteArray(value)) {\r\n        return addSlice(new Uint8Array(value));\r\n    }\r\n    throw new Error('invalid arrayify value');\r\n}\r\nexports.toByteArray = toByteArray;\r\n/**\r\n * Is byte array\r\n * @param value The value\r\n */\r\nfunction isByteArray(value) {\r\n    if (!value ||\r\n        // tslint:disable-next-line: radix\r\n        parseInt(String(value.length)) != value.length ||\r\n        typeof value === 'string') {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < value.length; i++) {\r\n        const v = value[i];\r\n        // tslint:disable-next-line: radix\r\n        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Add slice to array\r\n * @param array The array\r\n */\r\nfunction addSlice(array) {\r\n    if (array.slice !== undefined) {\r\n        return array;\r\n    }\r\n    array.slice = () => {\r\n        const args = Array.prototype.slice.call(arguments);\r\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\r\n    };\r\n    return array;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}