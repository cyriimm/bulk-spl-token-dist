{"ast":null,"code":"/* eslint-env browser */\n\n/* global globalThis:readonly */\n'use strict'; // Ponyfill for `globalThis`\n\nconst _globalThis = (() => {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  /* istanbul ignore next */\n\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  /* istanbul ignore next */\n\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n})();\n\nconst bufferToHex = buffer => {\n  const view = new DataView(buffer);\n  let hexCodes = '';\n\n  for (let i = 0; i < view.byteLength; i += 4) {\n    hexCodes += view.getUint32(i).toString(16).padStart(8, '0');\n  }\n\n  return hexCodes;\n};\n\nconst create = algorithm => async (buffer, options) => {\n  if (typeof buffer === 'string') {\n    buffer = new _globalThis.TextEncoder().encode(buffer);\n  }\n\n  options = {\n    outputFormat: 'hex',\n    ...options\n  };\n  const hash = await _globalThis.crypto.subtle.digest(algorithm, buffer);\n  return options.outputFormat === 'hex' ? bufferToHex(hash) : hash;\n};\n\nexports.sha1 = create('SHA-1');\nexports.sha256 = create('SHA-256');\nexports.sha384 = create('SHA-384');\nexports.sha512 = create('SHA-512');","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/crypto-hash/browser.js"],"names":["_globalThis","globalThis","self","window","global","bufferToHex","buffer","view","DataView","hexCodes","i","byteLength","getUint32","toString","padStart","create","algorithm","options","TextEncoder","encode","outputFormat","hash","crypto","subtle","digest","exports","sha1","sha256","sha384","sha512"],"mappings":"AAAA;;AACA;AACA,a,CAEA;;AACA,MAAMA,WAAW,GAAG,CAAC,MAAM;AAC1B,MAAI,OAAOC,UAAP,KAAsB,WAA1B,EAAuC;AACtC,WAAOA,UAAP;AACA;;AAED,MAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAChC,WAAOA,IAAP;AACA;AAED;;;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAClC,WAAOA,MAAP;AACA;AAED;;;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAClC,WAAOA,MAAP;AACA;AACD,CAlBmB,GAApB;;AAoBA,MAAMC,WAAW,GAAGC,MAAM,IAAI;AAC7B,QAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaF,MAAb,CAAb;AAEA,MAAIG,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,UAAzB,EAAqCD,CAAC,IAAI,CAA1C,EAA6C;AAC5CD,IAAAA,QAAQ,IAAIF,IAAI,CAACK,SAAL,CAAeF,CAAf,EAAkBG,QAAlB,CAA2B,EAA3B,EAA+BC,QAA/B,CAAwC,CAAxC,EAA2C,GAA3C,CAAZ;AACA;;AAED,SAAOL,QAAP;AACA,CATD;;AAWA,MAAMM,MAAM,GAAGC,SAAS,IAAI,OAAOV,MAAP,EAAeW,OAAf,KAA2B;AACtD,MAAI,OAAOX,MAAP,KAAkB,QAAtB,EAAgC;AAC/BA,IAAAA,MAAM,GAAG,IAAIN,WAAW,CAACkB,WAAhB,GAA8BC,MAA9B,CAAqCb,MAArC,CAAT;AACA;;AAEDW,EAAAA,OAAO,GAAG;AACTG,IAAAA,YAAY,EAAE,KADL;AAET,OAAGH;AAFM,GAAV;AAKA,QAAMI,IAAI,GAAG,MAAMrB,WAAW,CAACsB,MAAZ,CAAmBC,MAAnB,CAA0BC,MAA1B,CAAiCR,SAAjC,EAA4CV,MAA5C,CAAnB;AAEA,SAAOW,OAAO,CAACG,YAAR,KAAyB,KAAzB,GAAiCf,WAAW,CAACgB,IAAD,CAA5C,GAAqDA,IAA5D;AACA,CAbD;;AAeAI,OAAO,CAACC,IAAR,GAAeX,MAAM,CAAC,OAAD,CAArB;AACAU,OAAO,CAACE,MAAR,GAAiBZ,MAAM,CAAC,SAAD,CAAvB;AACAU,OAAO,CAACG,MAAR,GAAiBb,MAAM,CAAC,SAAD,CAAvB;AACAU,OAAO,CAACI,MAAR,GAAiBd,MAAM,CAAC,SAAD,CAAvB","sourcesContent":["/* eslint-env browser */\n/* global globalThis:readonly */\n'use strict';\n\n// Ponyfill for `globalThis`\nconst _globalThis = (() => {\n\tif (typeof globalThis !== 'undefined') {\n\t\treturn globalThis;\n\t}\n\n\tif (typeof self !== 'undefined') {\n\t\treturn self;\n\t}\n\n\t/* istanbul ignore next */\n\tif (typeof window !== 'undefined') {\n\t\treturn window;\n\t}\n\n\t/* istanbul ignore next */\n\tif (typeof global !== 'undefined') {\n\t\treturn global;\n\t}\n})();\n\nconst bufferToHex = buffer => {\n\tconst view = new DataView(buffer);\n\n\tlet hexCodes = '';\n\tfor (let i = 0; i < view.byteLength; i += 4) {\n\t\thexCodes += view.getUint32(i).toString(16).padStart(8, '0');\n\t}\n\n\treturn hexCodes;\n};\n\nconst create = algorithm => async (buffer, options) => {\n\tif (typeof buffer === 'string') {\n\t\tbuffer = new _globalThis.TextEncoder().encode(buffer);\n\t}\n\n\toptions = {\n\t\toutputFormat: 'hex',\n\t\t...options\n\t};\n\n\tconst hash = await _globalThis.crypto.subtle.digest(algorithm, buffer);\n\n\treturn options.outputFormat === 'hex' ? bufferToHex(hash) : hash;\n};\n\nexports.sha1 = create('SHA-1');\nexports.sha256 = create('SHA-256');\nexports.sha384 = create('SHA-384');\nexports.sha512 = create('SHA-512');\n"]},"metadata":{},"sourceType":"script"}