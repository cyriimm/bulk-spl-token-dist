{"ast":null,"code":"const {\n  Transform\n} = require('stream');\n\nmodule.exports = KeccakState => class Shake extends Transform {\n  constructor(rate, capacity, delimitedSuffix, options) {\n    super(options);\n    this._rate = rate;\n    this._capacity = capacity;\n    this._delimitedSuffix = delimitedSuffix;\n    this._options = options;\n    this._state = new KeccakState();\n\n    this._state.initialize(rate, capacity);\n\n    this._finalized = false;\n  }\n\n  _transform(chunk, encoding, callback) {\n    let error = null;\n\n    try {\n      this.update(chunk, encoding);\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error);\n  }\n\n  _flush() {}\n\n  _read(size) {\n    this.push(this.squeeze(size));\n  }\n\n  update(data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');\n    if (this._finalized) throw new Error('Squeeze already called');\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);\n\n    this._state.absorb(data);\n\n    return this;\n  }\n\n  squeeze(dataByteLength, encoding) {\n    if (!this._finalized) {\n      this._finalized = true;\n\n      this._state.absorbLastFewBits(this._delimitedSuffix);\n    }\n\n    let data = this._state.squeeze(dataByteLength);\n\n    if (encoding !== undefined) data = data.toString(encoding);\n    return data;\n  }\n\n  _resetState() {\n    this._state.initialize(this._rate, this._capacity);\n\n    return this;\n  }\n\n  _clone() {\n    const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);\n\n    this._state.copy(clone._state);\n\n    clone._finalized = this._finalized;\n    return clone;\n  }\n\n};","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/keccak/lib/api/shake.js"],"names":["Transform","require","module","exports","KeccakState","Shake","constructor","rate","capacity","delimitedSuffix","options","_rate","_capacity","_delimitedSuffix","_options","_state","initialize","_finalized","_transform","chunk","encoding","callback","error","update","err","_flush","_read","size","push","squeeze","data","Buffer","isBuffer","TypeError","Error","from","absorb","dataByteLength","absorbLastFewBits","undefined","toString","_resetState","_clone","clone","copy"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,QAAD,CAA7B;;AAEAC,MAAM,CAACC,OAAP,GAAkBC,WAAD,IAAiB,MAAMC,KAAN,SAAoBL,SAApB,CAA8B;AAC9DM,EAAAA,WAAW,CAAEC,IAAF,EAAQC,QAAR,EAAkBC,eAAlB,EAAmCC,OAAnC,EAA4C;AACrD,UAAMA,OAAN;AAEA,SAAKC,KAAL,GAAaJ,IAAb;AACA,SAAKK,SAAL,GAAiBJ,QAAjB;AACA,SAAKK,gBAAL,GAAwBJ,eAAxB;AACA,SAAKK,QAAL,GAAgBJ,OAAhB;AAEA,SAAKK,MAAL,GAAc,IAAIX,WAAJ,EAAd;;AACA,SAAKW,MAAL,CAAYC,UAAZ,CAAuBT,IAAvB,EAA6BC,QAA7B;;AACA,SAAKS,UAAL,GAAkB,KAAlB;AACD;;AAEDC,EAAAA,UAAU,CAAEC,KAAF,EAASC,QAAT,EAAmBC,QAAnB,EAA6B;AACrC,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI;AACF,WAAKC,MAAL,CAAYJ,KAAZ,EAAmBC,QAAnB;AACD,KAFD,CAEE,OAAOI,GAAP,EAAY;AACZF,MAAAA,KAAK,GAAGE,GAAR;AACD;;AAEDH,IAAAA,QAAQ,CAACC,KAAD,CAAR;AACD;;AAEDG,EAAAA,MAAM,GAAI,CAAE;;AAEZC,EAAAA,KAAK,CAAEC,IAAF,EAAQ;AACX,SAAKC,IAAL,CAAU,KAAKC,OAAL,CAAaF,IAAb,CAAV;AACD;;AAEDJ,EAAAA,MAAM,CAAEO,IAAF,EAAQV,QAAR,EAAkB;AACtB,QAAI,CAACW,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CAAD,IAA0B,OAAOA,IAAP,KAAgB,QAA9C,EAAwD,MAAM,IAAIG,SAAJ,CAAc,mCAAd,CAAN;AACxD,QAAI,KAAKhB,UAAT,EAAqB,MAAM,IAAIiB,KAAJ,CAAU,wBAAV,CAAN;AACrB,QAAI,CAACH,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CAAL,EAA4BA,IAAI,GAAGC,MAAM,CAACI,IAAP,CAAYL,IAAZ,EAAkBV,QAAlB,CAAP;;AAE5B,SAAKL,MAAL,CAAYqB,MAAZ,CAAmBN,IAAnB;;AAEA,WAAO,IAAP;AACD;;AAEDD,EAAAA,OAAO,CAAEQ,cAAF,EAAkBjB,QAAlB,EAA4B;AACjC,QAAI,CAAC,KAAKH,UAAV,EAAsB;AACpB,WAAKA,UAAL,GAAkB,IAAlB;;AACA,WAAKF,MAAL,CAAYuB,iBAAZ,CAA8B,KAAKzB,gBAAnC;AACD;;AAED,QAAIiB,IAAI,GAAG,KAAKf,MAAL,CAAYc,OAAZ,CAAoBQ,cAApB,CAAX;;AACA,QAAIjB,QAAQ,KAAKmB,SAAjB,EAA4BT,IAAI,GAAGA,IAAI,CAACU,QAAL,CAAcpB,QAAd,CAAP;AAE5B,WAAOU,IAAP;AACD;;AAEDW,EAAAA,WAAW,GAAI;AACb,SAAK1B,MAAL,CAAYC,UAAZ,CAAuB,KAAKL,KAA5B,EAAmC,KAAKC,SAAxC;;AACA,WAAO,IAAP;AACD;;AAED8B,EAAAA,MAAM,GAAI;AACR,UAAMC,KAAK,GAAG,IAAItC,KAAJ,CAAU,KAAKM,KAAf,EAAsB,KAAKC,SAA3B,EAAsC,KAAKC,gBAA3C,EAA6D,KAAKC,QAAlE,CAAd;;AACA,SAAKC,MAAL,CAAY6B,IAAZ,CAAiBD,KAAK,CAAC5B,MAAvB;;AACA4B,IAAAA,KAAK,CAAC1B,UAAN,GAAmB,KAAKA,UAAxB;AAEA,WAAO0B,KAAP;AACD;;AAhE6D,CAAhE","sourcesContent":["const { Transform } = require('stream')\n\nmodule.exports = (KeccakState) => class Shake extends Transform {\n  constructor (rate, capacity, delimitedSuffix, options) {\n    super(options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  _transform (chunk, encoding, callback) {\n    let error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  _flush () {}\n\n  _read (size) {\n    this.push(this.squeeze(size))\n  }\n\n  update (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Squeeze already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  squeeze (dataByteLength, encoding) {\n    if (!this._finalized) {\n      this._finalized = true\n      this._state.absorbLastFewBits(this._delimitedSuffix)\n    }\n\n    let data = this._state.squeeze(dataByteLength)\n    if (encoding !== undefined) data = data.toString(encoding)\n\n    return data\n  }\n\n  _resetState () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  _clone () {\n    const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n}\n"]},"metadata":{},"sourceType":"script"}