{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useAsyncData } from '../fetch-loop';\nexport class SwapApiError extends Error {\n  constructor(msg, status) {\n    super(msg);\n    this.name = 'SwapApiError';\n    this.status = status;\n  }\n\n}\nexport async function swapApiRequest(method, path, body, {\n  ignoreUserErrors = false\n} = {}) {\n  let headers = {};\n  let params = {\n    headers,\n    method\n  };\n\n  if (method === 'GET') {\n    params.cache = 'no-cache';\n  } else if (body) {\n    headers['Content-Type'] = 'application/json';\n    params.body = JSON.stringify(body);\n  }\n\n  let resp = await fetch(`https://swap.sollet.io/api/${path}`, params);\n  return await handleSwapApiResponse(resp, ignoreUserErrors);\n}\n\nasync function handleSwapApiResponse(resp, ignoreUserErrors) {\n  let json = await resp.json();\n\n  if (!json.success) {\n    if (ignoreUserErrors && resp.status >= 400 && resp.status < 500) {\n      return null;\n    }\n\n    throw new SwapApiError(json.error, resp.status);\n  }\n\n  return json.result;\n}\n\nexport function useSwapApiGet(path, options) {\n  _s();\n\n  return useAsyncData(async () => {\n    if (!path) {\n      return null;\n    }\n\n    return await swapApiRequest('GET', path, undefined, {\n      ignoreUserErrors: true\n    });\n  }, ['swapApiGet', path], options);\n}\n\n_s(useSwapApiGet, \"VvjupQN9co9WyH7qEGtzuvlmIWE=\", false, function () {\n  return [useAsyncData];\n});","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/swap/api.js"],"names":["useAsyncData","SwapApiError","Error","constructor","msg","status","name","swapApiRequest","method","path","body","ignoreUserErrors","headers","params","cache","JSON","stringify","resp","fetch","handleSwapApiResponse","json","success","error","result","useSwapApiGet","options","undefined"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,eAA7B;AAEA,OAAO,MAAMC,YAAN,SAA2BC,KAA3B,CAAiC;AACtCC,EAAAA,WAAW,CAACC,GAAD,EAAMC,MAAN,EAAc;AACvB,UAAMD,GAAN;AACA,SAAKE,IAAL,GAAY,cAAZ;AACA,SAAKD,MAAL,GAAcA,MAAd;AACD;;AALqC;AAQxC,OAAO,eAAeE,cAAf,CACLC,MADK,EAELC,IAFK,EAGLC,IAHK,EAIL;AAAEC,EAAAA,gBAAgB,GAAG;AAArB,IAA+B,EAJ1B,EAKL;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,MAAM,GAAG;AAAED,IAAAA,OAAF;AAAWJ,IAAAA;AAAX,GAAb;;AACA,MAAIA,MAAM,KAAK,KAAf,EAAsB;AACpBK,IAAAA,MAAM,CAACC,KAAP,GAAe,UAAf;AACD,GAFD,MAEO,IAAIJ,IAAJ,EAAU;AACfE,IAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACAC,IAAAA,MAAM,CAACH,IAAP,GAAcK,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAd;AACD;;AAED,MAAIO,IAAI,GAAG,MAAMC,KAAK,CAAE,8BAA6BT,IAAK,EAApC,EAAuCI,MAAvC,CAAtB;AACA,SAAO,MAAMM,qBAAqB,CAACF,IAAD,EAAON,gBAAP,CAAlC;AACD;;AAED,eAAeQ,qBAAf,CAAqCF,IAArC,EAA2CN,gBAA3C,EAA6D;AAC3D,MAAIS,IAAI,GAAG,MAAMH,IAAI,CAACG,IAAL,EAAjB;;AACA,MAAI,CAACA,IAAI,CAACC,OAAV,EAAmB;AACjB,QAAIV,gBAAgB,IAAIM,IAAI,CAACZ,MAAL,IAAe,GAAnC,IAA0CY,IAAI,CAACZ,MAAL,GAAc,GAA5D,EAAiE;AAC/D,aAAO,IAAP;AACD;;AACD,UAAM,IAAIJ,YAAJ,CAAiBmB,IAAI,CAACE,KAAtB,EAA6BL,IAAI,CAACZ,MAAlC,CAAN;AACD;;AACD,SAAOe,IAAI,CAACG,MAAZ;AACD;;AAED,OAAO,SAASC,aAAT,CAAuBf,IAAvB,EAA6BgB,OAA7B,EAAsC;AAAA;;AAC3C,SAAOzB,YAAY,CACjB,YAAY;AACV,QAAI,CAACS,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AACD,WAAO,MAAMF,cAAc,CAAC,KAAD,EAAQE,IAAR,EAAciB,SAAd,EAAyB;AAClDf,MAAAA,gBAAgB,EAAE;AADgC,KAAzB,CAA3B;AAGD,GARgB,EASjB,CAAC,YAAD,EAAeF,IAAf,CATiB,EAUjBgB,OAViB,CAAnB;AAYD;;GAbeD,a;UACPxB,Y","sourcesContent":["import { useAsyncData } from '../fetch-loop';\n\nexport class SwapApiError extends Error {\n  constructor(msg, status) {\n    super(msg);\n    this.name = 'SwapApiError';\n    this.status = status;\n  }\n}\n\nexport async function swapApiRequest(\n  method,\n  path,\n  body,\n  { ignoreUserErrors = false } = {},\n) {\n  let headers = {};\n  let params = { headers, method };\n  if (method === 'GET') {\n    params.cache = 'no-cache';\n  } else if (body) {\n    headers['Content-Type'] = 'application/json';\n    params.body = JSON.stringify(body);\n  }\n\n  let resp = await fetch(`https://swap.sollet.io/api/${path}`, params);\n  return await handleSwapApiResponse(resp, ignoreUserErrors);\n}\n\nasync function handleSwapApiResponse(resp, ignoreUserErrors) {\n  let json = await resp.json();\n  if (!json.success) {\n    if (ignoreUserErrors && resp.status >= 400 && resp.status < 500) {\n      return null;\n    }\n    throw new SwapApiError(json.error, resp.status);\n  }\n  return json.result;\n}\n\nexport function useSwapApiGet(path, options) {\n  return useAsyncData(\n    async () => {\n      if (!path) {\n        return null;\n      }\n      return await swapApiRequest('GET', path, undefined, {\n        ignoreUserErrors: true,\n      });\n    },\n    ['swapApiGet', path],\n    options,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}