{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\"; // @TODO: Merge this with bytes\n\nexport class FixedBytesCoder extends Coder {\n  constructor(size, localName) {\n    let name = \"bytes\" + String(size);\n    super(name, name, localName, false);\n    this.size = size;\n  }\n\n  encode(writer, value) {\n    let data = arrayify(value);\n\n    if (data.length !== this.size) {\n      this._throwError(\"incorrect data length\", value);\n    }\n\n    return writer.writeBytes(data);\n  }\n\n  decode(reader) {\n    return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n  }\n\n}","map":{"version":3,"sources":["../../src.ts/coders/fixed-bytes.ts"],"names":[],"mappings":"AAAA;;AAEA,SAAS,QAAT,EAA8B,OAA9B,QAA6C,sBAA7C;AAEA,SAAS,KAAT,QAAsC,kBAAtC,C,CAEA;;AACA,OAAM,MAAO,eAAP,SAA+B,KAA/B,CAAoC;AAGtC,EAAA,WAAA,CAAY,IAAZ,EAA0B,SAA1B,EAA2C;AACvC,QAAI,IAAI,GAAG,UAAU,MAAM,CAAC,IAAD,CAA3B;AACA,UAAM,IAAN,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,KAA7B;AACA,SAAK,IAAL,GAAY,IAAZ;AACH;;AAED,EAAA,MAAM,CAAC,MAAD,EAAiB,KAAjB,EAAiC;AACnC,QAAI,IAAI,GAAG,QAAQ,CAAC,KAAD,CAAnB;;AACA,QAAI,IAAI,CAAC,MAAL,KAAgB,KAAK,IAAzB,EAA+B;AAAE,WAAK,WAAL,CAAiB,uBAAjB,EAA0C,KAA1C;AAAmD;;AACpF,WAAO,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAP;AACH;;AAED,EAAA,MAAM,CAAC,MAAD,EAAe;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,OAAO,CAAC,MAAM,CAAC,SAAP,CAAiB,KAAK,IAAtB,CAAD,CAAhC,CAAP;AACH;;AAjBqC","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    constructor(size, localName) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n    encode(writer, value) {\n        let data = arrayify(value);\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n//# sourceMappingURL=fixed-bytes.js.map"]},"metadata":{},"sourceType":"module"}