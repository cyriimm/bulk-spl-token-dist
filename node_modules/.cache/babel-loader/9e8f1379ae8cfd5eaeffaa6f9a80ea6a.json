{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/TokenInstruction.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport LabelValue from './LabelValue';\nimport { useWallet, useWalletPublicKeys } from '../../utils/wallet';\nimport { TOKEN_MINTS } from '@project-serum/serum';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TYPE_LABELS = {\n  initializeMint: 'Initialize mint',\n  initializeAccount: 'Initialize account',\n  transfer: 'Transfer',\n  approve: 'Approve',\n  mintTo: 'Mint to',\n  closeAccount: 'Close account'\n};\nconst DATA_LABELS = {\n  amount: {\n    label: 'Amount',\n    address: false\n  },\n  accountPubkey: {\n    label: 'Account',\n    address: true\n  },\n  mintPubkey: {\n    label: 'Mint',\n    address: true\n  },\n  sourcePubkey: {\n    label: 'Source',\n    address: true\n  },\n  destinationPubkey: {\n    label: 'Destination',\n    address: true\n  },\n  ownerPubkey: {\n    label: 'Owner',\n    address: true\n  }\n};\nexport default function TokenInstruction({\n  instruction,\n  onOpenAddress\n}) {\n  _s();\n\n  const wallet = useWallet();\n  const [publicKeys] = useWalletPublicKeys();\n  const {\n    type,\n    data\n  } = instruction;\n\n  const getAddressValue = address => {\n    const tokenMint = TOKEN_MINTS.find(token => token.address.equals(address));\n    const isOwned = publicKeys.some(ownedKey => ownedKey.equals(address));\n    const isOwner = wallet.publicKey.equals(address);\n    return tokenMint ? tokenMint.name : isOwner ? 'This wallet' : (isOwned ? '(Owned) ' : '') + (address === null || address === void 0 ? void 0 : address.toBase58());\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle1\",\n      style: {\n        fontWeight: 'bold'\n      },\n      gutterBottom: true,\n      children: TYPE_LABELS[type]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), data && Object.entries(data).map(([key, value]) => {\n      const dataLabel = DATA_LABELS[key];\n\n      if (!dataLabel) {\n        return null;\n      }\n\n      const {\n        label,\n        address\n      } = dataLabel;\n      return /*#__PURE__*/_jsxDEV(LabelValue, {\n        label: label + '',\n        value: address ? getAddressValue(value) : value,\n        link: address,\n        onClick: () => address && onOpenAddress(value === null || value === void 0 ? void 0 : value.toBase58())\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true);\n}\n\n_s(TokenInstruction, \"OIHAH4Qu9cUzwaodVytaKR+bKl0=\", false, function () {\n  return [useWallet, useWalletPublicKeys];\n});\n\n_c = TokenInstruction;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenInstruction\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/TokenInstruction.js"],"names":["React","Typography","LabelValue","useWallet","useWalletPublicKeys","TOKEN_MINTS","TYPE_LABELS","initializeMint","initializeAccount","transfer","approve","mintTo","closeAccount","DATA_LABELS","amount","label","address","accountPubkey","mintPubkey","sourcePubkey","destinationPubkey","ownerPubkey","TokenInstruction","instruction","onOpenAddress","wallet","publicKeys","type","data","getAddressValue","tokenMint","find","token","equals","isOwned","some","ownedKey","isOwner","publicKey","name","toBase58","fontWeight","Object","entries","map","key","value","dataLabel"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport LabelValue from './LabelValue';\nimport { useWallet, useWalletPublicKeys } from '../../utils/wallet';\nimport { TOKEN_MINTS } from '@project-serum/serum';\n\nconst TYPE_LABELS = {\n  initializeMint: 'Initialize mint',\n  initializeAccount: 'Initialize account',\n  transfer: 'Transfer',\n  approve: 'Approve',\n  mintTo: 'Mint to',\n  closeAccount: 'Close account',\n};\n\nconst DATA_LABELS = {\n  amount: { label: 'Amount', address: false },\n  accountPubkey: { label: 'Account', address: true },\n  mintPubkey: { label: 'Mint', address: true },\n  sourcePubkey: { label: 'Source', address: true },\n  destinationPubkey: { label: 'Destination', address: true },\n  ownerPubkey: { label: 'Owner', address: true },\n};\n\nexport default function TokenInstruction({ instruction, onOpenAddress }) {\n  const wallet = useWallet();\n  const [publicKeys] = useWalletPublicKeys();\n  const { type, data } = instruction;\n\n  const getAddressValue = (address) => {\n    const tokenMint = TOKEN_MINTS.find((token) =>\n      token.address.equals(address),\n    );\n    const isOwned = publicKeys.some((ownedKey) => ownedKey.equals(address));\n    const isOwner = wallet.publicKey.equals(address);\n    return tokenMint\n      ? tokenMint.name\n      : isOwner\n      ? 'This wallet'\n      : (isOwned ? '(Owned) ' : '') + address?.toBase58();\n  };\n\n  return (\n    <>\n      <Typography\n        variant=\"subtitle1\"\n        style={{ fontWeight: 'bold' }}\n        gutterBottom\n      >\n        {TYPE_LABELS[type]}\n      </Typography>\n      {data &&\n        Object.entries(data).map(([key, value]) => {\n          const dataLabel = DATA_LABELS[key];\n          if (!dataLabel) {\n            return null;\n          }\n          const { label, address } = dataLabel;\n          return (\n            <LabelValue\n              key={key}\n              label={label + ''}\n              value={address ? getAddressValue(value) : value}\n              link={address}\n              onClick={() => address && onOpenAddress(value?.toBase58())}\n            />\n          );\n        })}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}