{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignFormContent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Warning from '@material-ui/icons/Warning';\nimport { Tooltip, Typography, Divider } from '@material-ui/core';\nimport { useWallet } from '../utils/wallet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction toHex(buffer) {\n  return Array.prototype.map.call(buffer, x => ('00' + x.toString(16)).slice(-2)).join('');\n}\n\nexport default function SignFormContent({\n  origin,\n  message,\n  messageDisplay,\n  buttonRef\n}) {\n  _s();\n\n  useEffect(() => {\n    // brings window to front when we receive new instructions\n    // this needs to be executed from wallet instead of adapter\n    // to ensure chrome brings window to front\n    window.focus(); // Scroll to approve button and focus it to enable approve with enter.\n    // Keep currentButtonRef in local variable, so the reference can't become\n    // invalid until the timeout is over. this was happening to all auto-\n    // approvals for unknown reasons.\n\n    let currentButtonRef = buttonRef.current;\n\n    if (currentButtonRef) {\n      currentButtonRef.scrollIntoView({\n        behavior: 'smooth'\n      });\n      setTimeout(() => currentButtonRef.focus(), 50);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [buttonRef]);\n  const wallet = useWallet();\n  let messageTxt;\n\n  switch (messageDisplay) {\n    case 'utf8':\n      messageTxt = new TextDecoder().decode(message);\n      break;\n\n    case 'hex':\n      messageTxt = '0x' + toHex(message);\n      break;\n\n    default:\n      throw new Error('Unexpected message type: ' + messageDisplay);\n  }\n\n  const renderAction = () => {\n    switch (messageDisplay) {\n      case 'utf8':\n        return `Sign message with account ${wallet.publicKey}`;\n\n      case 'hex':\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Be especially cautious when signing arbitrary data, you must trust the requester.\",\n            arrow: true,\n            children: /*#__PURE__*/_jsxDEV(Warning, {\n              style: {\n                marginBottom: '-7px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), ' ', `Sign data with account ${wallet.publicKey}`]\n        }, void 0, true);\n\n      default:\n        throw new Error('Unexpected message display type: ' + messageDisplay);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CardContent, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: `${origin} wants to:`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle1\",\n      style: {\n        fontWeight: 'bold'\n      },\n      gutterBottom: true,\n      children: renderAction()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      style: {\n        margin: 20\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      style: {\n        wordBreak: 'break-all'\n      },\n      children: messageTxt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      style: {\n        margin: 20\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignFormContent, \"C7lCWo6wvJLmOWtP6syx2496rC8=\", false, function () {\n  return [useWallet];\n});\n\n_c = SignFormContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignFormContent\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignFormContent.js"],"names":["React","useEffect","CardContent","Warning","Tooltip","Typography","Divider","useWallet","toHex","buffer","Array","prototype","map","call","x","toString","slice","join","SignFormContent","origin","message","messageDisplay","buttonRef","window","focus","currentButtonRef","current","scrollIntoView","behavior","setTimeout","wallet","messageTxt","TextDecoder","decode","Error","renderAction","publicKey","marginBottom","fontWeight","margin","wordBreak"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Warning from '@material-ui/icons/Warning';\nimport { Tooltip, Typography, Divider } from '@material-ui/core';\nimport { useWallet } from '../utils/wallet';\n\nfunction toHex(buffer) {\n  return Array.prototype.map\n    .call(buffer, (x) => ('00' + x.toString(16)).slice(-2))\n    .join('');\n}\n\nexport default function SignFormContent({\n  origin,\n  message,\n  messageDisplay,\n  buttonRef,\n}) {\n  useEffect(() => {\n    // brings window to front when we receive new instructions\n    // this needs to be executed from wallet instead of adapter\n    // to ensure chrome brings window to front\n    window.focus();\n\n    // Scroll to approve button and focus it to enable approve with enter.\n    // Keep currentButtonRef in local variable, so the reference can't become\n    // invalid until the timeout is over. this was happening to all auto-\n    // approvals for unknown reasons.\n    let currentButtonRef = buttonRef.current;\n    if (currentButtonRef) {\n      currentButtonRef.scrollIntoView({ behavior: 'smooth' });\n      setTimeout(() => currentButtonRef.focus(), 50);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [buttonRef]);\n\n  const wallet = useWallet();\n\n  let messageTxt;\n  switch (messageDisplay) {\n    case 'utf8':\n      messageTxt = new TextDecoder().decode(message);\n      break;\n    case 'hex':\n      messageTxt = '0x' + toHex(message);\n      break;\n    default:\n      throw new Error('Unexpected message type: ' + messageDisplay);\n  }\n\n  const renderAction = () => {\n    switch (messageDisplay) {\n      case 'utf8':\n        return `Sign message with account ${wallet.publicKey}`;\n      case 'hex':\n        return (\n          <>\n            <Tooltip\n              title=\"Be especially cautious when signing arbitrary data, you must trust the requester.\"\n              arrow\n            >\n              <Warning style={{ marginBottom: '-7px' }} />\n            </Tooltip>{' '}\n            {`Sign data with account ${wallet.publicKey}`}\n          </>\n        );\n      default:\n        throw new Error('Unexpected message display type: ' + messageDisplay);\n    }\n  };\n\n  return (\n    <CardContent>\n      <Typography variant=\"h6\" gutterBottom>\n        {`${origin} wants to:`}\n      </Typography>\n      <Typography\n        variant=\"subtitle1\"\n        style={{ fontWeight: 'bold' }}\n        gutterBottom\n      >\n        {renderAction()}\n      </Typography>\n      <Divider style={{ margin: 20 }} />\n      <Typography style={{ wordBreak: 'break-all' }}>{messageTxt}</Typography>\n      <Divider style={{ margin: 20 }} />\n    </CardContent>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}