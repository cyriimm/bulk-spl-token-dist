{"ast":null,"code":"const Bytes = require(\"./bytes\");\n\nconst Nat = require(\"./nat\");\n\nconst elliptic = require(\"elliptic\");\n\nconst rlp = require(\"./rlp\");\n\nconst secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\n\nconst {\n  keccak256,\n  keccak256s\n} = require(\"./hash\");\n\nconst create = entropy => {\n  const innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  const middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  const outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\n\nconst toChecksum = address => {\n  const addressHash = keccak256s(address.slice(2));\n  let checksumAddress = \"0x\";\n\n  for (let i = 0; i < 40; i++) checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n\n  return checksumAddress;\n};\n\nconst fromPrivate = privateKey => {\n  const buffer = new Buffer(privateKey.slice(2), \"hex\");\n  const ecKey = secp256k1.keyFromPrivate(buffer);\n  const publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\n\nconst encodeSignature = ([v, r, s]) => Bytes.flatten([r, s, v]);\n\nconst decodeSignature = hex => [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n\nconst makeSigner = addToV => (hash, privateKey) => {\n  const signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), {\n    canonical: true\n  });\n  return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n};\n\nconst sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nconst recover = (hash, signature) => {\n  const vals = decodeSignature(signature);\n  const vrs = {\n    v: Bytes.toNumber(vals[0]),\n    r: vals[1].slice(2),\n    s: vals[2].slice(2)\n  };\n  const ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n\n  const publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\n\nmodule.exports = {\n  create,\n  toChecksum,\n  fromPrivate,\n  sign,\n  makeSigner,\n  recover,\n  encodeSignature,\n  decodeSignature\n};","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/node_modules/eth-lib/lib/account.js"],"names":["Bytes","require","Nat","elliptic","rlp","secp256k1","ec","keccak256","keccak256s","create","entropy","innerHex","concat","random","middleHex","outerHex","fromPrivate","toChecksum","address","addressHash","slice","checksumAddress","i","parseInt","toUpperCase","privateKey","buffer","Buffer","ecKey","keyFromPrivate","publicKey","getPublic","publicHash","encodeSignature","v","r","s","flatten","decodeSignature","hex","length","makeSigner","addToV","hash","signature","sign","canonical","fromString","fromNumber","recoveryParam","pad","fromNat","toString","recover","vals","vrs","toNumber","ecPublicKey","recoverPubKey","encode","module","exports"],"mappings":"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","sourcesContent":["const Bytes = require(\"./bytes\");\nconst Nat = require(\"./nat\");\nconst elliptic = require(\"elliptic\");\nconst rlp = require(\"./rlp\");\nconst secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\nconst { keccak256, keccak256s } = require(\"./hash\");\n\nconst create = entropy => {\n  const innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  const middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  const outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\n\nconst toChecksum = address => {\n  const addressHash = keccak256s(address.slice(2));\n  let checksumAddress = \"0x\";\n  for (let i = 0; i < 40; i++) checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n  return checksumAddress;\n};\n\nconst fromPrivate = privateKey => {\n  const buffer = new Buffer(privateKey.slice(2), \"hex\");\n  const ecKey = secp256k1.keyFromPrivate(buffer);\n  const publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\n\nconst encodeSignature = ([v, r, s]) => Bytes.flatten([r, s, v]);\n\nconst decodeSignature = hex => [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n\nconst makeSigner = addToV => (hash, privateKey) => {\n  const signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), { canonical: true });\n  return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n};\n\nconst sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nconst recover = (hash, signature) => {\n  const vals = decodeSignature(signature);\n  const vrs = { v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };\n  const ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n  const publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\n\nmodule.exports = {\n  create,\n  toChecksum,\n  fromPrivate,\n  sign,\n  makeSigner,\n  recover,\n  encodeSignature,\n  decodeSignature\n};"]},"metadata":{},"sourceType":"script"}