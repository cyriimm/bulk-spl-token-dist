{"ast":null,"code":"import { ledgerUSBVendorId } from \"@ledgerhq/devices\";\nconst ledgerDevices = [{\n  vendorId: ledgerUSBVendorId\n}];\nexport async function requestLedgerDevice() {\n  // $FlowFixMe\n  const device = await navigator.usb.requestDevice({\n    filters: ledgerDevices\n  });\n  return device;\n}\nexport async function getLedgerDevices() {\n  // $FlowFixMe\n  const devices = await navigator.usb.getDevices();\n  return devices.filter(d => d.vendorId === ledgerUSBVendorId);\n}\nexport async function getFirstLedgerDevice() {\n  const existingDevices = await getLedgerDevices();\n  if (existingDevices.length > 0) return existingDevices[0];\n  return requestLedgerDevice();\n}\nexport const isSupported = () => Promise.resolve(!!navigator && // $FlowFixMe\n!!navigator.usb && typeof navigator.usb.getDevices === \"function\");","map":{"version":3,"sources":["../src/webusb.js"],"names":["ledgerDevices","vendorId","ledgerUSBVendorId","device","filters","devices","navigator","d","existingDevices","getLedgerDevices","requestLedgerDevice","isSupported","Promise"],"mappings":"AACA,SAAA,iBAAA,QAAA,mBAAA;AAEA,MAAMA,aAAa,GAAG,CAAC;AAAEC,EAAAA,QAAQ,EAAEC;AAAZ,CAAD,CAAtB;AAEA,OAAO,eAAA,mBAAA,GAAyD;AAC9D;AACA,QAAMC,MAAM,GAAG,MAAM,SAAS,CAAT,GAAA,CAAA,aAAA,CAA4B;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAA5B,CAArB;AACA,SAAA,MAAA;AACD;AAED,OAAO,eAAA,gBAAA,GAAwD;AAC7D;AACA,QAAMK,OAAO,GAAG,MAAMC,SAAS,CAATA,GAAAA,CAAtB,UAAsBA,EAAtB;AACA,SAAOD,OAAO,CAAPA,MAAAA,CAAgBE,CAAD,IAAOA,CAAC,CAADA,QAAAA,KAA7B,iBAAOF,CAAP;AACD;AAED,OAAO,eAAA,oBAAA,GAA0D;AAC/D,QAAMG,eAAe,GAAG,MAAMC,gBAA9B,EAAA;AACA,MAAID,eAAe,CAAfA,MAAAA,GAAJ,CAAA,EAAgC,OAAOA,eAAe,CAAtB,CAAsB,CAAtB;AAChC,SAAOE,mBAAP,EAAA;AACD;AAED,OAAO,MAAMC,WAAW,GAAG,MACzBC,OAAO,CAAPA,OAAAA,CACE,CAAC,CAAD,SAAA,IACE;AACA,CAAC,CAACN,SAAS,CAFb,GAAA,IAGE,OAAOA,SAAS,CAATA,GAAAA,CAAP,UAAA,KALC,UACLM,CADK","sourcesContent":["// @flow\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\n\nconst ledgerDevices = [{ vendorId: ledgerUSBVendorId }];\n\nexport async function requestLedgerDevice(): Promise<USBDevice> {\n  // $FlowFixMe\n  const device = await navigator.usb.requestDevice({ filters: ledgerDevices });\n  return device;\n}\n\nexport async function getLedgerDevices(): Promise<USBDevice[]> {\n  // $FlowFixMe\n  const devices = await navigator.usb.getDevices();\n  return devices.filter((d) => d.vendorId === ledgerUSBVendorId);\n}\n\nexport async function getFirstLedgerDevice(): Promise<USBDevice> {\n  const existingDevices = await getLedgerDevices();\n  if (existingDevices.length > 0) return existingDevices[0];\n  return requestLedgerDevice();\n}\n\nexport const isSupported = (): Promise<boolean> =>\n  Promise.resolve(\n    !!navigator &&\n      // $FlowFixMe\n      !!navigator.usb &&\n      typeof navigator.usb.getDevices === \"function\"\n  );\n"]},"metadata":{},"sourceType":"module"}