{"ast":null,"code":"var _jsxFileName = \"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/CopyableDisplay.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { TextField } from '@material-ui/core';\nimport CopyIcon from 'mdi-material-ui/ContentCopy';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSnackbar } from 'notistack';\nimport QrcodeIcon from 'mdi-material-ui/Qrcode';\nimport QRCode from 'qrcode.react';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    alignItems: 'baseline'\n  }\n}));\nexport default function CopyableDisplay({\n  value,\n  label,\n  autoFocus,\n  qrCode,\n  helperText\n}) {\n  _s();\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const textareaRef = useRef();\n  const classes = useStyles();\n\n  const copyLink = () => {\n    let textArea = textareaRef.current;\n\n    if (textArea) {\n      textArea.select();\n      document.execCommand('copy');\n      enqueueSnackbar(`Copied ${label}`, {\n        variant: 'info',\n        autoHideDuration: 2500\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      inputRef: ref => textareaRef.current = ref,\n      multiline: true,\n      autoFocus: autoFocus,\n      value: value,\n      readOnly: true,\n      onFocus: e => e.currentTarget.select(),\n      className: classes.textArea,\n      fullWidth: true,\n      helperText: helperText,\n      label: label,\n      spellCheck: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: copyLink,\n      children: /*#__PURE__*/_jsxDEV(CopyIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), qrCode ? /*#__PURE__*/_jsxDEV(Qrcode, {\n      value: qrCode === true ? value : qrCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CopyableDisplay, \"aonyNSw4JQ7Ga5P7uiGdko7YopY=\", false, function () {\n  return [useSnackbar, useStyles];\n});\n\n_c = CopyableDisplay;\nconst useQrCodeStyles = makeStyles(theme => ({\n  qrcodeContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2)\n  }\n}));\n\nfunction Qrcode({\n  value\n}) {\n  _s2();\n\n  const [showQrcode, setShowQrcode] = React.useState(false);\n  const classes = useQrCodeStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: () => setShowQrcode(true),\n      children: /*#__PURE__*/_jsxDEV(QrcodeIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showQrcode,\n      onClose: () => setShowQrcode(false),\n      children: /*#__PURE__*/_jsxDEV(DialogContent, {\n        className: classes.qrcodeContainer,\n        children: /*#__PURE__*/_jsxDEV(QRCode, {\n          value: value,\n          size: 256,\n          includeMargin: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(Qrcode, \"A6ZcyQeGKyTZymRP9IgMvf6p/BI=\", false, function () {\n  return [useQrCodeStyles];\n});\n\n_c2 = Qrcode;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CopyableDisplay\");\n$RefreshReg$(_c2, \"Qrcode\");","map":{"version":3,"sources":["/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/CopyableDisplay.js"],"names":["React","useRef","TextField","CopyIcon","makeStyles","useSnackbar","QrcodeIcon","QRCode","DialogContent","IconButton","Dialog","useStyles","theme","root","display","marginTop","spacing","marginBottom","alignItems","CopyableDisplay","value","label","autoFocus","qrCode","helperText","enqueueSnackbar","textareaRef","classes","copyLink","textArea","current","select","document","execCommand","variant","autoHideDuration","ref","e","currentTarget","useQrCodeStyles","qrcodeContainer","flexDirection","Qrcode","showQrcode","setShowQrcode","useState"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport { TextField } from '@material-ui/core';\nimport CopyIcon from 'mdi-material-ui/ContentCopy';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSnackbar } from 'notistack';\nimport QrcodeIcon from 'mdi-material-ui/Qrcode';\nimport QRCode from 'qrcode.react';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    alignItems: 'baseline',\n  },\n}));\n\nexport default function CopyableDisplay({\n  value,\n  label,\n  autoFocus,\n  qrCode,\n  helperText,\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n  const textareaRef = useRef();\n  const classes = useStyles();\n  const copyLink = () => {\n    let textArea = textareaRef.current;\n    if (textArea) {\n      textArea.select();\n      document.execCommand('copy');\n      enqueueSnackbar(`Copied ${label}`, {\n        variant: 'info',\n        autoHideDuration: 2500,\n      });\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        inputRef={(ref) => (textareaRef.current = ref)}\n        multiline\n        autoFocus={autoFocus}\n        value={value}\n        readOnly\n        onFocus={(e) => e.currentTarget.select()}\n        className={classes.textArea}\n        fullWidth\n        helperText={helperText}\n        label={label}\n        spellCheck={false}\n      />\n      <IconButton onClick={copyLink}>\n        <CopyIcon />\n      </IconButton>\n      {qrCode ? <Qrcode value={qrCode === true ? value : qrCode} /> : null}\n    </div>\n  );\n}\n\nconst useQrCodeStyles = makeStyles((theme) => ({\n  qrcodeContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction Qrcode({ value }) {\n  const [showQrcode, setShowQrcode] = React.useState(false);\n  const classes = useQrCodeStyles();\n\n  return (\n    <>\n      <IconButton onClick={() => setShowQrcode(true)}>\n        <QrcodeIcon />\n      </IconButton>\n      <Dialog open={showQrcode} onClose={() => setShowQrcode(false)}>\n        <DialogContent className={classes.qrcodeContainer}>\n          <QRCode value={value} size={256} includeMargin />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}