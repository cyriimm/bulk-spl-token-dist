[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/account.js",
    "content": "// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/account.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Account",
    "memberof": "src/account.js",
    "static": true,
    "longname": "src/account.js~Account",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Account}",
    "description": "An account key pair (public and secret keys).",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "_keypair",
    "memberof": "src/account.js~Account",
    "static": false,
    "longname": "src/account.js~Account#_keypair",
    "access": "private",
    "description": "",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "KeyPair"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/account.js~Account",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/account.js~Account#constructor",
    "access": "public",
    "description": "Create a new Account object\n\nIf the secretKey parameter is not provided a new key pair is randomly\ncreated for the account ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer",
          "Uint8Array",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "secretKey",
        "description": "Secret key for the account"
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "get",
    "name": "publicKey",
    "memberof": "src/account.js~Account",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/account.js~Account#publicKey",
    "access": "public",
    "description": "The public key for this account ",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "get",
    "name": "secretKey",
    "memberof": "src/account.js~Account",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/account.js~Account#secretKey",
    "access": "public",
    "description": "The **unencrypted** secret key for this account ",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/agent-manager.js",
    "content": "// @flow\n\nimport http from 'http';\nimport https from 'https';\n\nexport const DESTROY_TIMEOUT_MS = 5000;\n\nexport class AgentManager {\n  _agent: http.Agent | https.Agent;\n  _activeRequests = 0;\n  _destroyTimeout: TimeoutID | null = null;\n  _useHttps: boolean;\n\n  static _newAgent(useHttps: boolean): http.Agent | https.Agent {\n    const options = {keepAlive: true, maxSockets: 25};\n    if (useHttps) {\n      return new https.Agent(options);\n    } else {\n      return new http.Agent(options);\n    }\n  }\n\n  constructor(useHttps?: boolean) {\n    this._useHttps = useHttps === true;\n    this._agent = AgentManager._newAgent(this._useHttps);\n  }\n\n  requestStart(): http.Agent | https.Agent {\n    // $FlowExpectedError - Don't manage agents in the browser\n    if (process.browser) return;\n\n    this._activeRequests++;\n    clearTimeout(this._destroyTimeout);\n    this._destroyTimeout = null;\n    return this._agent;\n  }\n\n  requestEnd() {\n    // $FlowExpectedError - Don't manage agents in the browser\n    if (process.browser) return;\n\n    this._activeRequests--;\n    if (this._activeRequests === 0 && this._destroyTimeout === null) {\n      this._destroyTimeout = setTimeout(() => {\n        this._agent.destroy();\n        this._agent = AgentManager._newAgent(this._useHttps);\n      }, DESTROY_TIMEOUT_MS);\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/agent-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "DESTROY_TIMEOUT_MS",
    "memberof": "src/agent-manager.js",
    "static": true,
    "longname": "src/agent-manager.js~DESTROY_TIMEOUT_MS",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{DESTROY_TIMEOUT_MS}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "class",
    "name": "AgentManager",
    "memberof": "src/agent-manager.js",
    "static": true,
    "longname": "src/agent-manager.js~AgentManager",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{AgentManager}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "_agent",
    "memberof": "src/agent-manager.js~AgentManager",
    "static": false,
    "longname": "src/agent-manager.js~AgentManager#_agent",
    "access": "private",
    "description": "",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "http.Agent",
        "https.Agent"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_activeRequests",
    "memberof": "src/agent-manager.js~AgentManager",
    "static": false,
    "longname": "src/agent-manager.js~AgentManager#_activeRequests",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_destroyTimeout",
    "memberof": "src/agent-manager.js~AgentManager",
    "static": false,
    "longname": "src/agent-manager.js~AgentManager#_destroyTimeout",
    "access": "private",
    "description": "",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "TimeoutID",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_useHttps",
    "memberof": "src/agent-manager.js~AgentManager",
    "static": false,
    "longname": "src/agent-manager.js~AgentManager#_useHttps",
    "access": "private",
    "description": "",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "_newAgent",
    "memberof": "src/agent-manager.js~AgentManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/agent-manager.js~AgentManager._newAgent",
    "access": "private",
    "description": " ",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useHttps",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "http.Agent",
        "https.Agent"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/agent-manager.js~AgentManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/agent-manager.js~AgentManager#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useHttps",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "requestStart",
    "memberof": "src/agent-manager.js~AgentManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/agent-manager.js~AgentManager#requestStart",
    "access": "public",
    "description": " ",
    "lineNumber": 28,
    "return": {
      "nullable": null,
      "types": [
        "http.Agent",
        "https.Agent"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "requestEnd",
    "memberof": "src/agent-manager.js~AgentManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/agent-manager.js~AgentManager#requestEnd",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "params": [],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/blockhash.js",
    "content": "// @flow\n\n/**\n * @typedef {string} Blockhash\n */\nexport type Blockhash = string;\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/blockhash.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "typedef",
    "name": "Blockhash",
    "memberof": "src/blockhash.js",
    "static": true,
    "longname": "src/blockhash.js~Blockhash",
    "access": "public",
    "description": "",
    "lineNumber": 6,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "Blockhash"
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/bpf-loader-deprecated.js",
    "content": "// @flow\n\nimport {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/bpf-loader-deprecated.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "BPF_LOADER_DEPRECATED_PROGRAM_ID",
    "memberof": "src/bpf-loader-deprecated.js",
    "static": true,
    "longname": "src/bpf-loader-deprecated.js~BPF_LOADER_DEPRECATED_PROGRAM_ID",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{BPF_LOADER_DEPRECATED_PROGRAM_ID}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/bpf-loader.js",
    "content": "// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/bpf-loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "BPF_LOADER_PROGRAM_ID",
    "memberof": "src/bpf-loader.js",
    "static": true,
    "longname": "src/bpf-loader.js~BPF_LOADER_PROGRAM_ID",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{BPF_LOADER_PROGRAM_ID}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "class",
    "name": "BpfLoader",
    "memberof": "src/bpf-loader.js",
    "static": true,
    "longname": "src/bpf-loader.js~BpfLoader",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{BpfLoader}",
    "description": "Factory class for transactions to interact with a program loader",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "getMinNumSignatures",
    "memberof": "src/bpf-loader.js~BpfLoader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bpf-loader.js~BpfLoader.getMinNumSignatures",
    "access": "public",
    "description": "Minimum number of signatures required to load a program not including\nretries\n\nCan be used to calculate transaction fees  ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dataLength",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "load",
    "memberof": "src/bpf-loader.js~BpfLoader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bpf-loader.js~BpfLoader.load",
    "access": "public",
    "description": "Load a BPF program  ",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": "The connection to use"
      },
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "payer",
        "description": "Account that will pay program loading fees"
      },
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": "Account to load the program into"
      },
      {
        "nullable": null,
        "types": [
          "Buffer",
          "Uint8Array",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "elf",
        "description": "The entire ELF containing the BPF program"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "loaderProgramId",
        "description": "The program id of the BPF loader to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "true if program was loaded successfully, false if program was already loaded"
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/connection.js",
    "content": "// @flow\n\nimport assert from 'assert';\nimport bs58 from 'bs58';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\nimport {AgentManager} from './agent-manager';\n\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype TokenAccountsFilter =\n  | {|\n      mint: PublicKey,\n    |}\n  | {|\n      programId: PublicKey,\n    |};\n\n/**\n * Extra contextual information for RPC responses\n *\n * @typedef {Object} Context\n * @property {number} slot\n */\ntype Context = {\n  slot: number,\n};\n\n/**\n * Options for sending transactions\n *\n * @typedef {Object} SendOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type SendOptions = {\n  skipPreflight?: boolean,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for confirming transactions\n *\n * @typedef {Object} ConfirmOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} commitment desired commitment level\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type ConfirmOptions = {\n  skipPreflight?: boolean,\n  commitment?: Commitment,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n *\n * @typedef {Object} ConfirmedSignaturesForAddress2Options\n * @property {TransactionSignature | undefined} before start searching backwards from this transaction signature.\n *               If not provided the search starts from the highest max confirmed block.\n * @property {number | undefined} limit maximum transaction signatures to return (between 1 and 1,000, default: 1,000).\n *\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  before?: TransactionSignature,\n  limit?: number,\n};\n\n/**\n * RPC Response with extra contextual information\n *\n * @typedef {Object} RpcResponseAndContext\n * @property {Context} context\n * @property {T} value response\n */\ntype RpcResponseAndContext<T> = {\n  context: Context,\n  value: T,\n};\n\n/**\n * @private\n */\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return jsonRpcResult({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nfunction notificationResultAndContext(resultDescription: any) {\n  return struct({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'max':    Query the most recent block which has been finalized by the cluster\n *   'recent': Query the most recent block which has reached 1 confirmation by the connected node\n *   'root':   Query the most recent block which has been rooted by the connected node\n *   'single': Query the most recent block which has reached 1 confirmation by the cluster\n *   'singleGossip': Query the most recent block which has reached 1 confirmation according to votes seen in gossip\n * </pre>\n *\n * @typedef {'max' | 'recent' | 'root' | 'single' | 'singleGossip'} Commitment\n */\nexport type Commitment = 'max' | 'recent' | 'root' | 'single' | 'singleGossip';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n *\n * @typedef {'circulating' | 'nonCirculating'} LargestAccountsFilter\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n *\n * @typedef {Object} GetLargestAccountsConfig\n * @property {Commitment|undefined} commitment The level of commitment desired\n * @property {LargestAccountsFilter|undefined} filter Filter largest accounts by whether they are part of the circulating supply\n */\ntype GetLargestAccountsConfig = {\n  commitment: ?Commitment,\n  filter: ?LargestAccountsFilter,\n};\n\n/**\n * Configuration object for changing query behavior\n *\n * @typedef {Object} SignatureStatusConfig\n * @property {boolean} searchTransactionHistory enable searching status history, not needed for recent transactions\n */\nexport type SignatureStatusConfig = {\n  searchTransactionHistory: boolean,\n};\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string|null} gossip Gossip network address for the node\n * @property {string|null} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n * @property {string|null} version Software version of the node (null if not available)\n */\ntype ContactInfo = {\n  pubkey: string,\n  gossip: string | null,\n  tpu: string | null,\n  rpc: string | null,\n  version: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {number} activatedStake The stake, in lamports, delegated to this vote account and activated\n * @property {boolean} epochVoteAccount Whether the vote account is staked for this epoch\n * @property {Array<Array<number>>} epochCredits Recent epoch voting credit history for this voter\n * @property {number} commission A percentage (0-100) of rewards payout owed to the voter\n * @property {number} lastVote Most recent slot voted on by this vote account\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  activatedStake: number,\n  epochVoteAccount: boolean,\n  epochCredits: Array<[number, number, number]>,\n  commission: number,\n  lastVote: number,\n};\n\n/**\n * A collection of cluster vote accounts\n *\n * @typedef {Object} VoteAccountStatus\n * @property {Array<VoteAccountInfo>} current Active vote accounts\n * @property {Array<VoteAccountInfo>} delinquent Inactive vote accounts\n */\ntype VoteAccountStatus = {\n  current: Array<VoteAccountInfo>,\n  delinquent: Array<VoteAccountInfo>,\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n *\n * @typedef {Object} InflationGovernor\n * @property {number} foundation\n * @property {number} foundation_term\n * @property {number} initial\n * @property {number} taper\n * @property {number} terminal\n */\ntype InflationGovernor = {\n  foundation: number,\n  foundationTerm: number,\n  initial: number,\n  taper: number,\n  terminal: number,\n};\n\nconst GetInflationGovernorResult = struct({\n  foundation: 'number',\n  foundationTerm: 'number',\n  initial: 'number',\n  taper: 'number',\n  terminal: 'number',\n});\n\n/**\n * Information about the current epoch\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n * @property {number} blockHeight\n * @property {number} transactionCount\n */\ntype EpochInfo = {\n  epoch: number,\n  slotIndex: number,\n  slotsInEpoch: number,\n  absoluteSlot: number,\n  blockHeight: number | null,\n  transactionCount: number | null,\n};\n\nconst GetEpochInfoResult = struct({\n  epoch: 'number',\n  slotIndex: 'number',\n  slotsInEpoch: 'number',\n  absoluteSlot: 'number',\n  blockHeight: 'number?',\n  transactionCount: 'number?',\n});\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slotsPerEpoch The maximum number of slots in each epoch\n * @property {number} leaderScheduleSlotOffset The number of slots before beginning of an epoch to calculate a leader schedule for that epoch\n * @property {boolean} warmup Indicates whether epochs start short and grow\n * @property {number} firstNormalEpoch The first epoch with `slotsPerEpoch` slots\n * @property {number} firstNormalSlot The first slot of `firstNormalEpoch`\n */\ntype EpochSchedule = {\n  slotsPerEpoch: number,\n  leaderScheduleSlotOffset: number,\n  warmup: boolean,\n  firstNormalEpoch: number,\n  firstNormalSlot: number,\n};\n\nconst GetEpochScheduleResult = struct({\n  slotsPerEpoch: 'number',\n  leaderScheduleSlotOffset: 'number',\n  warmup: 'boolean',\n  firstNormalEpoch: 'number',\n  firstNormalSlot: 'number',\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n *\n * @typedef {Object} LeaderSchedule\n */\ntype LeaderSchedule = {\n  [address: string]: number[],\n};\n\nconst GetLeaderScheduleResult = struct.record([\n  'string',\n  'any', // validating struct.array(['number']) is extremely slow\n]);\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = struct.union(['null', 'object']);\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = struct({err: TransactionErrorResult});\n\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\nconst Version = struct.pick({\n  'solana-core': 'string',\n  'feature-set': 'number?',\n});\n\ntype SimulatedTransactionResponse = {\n  err: TransactionError | string | null,\n  logs: Array<string> | null,\n};\n\nconst SimulatedTransactionResponseValidator = jsonRpcResultAndContext(\n  struct.pick({\n    err: struct.union(['null', 'object', 'string']),\n    logs: struct.union(['null', struct.array(['string'])]),\n  }),\n);\n\ntype ParsedInnerInstruction = {\n  index: number,\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n};\n\ntype TokenBalance = {\n  accountIndex: number,\n  mint: string,\n  uiTokenAmount: TokenAmount,\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<ParsedInnerInstruction>} innerInstructions An array of cross program invoked parsed instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {Array<TokenBalance>} preTokenBalances The token balances of the transaction accounts before processing\n * @property {Array<TokenBalance>} postTokenBalances The token balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ParsedConfirmedTransactionMeta = {\n  fee: number,\n  innerInstructions?: ParsedInnerInstruction[],\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  logMessages?: Array<string>,\n  preTokenBalances?: Array<TokenBalance>,\n  postTokenBalances?: Array<TokenBalance>,\n  err: TransactionError | null,\n};\n\ntype CompiledInnerInstruction = {\n  index: number,\n  instructions: CompiledInstruction[],\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<CompiledInnerInstruction>} innerInstructions An array of cross program invoked instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {Array<TokenBalance>} preTokenBalances The token balances of the transaction accounts before processing\n * @property {Array<TokenBalance>} postTokenBalances The token balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ConfirmedTransactionMeta = {\n  fee: number,\n  innerInstructions?: CompiledInnerInstruction[],\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  logMessages?: Array<string>,\n  preTokenBalances?: Array<TokenBalance>,\n  postTokenBalances?: Array<TokenBalance>,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {Transaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n * @property {number|null|undefined} blockTime The unix timestamp of when the transaction was processed\n */\ntype ConfirmedTransaction = {\n  slot: number,\n  transaction: Transaction,\n  meta: ConfirmedTransactionMeta | null,\n  blockTime?: number | null,\n};\n\n/**\n * A partially decoded transaction instruction\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {PublicKey} accounts Indicates if the account signed the transaction\n * @property {string} data Raw base-58 instruction data\n */\ntype PartiallyDecodedInstruction = {|\n  programId: PublicKey,\n  accounts: Array<PublicKey>,\n  data: string,\n|};\n\n/**\n * A parsed transaction message account\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {boolean} signer Indicates if the account signed the transaction\n * @property {boolean} writable Indicates if the account is writable for this transaction\n */\ntype ParsedMessageAccount = {\n  pubkey: PublicKey,\n  signer: boolean,\n  writable: boolean,\n};\n\n/**\n * A parsed transaction instruction\n *\n * @typedef {Object} ParsedInstruction\n * @property {string} program Name of the program for this instruction\n * @property {PublicKey} programId ID of the program for this instruction\n * @property {any} parsed Parsed instruction info\n */\ntype ParsedInstruction = {|\n  program: string,\n  programId: PublicKey,\n  parsed: any,\n|};\n\n/**\n * A parsed transaction message\n *\n * @typedef {Object} ParsedMessage\n * @property {Array<ParsedMessageAccount>} accountKeys Accounts used in the instructions\n * @property {Array<ParsedInstruction | PartiallyDecodedInstruction>} instructions The atomically executed instructions for the transaction\n * @property {string} recentBlockhash Recent blockhash\n */\ntype ParsedMessage = {\n  accountKeys: ParsedMessageAccount[],\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n  recentBlockhash: string,\n};\n\n/**\n * A parsed transaction\n *\n * @typedef {Object} ParsedTransaction\n * @property {Array<string>} signatures Signatures for the transaction\n * @property {ParsedMessage} message Message of the transaction\n */\ntype ParsedTransaction = {\n  signatures: Array<string>,\n  message: ParsedMessage,\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {ParsedTransaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n * @property {number|null|undefined} blockTime The unix timestamp of when the transaction was processed\n */\ntype ParsedConfirmedTransaction = {\n  slot: number,\n  transaction: ParsedTransaction,\n  meta: ParsedConfirmedTransactionMeta | null,\n  blockTime?: number | null,\n};\n\n/**\n * A ConfirmedBlock on the ledger\n *\n * @typedef {Object} ConfirmedBlock\n * @property {Blockhash} blockhash Blockhash of this block\n * @property {Blockhash} previousBlockhash Blockhash of this block's parent\n * @property {number} parentSlot Slot index of this block's parent\n * @property {Array<object>} transactions Vector of transactions and status metas\n * @property {Array<object>} rewards Vector of block rewards\n */\ntype ConfirmedBlock = {\n  blockhash: Blockhash,\n  previousBlockhash: Blockhash,\n  parentSlot: number,\n  transactions: Array<{\n    transaction: Transaction,\n    meta: ConfirmedTransactionMeta | null,\n  }>,\n  rewards: Array<{\n    pubkey: string,\n    lamports: number,\n    postBalance: number | null,\n    rewardType: string | null,\n  }>,\n};\n\n/**\n * A performance sample\n *\n * @typedef {Object} PerfSample\n * @property {number} slot Slot number of sample\n * @property {number} numTransactions Number of transactions in a sample window\n * @property {number} numSlots Number of slots in a sample window\n * @property {number} samplePeriodSecs Sample window in seconds\n */\ntype PerfSample = {\n  slot: number,\n  numTransactions: number,\n  numSlots: number,\n  samplePeriodSecs: number,\n};\n\nfunction createRpcRequest(url: string, useHttps: boolean): RpcRequest {\n  const agentManager = new AgentManager(useHttps);\n\n  const server = jayson(async (request, callback) => {\n    const agent = agentManager.requestStart();\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res = {};\n      let waitTime = 500;\n      for (;;) {\n        res = await fetch(url, options);\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager.requestEnd();\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetInflationGovernorResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochScheduleResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\nconst GetBalanceAndContextRpcResult = jsonRpcResultAndContext('number?');\n\n/**\n * Expected JSON RPC response for the \"getBlockTime\" message\n */\nconst GetBlockTimeRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: struct.union(['null', 'number', 'undefined']),\n});\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number',\n});\n\n/**\n * Supply\n *\n * @typedef {Object} Supply\n * @property {number} total Total supply in lamports\n * @property {number} circulating Circulating supply in lamports\n * @property {number} nonCirculating Non-circulating supply in lamports\n * @property {Array<PublicKey>} nonCirculatingAccounts List of non-circulating account addresses\n */\ntype Supply = {\n  total: number,\n  circulating: number,\n  nonCirculating: number,\n  nonCirculatingAccounts: Array<PublicKey>,\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  struct({\n    total: 'number',\n    circulating: 'number',\n    nonCirculating: 'number',\n    nonCirculatingAccounts: struct.array(['string']),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n *\n * @typedef {Object} TokenAmount\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAmount = {\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = struct.object({\n  amount: 'string',\n  uiAmount: 'number',\n  decimals: 'number',\n});\n\n/**\n * Token address and balance.\n *\n * @typedef {Object} TokenAccountBalancePair\n * @property {PublicKey} address Address of the token account\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAccountBalancePair = {\n  address: PublicKey,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.pick({\n      address: 'string',\n      amount: 'string',\n      uiAmount: 'number',\n      decimals: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountBalance\" message\n */\nconst GetTokenAccountBalance = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenSupply\" message\n */\nconst GetTokenSupplyRpcResult = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: ['string', struct.literal('base64')],\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: struct.pick({\n          program: 'string',\n          parsed: 'any',\n          space: 'number',\n        }),\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Pair of an account address and its balance\n *\n * @typedef {Object} AccountBalancePair\n * @property {PublicKey} address\n * @property {number} lamports\n */\ntype AccountBalancePair = {\n  address: PublicKey,\n  lamports: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct({\n      lamports: 'number',\n      address: 'string',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVersion\" message\n */\nconst GetVersionRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: Version,\n});\n\n/**\n * @private\n */\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst ParsedAccountInfoResult = struct.object({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: struct.union([\n    ['string', struct.literal('base64')],\n    struct.pick({\n      program: 'string',\n      parsed: 'any',\n      space: 'number',\n    }),\n  ]),\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst StakeActivationResult = struct.object({\n  state: struct.union([\n    struct.literal('active'),\n    struct.literal('inactive'),\n    struct.literal('activating'),\n    struct.literal('deactivating'),\n  ]),\n  active: 'number',\n  inactive: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\nconst GetAccountInfoAndContextRpcResult = jsonRpcResultAndContext(\n  struct.union(['null', AccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message with jsonParsed param\n */\nconst GetParsedAccountInfoResult = jsonRpcResultAndContext(\n  struct.union(['null', ParsedAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getStakeActivation\" message with jsonParsed param\n */\nconst GetStakeActivationResult = jsonRpcResult(StakeActivationResult);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress\" message\n */\nconst GetConfirmedSignaturesForAddressRpcResult = jsonRpcResult(\n  struct.array(['string']),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      signature: 'string',\n      slot: 'number',\n      err: TransactionErrorResult,\n      memo: struct.union(['null', 'string']),\n      blockTime: struct.union(['undefined', 'null', 'number']),\n    }),\n  ]),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @private\n */\nconst ProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: AccountInfoResult,\n});\n\n/**\n * @private\n */\nconst ParsedProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: ParsedAccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @private\n */\nconst SlotInfoResult = struct({\n  parent: 'number',\n  slot: 'number',\n  root: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = struct({\n  subscription: 'number',\n  result: SlotInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(SignatureStatusResult),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = struct({\n  subscription: 'number',\n  result: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetParsedProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ParsedProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getSlot\" message\n */\nconst GetSlot = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getSlotLeader\" message\n */\nconst GetSlotLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"getClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      pubkey: 'string',\n      gossip: struct.union(['null', 'string']),\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n      version: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  struct({\n    current: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n    delinquent: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.union([\n      'null',\n      struct.pick({\n        slot: 'number',\n        confirmations: struct.union(['number', 'null']),\n        err: TransactionErrorResult,\n        confirmationStatus: 'string?',\n      }),\n    ]),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\nconst GetTransactionCountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\nconst GetTotalSupplyRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult('number');\n\n/**\n * @private\n */\nconst ConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array(['string']),\n    header: struct({\n      numRequiredSignatures: 'number',\n      numReadonlySignedAccounts: 'number',\n      numReadonlyUnsignedAccounts: 'number',\n    }),\n    instructions: struct.array([\n      struct({\n        accounts: struct.array(['number']),\n        data: 'string',\n        programIdIndex: 'number',\n      }),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ParsedConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array([\n      struct({\n        pubkey: 'string',\n        signer: 'boolean',\n        writable: 'boolean',\n      }),\n    ]),\n    instructions: struct.array([\n      struct.union([\n        struct({\n          accounts: struct.array(['string']),\n          data: 'string',\n          programId: 'string',\n        }),\n        struct({\n          parsed: 'any',\n          program: 'string',\n          programId: 'string',\n        }),\n      ]),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ConfirmedTransactionMetaResult = struct.union([\n  'null',\n  struct.pick({\n    err: TransactionErrorResult,\n    fee: 'number',\n    innerInstructions: struct.union([\n      struct.array([\n        struct({\n          index: 'number',\n          instructions: struct.array([\n            struct({\n              accounts: struct.array(['number']),\n              data: 'string',\n              programIdIndex: 'number',\n            }),\n          ]),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    preBalances: struct.array(['number']),\n    postBalances: struct.array(['number']),\n    logMessages: struct.union([struct.array(['string']), 'null', 'undefined']),\n    preTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    postTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n  }),\n]);\n/**\n * @private\n */\nconst ParsedConfirmedTransactionMetaResult = struct.union([\n  'null',\n  struct.pick({\n    err: TransactionErrorResult,\n    fee: 'number',\n    innerInstructions: struct.union([\n      struct.array([\n        struct({\n          index: 'number',\n          instructions: struct.array([\n            struct.union([\n              struct({\n                accounts: struct.array(['string']),\n                data: 'string',\n                programId: 'string',\n              }),\n              struct({\n                parsed: 'any',\n                program: 'string',\n                programId: 'string',\n              }),\n            ]),\n          ]),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    preBalances: struct.array(['number']),\n    postBalances: struct.array(['number']),\n    logMessages: struct.union([struct.array(['string']), 'null', 'undefined']),\n    preTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    postTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nexport const GetConfirmedBlockRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      blockhash: 'string',\n      previousBlockhash: 'string',\n      parentSlot: 'number',\n      transactions: struct.array([\n        struct({\n          transaction: ConfirmedTransactionResult,\n          meta: ConfirmedTransactionMetaResult,\n        }),\n      ]),\n      rewards: struct.union([\n        'undefined',\n        struct.array([\n          struct({\n            pubkey: 'string',\n            lamports: 'number',\n            postBalance: struct.union(['number', 'undefined']),\n            rewardType: struct.union(['string', 'undefined']),\n          }),\n        ]),\n      ]),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ConfirmedTransactionResult,\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: struct.union(['number', 'null', 'undefined']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ParsedConfirmedTransactionResult,\n      meta: ParsedConfirmedTransactionMetaResult,\n      blockTime: struct.union(['number', 'null', 'undefined']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  struct({\n    blockhash: 'string',\n    feeCalculator: struct({\n      lamportsPerSignature: 'number',\n    }),\n  }),\n);\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      slot: 'number',\n      numTransactions: 'number',\n      numSlots: 'number',\n      samplePeriodSecs: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  struct.union([\n    'null',\n    struct({\n      feeCalculator: struct({\n        lamportsPerSignature: 'number',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult('string');\n\n/**\n * Information about the latest slot being processed by a node\n *\n * @typedef {Object} SlotInfo\n * @property {number} slot Currently processing slot\n * @property {number} parent Parent of the current slot\n * @property {number} root The root block of the current slot's fork\n */\ntype SlotInfo = {\n  slot: number,\n  parent: number,\n  root: number,\n};\n\n/**\n * Parsed account data\n *\n * @typedef {Object} ParsedAccountData\n * @property {string} program Name of the program that owns this account\n * @property {any} parsed Parsed account data\n * @property {number} space Space used by account data\n */\ntype ParsedAccountData = {\n  program: string,\n  parsed: any,\n  space: number,\n};\n\n/**\n * Stake Activation data\n *\n * @typedef {Object} StakeActivationData\n * @property {string} state: <string - the stake account's activation state, one of: active, inactive, activating, deactivating\n * @property {number} active: stake active during the epoch\n * @property {number} inactive: stake inactive during the epoch\n */\ntype StakeActivationData = {\n  state: 'active' | 'inactive' | 'activating' | 'deactivating',\n  active: number,\n  inactive: number,\n};\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {T} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountInfo<T> = {\n  executable: boolean,\n  owner: PublicKey,\n  lamports: number,\n  data: T,\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo<Buffer>} accountInfo\n */\ntype KeyedAccountInfo = {\n  accountId: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string, // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @private\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature, // TransactionSignature as a base 58 string\n  callback: SignatureResultCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @private\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Signature result\n *\n * @typedef {Object} SignatureResult\n */\nexport type SignatureResult = {|\n  err: TransactionError | null,\n|};\n\n/**\n * Transaction error\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {};\n\n/**\n * Signature status\n *\n * @typedef {Object} SignatureStatus\n * @property {number} slot when the transaction was processed\n * @property {number | null} confirmations the number of blocks that have been confirmed and voted on in the fork containing `slot` (TODO)\n * @property {TransactionError | null} err error, if any\n * @property {string | null} confirmationStatus the transaction's cluster confirmation status, if data available. Possible non-null responses: `processed`, `confirmed`, `finalized`\n */\nexport type SignatureStatus = {\n  slot: number,\n  confirmations: number | null,\n  err: TransactionError | null,\n  confirmationStatus: string | null,\n};\n\n/**\n * A confirmed signature with its status\n *\n * @typedef {Object} ConfirmedSignatureInfo\n * @property {string} signature the transaction signature\n * @property {number} slot when the transaction was processed\n * @property {TransactionError | null} err error, if any\n * @property {string | null} memo memo associated with the transaction, if any\n * @property {number | null | undefined} blockTime The unix timestamp of when the transaction was processed\n */\nexport type ConfirmedSignatureInfo = {\n  signature: string,\n  slot: number,\n  err: TransactionError | null,\n  memo: string | null,\n  blockTime?: number | null,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcEndpoint: string;\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n  _rpcWebSocketHeartbeat: IntervalID | null = null;\n  _rpcWebSocketIdleTimeout: TimeoutID | null = null;\n\n  _commitment: ?Commitment;\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    lastFetch: Date,\n    simulatedSignatures: Array<string>,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _pollingBlockhash: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _programAccountChangeSubscriptions: {\n    [number]: ProgramAccountSubscriptionInfo,\n  } = {};\n  _programAccountChangeSubscriptionCounter: number = 0;\n  _slotSubscriptions: {\n    [number]: SlotSubscriptionInfo,\n  } = {};\n  _slotSubscriptionCounter: number = 0;\n  _signatureSubscriptions: {\n    [number]: SignatureSubscriptionInfo,\n  } = {};\n  _signatureSubscriptionCounter: number = 0;\n  _rootSubscriptions: {\n    [number]: RootSubscriptionInfo,\n  } = {};\n  _rootSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  constructor(endpoint: string, commitment: ?Commitment) {\n    this._rpcEndpoint = endpoint;\n\n    let url = urlParse(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    this._rpcRequest = createRpcRequest(url.href, useHttps);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: new Date(0),\n      transactionSignatures: [],\n      simulatedSignatures: [],\n    };\n\n    url.protocol = useHttps ? 'wss:' : 'ws:';\n    url.host = '';\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): ?Commitment {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = GetBalanceAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = GetBlockTimeRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = GetSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value.nonCirculatingAccounts = res.result.value.nonCirculatingAccounts.map(\n      account => new PublicKey(account),\n    );\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = GetTokenSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = GetTokenAccountBalance(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => {\n        assert(result.account.data[1] === 'base64');\n        return {\n          pubkey: new PublicKey(result.pubkey),\n          account: {\n            executable: result.account.executable,\n            owner: new PublicKey(result.account.owner),\n            lamports: result.account.lamports,\n            data: Buffer.from(result.account.data[0], 'base64'),\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetParsedTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => ({\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: result.account.data,\n        },\n      })),\n    };\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config: ?GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = GetLargestAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(({address, lamports}) => ({\n      address: new PublicKey(address),\n      lamports,\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = GetTokenLargestAccountsResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(pair => ({\n      ...pair,\n      address: new PublicKey(pair.address),\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetAccountInfoAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data} = res.result.value;\n      assert(data[1] === 'base64');\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>,\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetParsedAccountInfoResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data: resultData} = res.result.value;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data,\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    return await this.getAccountInfoAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n    epoch: ?number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = GetStakeActivationResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    const {state, active, inactive} = res.result;\n    return {state, active, inactive};\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>> {\n    const args = this._buildArgs([programId.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      assert(result.account.data[1] === 'base64');\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: Buffer.from(result.account.data[0], 'base64'),\n        },\n      };\n    });\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey,\n      account: AccountInfo<Buffer | ParsedAccountData>,\n    }>,\n  > {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetParsedProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      const resultData = result.account.data;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data,\n        },\n      };\n    });\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result, context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve();\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'recent':\n      case 'single':\n      case 'singleGossip': {\n        timeoutMs = 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment: ?Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = GetVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = GetSlot(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment: ?Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = GetSlotLeader(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(value.length === 1);\n    return {context, value: value[0]};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = GetSignatureStatusesRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = GetTransactionCountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   */\n  async getTotalSupply(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTotalSupply', args);\n    const res = GetTotalSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('faied to get total supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment: ?Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = GetInflationGovernorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetInflationGovernorResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment: ?Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = GetEpochInfoRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochInfoResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = GetEpochScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochScheduleResult(res.result);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = GetLeaderScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = GetMinimumBalanceForRentExemptionRpcResult(unsafeRes);\n    if (res.error) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>,\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n\n    const res = GetRecentBlockhashAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit: ?number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n\n    const res = GetRecentPerformanceSamplesRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = GetFeeCalculatorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value && value.feeCalculator,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment: ?Commitment,\n  ): Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}> {\n    return await this.getRecentBlockhashAndContext(commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error('failed to get recent blockhash: ' + e);\n      });\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = GetVersionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(slot: number): Promise<ConfirmedBlock> {\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', [slot]);\n    const res = GetConfirmedBlockRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    assert(typeof result !== 'undefined');\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return {\n      blockhash: new PublicKey(result.blockhash).toString(),\n      previousBlockhash: new PublicKey(result.previousBlockhash).toString(),\n      parentSlot: result.parentSlot,\n      transactions: result.transactions.map(result => {\n        const {message, signatures} = result.transaction;\n        return {\n          transaction: Transaction.populate(new Message(message), signatures),\n          meta: result.meta,\n        };\n      }),\n      rewards: result.rewards || [],\n    };\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n    ]);\n    const {result, error} = GetConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) {\n      return result;\n    }\n\n    const {message, signatures} = result.transaction;\n    return {\n      slot: result.slot,\n      transaction: Transaction.populate(new Message(message), signatures),\n      meta: result.meta,\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n      'jsonParsed',\n    ]);\n    const {result, error} = GetParsedConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) return result;\n\n    if (result.meta.innerInstructions) {\n      result.meta.innerInstructions.forEach(inner => {\n        inner.instructions.forEach(ix => {\n          ix.programId = new PublicKey(ix.programId);\n\n          if (ix.accounts) {\n            ix.accounts = ix.accounts.map(account => new PublicKey(account));\n          }\n        });\n      });\n    }\n\n    const {\n      accountKeys,\n      instructions,\n      recentBlockhash,\n    } = result.transaction.message;\n    return {\n      slot: result.slot,\n      meta: result.meta,\n      transaction: {\n        signatures: result.transaction.signatures,\n        message: {\n          accountKeys: accountKeys.map(accountKey => ({\n            pubkey: new PublicKey(accountKey.pubkey),\n            signer: accountKey.signer,\n            writable: accountKey.writable,\n          })),\n          instructions: instructions.map(ix => {\n            let mapped: any = {programId: new PublicKey(ix.programId)};\n            if ('accounts' in ix) {\n              mapped.accounts = ix.accounts.map(key => new PublicKey(key));\n            }\n\n            return {\n              ...ix,\n              ...mapped,\n            };\n          }),\n          recentBlockhash,\n        },\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress',\n      [address.toBase58(), startSlot, endSlot],\n    );\n    const result = GetConfirmedSignaturesForAddressRpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options: ?ConfirmedSignaturesForAddress2Options,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      [address.toBase58(), options],\n    );\n    const result = GetConfirmedSignaturesForAddress2RpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = RequestAirdropRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const expired =\n        Date.now() - this._blockhashInfo.lastFetch >=\n        BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('max');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: new Date(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Account>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n    const args = [encodedTransaction, config];\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = SimulatedTransactionResponseValidator(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Account>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * @private\n   */\n  async validatorExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('validatorExit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error('validator exit failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const args = [encodedTransaction, config];\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = SendTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      if (res.error.data) {\n        const logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number) {\n    clearInterval(this._rpcWebSocketHeartbeat);\n    this._rpcWebSocketHeartbeat = null;\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  async _subscribe<SubInfo: {subscriptionId: ?SubscriptionId}, RpcArgs>(\n    sub: SubInfo,\n    rpcMethod: string,\n    rpcArgs: RpcArgs,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _unsubscribe<SubInfo: {subscriptionId: ?SubscriptionId}>(\n    sub: SubInfo,\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetSubscriptions() {\n    (Object.values(this._accountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._programAccountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._signatureSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._slotSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._rootSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @private\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      this._subscribe(\n        sub,\n        'signatureSubscribe',\n        this._buildArgs([sub.signature], sub.commitment),\n      );\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = AccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error('account notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.data[1] === 'base64');\n        sub.callback(\n          {\n            executable: value.executable,\n            owner: new PublicKey(value.owner),\n            lamports: value.lamports,\n            data: Buffer.from(value.data[0], 'base64'),\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ProgramAccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(\n        'program account notification failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._programAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.account.data[1] === 'base64');\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: {\n              executable: value.account.executable,\n              owner: new PublicKey(value.account.owner),\n              lamports: value.account.lamports,\n              data: Buffer.from(value.account.data[0], 'base64'),\n            },\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = SlotNotificationResult(notification);\n    if (res.error) {\n      throw new Error('slot notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {parent, slot, root} = res.result;\n    const keys = Object.keys(this._slotSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._slotSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback({\n          parent,\n          slot,\n          root,\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override: ?Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = SignatureNotificationResult(notification);\n    if (res.error) {\n      throw new Error('signature notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._signatureSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._signatureSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        // Signatures subscriptions are auto-removed by the RPC service so\n        // no need to explicitly send an unsubscribe message\n        delete this._signatureSubscriptions[id];\n        this._updateSubscriptions();\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = RootNotificationResult(notification);\n    if (res.error) {\n      throw new Error('root notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const root = res.result;\n    const keys = Object.keys(this._rootSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._rootSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(root);\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/connection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "BLOCKHASH_CACHE_TIMEOUT_MS",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~BLOCKHASH_CACHE_TIMEOUT_MS",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{BLOCKHASH_CACHE_TIMEOUT_MS}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "typedef",
    "name": "Context",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~Context",
    "access": "public",
    "description": "Extra contextual information for RPC responses",
    "lineNumber": 44,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slot",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Context"
    }
  },
  {
    "__docId__": 84,
    "kind": "typedef",
    "name": "SendOptions",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SendOptions",
    "access": "public",
    "description": "Options for sending transactions",
    "lineNumber": 55,
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "skipPreflight",
        "description": "disable transaction verification step"
      },
      {
        "nullable": null,
        "types": [
          "Commitment ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "preflightCommitment",
        "description": "preflight commitment level"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SendOptions"
    }
  },
  {
    "__docId__": 85,
    "kind": "typedef",
    "name": "ConfirmOptions",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ConfirmOptions",
    "access": "public",
    "description": "Options for confirming transactions",
    "lineNumber": 68,
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "skipPreflight",
        "description": "disable transaction verification step"
      },
      {
        "nullable": null,
        "types": [
          "Commitment ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": "desired commitment level"
      },
      {
        "nullable": null,
        "types": [
          "Commitment ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "preflightCommitment",
        "description": "preflight commitment level"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConfirmOptions"
    }
  },
  {
    "__docId__": 86,
    "kind": "typedef",
    "name": "ConfirmedSignaturesForAddress2Options",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ConfirmedSignaturesForAddress2Options",
    "access": "public",
    "description": "Options for getConfirmedSignaturesForAddress2",
    "lineNumber": 83,
    "properties": [
      {
        "nullable": null,
        "types": [
          "TransactionSignature ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "before",
        "description": "start searching backwards from this transaction signature.\n              If not provided the search starts from the highest max confirmed block."
      },
      {
        "nullable": null,
        "types": [
          "number ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "maximum transaction signatures to return (between 1 and 1,000, default: 1,000)."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConfirmedSignaturesForAddress2Options"
    }
  },
  {
    "__docId__": 87,
    "kind": "typedef",
    "name": "RpcResponseAndContext",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~RpcResponseAndContext",
    "access": "public",
    "description": "RPC Response with extra contextual information",
    "lineNumber": 95,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Context"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "response"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RpcResponseAndContext"
    }
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "jsonRpcResultAndContext",
    "memberof": "src/connection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection.js~jsonRpcResultAndContext",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "resultDescription",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "jsonRpcResult",
    "memberof": "src/connection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection.js~jsonRpcResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "resultDescription",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "notificationResultAndContext",
    "memberof": "src/connection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection.js~notificationResultAndContext",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "resultDescription",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "typedef",
    "name": "Commitment",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~Commitment",
    "access": "public",
    "description": "The level of commitment desired when querying state\n<pre>\n  'max':    Query the most recent block which has been finalized by the cluster\n  'recent': Query the most recent block which has reached 1 confirmation by the connected node\n  'root':   Query the most recent block which has been rooted by the connected node\n  'single': Query the most recent block which has reached 1 confirmation by the cluster\n  'singleGossip': Query the most recent block which has reached 1 confirmation according to votes seen in gossip\n</pre>",
    "lineNumber": 156,
    "type": {
      "types": [
        "'max' ",
        " 'recent' ",
        " 'root' ",
        " 'single' ",
        " 'singleGossip'"
      ],
      "optional": false,
      "name": "Commitment"
    }
  },
  {
    "__docId__": 92,
    "kind": "typedef",
    "name": "LargestAccountsFilter",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~LargestAccountsFilter",
    "access": "public",
    "description": "Filter for largest accounts query\n<pre>\n  'circulating':    Return the largest accounts that are part of the circulating supply\n  'nonCirculating': Return the largest accounts that are not part of the circulating supply\n</pre>",
    "lineNumber": 167,
    "type": {
      "types": [
        "'circulating' ",
        " 'nonCirculating'"
      ],
      "optional": false,
      "name": "LargestAccountsFilter"
    }
  },
  {
    "__docId__": 93,
    "kind": "typedef",
    "name": "GetLargestAccountsConfig",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetLargestAccountsConfig",
    "access": "public",
    "description": "Configuration object for changing `getLargestAccounts` query behavior",
    "lineNumber": 176,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Commitment",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": "The level of commitment desired"
      },
      {
        "nullable": null,
        "types": [
          "LargestAccountsFilter",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": "Filter largest accounts by whether they are part of the circulating supply"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GetLargestAccountsConfig"
    }
  },
  {
    "__docId__": 94,
    "kind": "typedef",
    "name": "SignatureStatusConfig",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SignatureStatusConfig",
    "access": "public",
    "description": "Configuration object for changing query behavior",
    "lineNumber": 187,
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "searchTransactionHistory",
        "description": "enable searching status history, not needed for recent transactions"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SignatureStatusConfig"
    }
  },
  {
    "__docId__": 95,
    "kind": "typedef",
    "name": "ContactInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ContactInfo",
    "access": "public",
    "description": "Information describing a cluster node",
    "lineNumber": 201,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pubkey",
        "description": "Identity public key of the node"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "gossip",
        "description": "Gossip network address for the node"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "tpu",
        "description": "TPU network address for the node (null if not available)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "rpc",
        "description": "JSON RPC network address for the node (null if not available)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": "Software version of the node (null if not available)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ContactInfo"
    }
  },
  {
    "__docId__": 96,
    "kind": "typedef",
    "name": "VoteAccountInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~VoteAccountInfo",
    "access": "public",
    "description": "Information describing a vote account",
    "lineNumber": 221,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "votePubkey",
        "description": "Public key of the vote account"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodePubkey",
        "description": "Identity public key of the node voting with this account"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "activatedStake",
        "description": "The stake, in lamports, delegated to this vote account and activated"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "epochVoteAccount",
        "description": "Whether the vote account is staked for this epoch"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "epochCredits",
        "description": "Recent epoch voting credit history for this voter"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "commission",
        "description": "A percentage (0-100) of rewards payout owed to the voter"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lastVote",
        "description": "Most recent slot voted on by this vote account"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "VoteAccountInfo"
    }
  },
  {
    "__docId__": 97,
    "kind": "typedef",
    "name": "VoteAccountStatus",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~VoteAccountStatus",
    "access": "public",
    "description": "A collection of cluster vote accounts",
    "lineNumber": 238,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array<VoteAccountInfo>"
        ],
        "spread": false,
        "optional": false,
        "name": "current",
        "description": "Active vote accounts"
      },
      {
        "nullable": null,
        "types": [
          "Array<VoteAccountInfo>"
        ],
        "spread": false,
        "optional": false,
        "name": "delinquent",
        "description": "Inactive vote accounts"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "VoteAccountStatus"
    }
  },
  {
    "__docId__": 98,
    "kind": "typedef",
    "name": "InflationGovernor",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~InflationGovernor",
    "access": "public",
    "description": "Network Inflation\n(see https://docs.solana.com/implemented-proposals/ed_overview)",
    "lineNumber": 254,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "foundation",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "foundation_term",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "initial",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "taper",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "terminal",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InflationGovernor"
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "GetInflationGovernorResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetInflationGovernorResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "typedef",
    "name": "EpochInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~EpochInfo",
    "access": "public",
    "description": "Information about the current epoch",
    "lineNumber": 281,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "epoch",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slotIndex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slotsInEpoch",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "absoluteSlot",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "blockHeight",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "transactionCount",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "EpochInfo"
    }
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "GetEpochInfoResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetEpochInfoResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 290,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "typedef",
    "name": "EpochSchedule",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~EpochSchedule",
    "access": "public",
    "description": "Epoch schedule\n(see https://docs.solana.com/terminology#epoch)",
    "lineNumber": 310,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slotsPerEpoch",
        "description": "The maximum number of slots in each epoch"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "leaderScheduleSlotOffset",
        "description": "The number of slots before beginning of an epoch to calculate a leader schedule for that epoch"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "warmup",
        "description": "Indicates whether epochs start short and grow"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstNormalEpoch",
        "description": "The first epoch with `slotsPerEpoch` slots"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstNormalSlot",
        "description": "The first slot of `firstNormalEpoch`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "EpochSchedule"
    }
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "GetEpochScheduleResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetEpochScheduleResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "typedef",
    "name": "LeaderSchedule",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~LeaderSchedule",
    "access": "public",
    "description": "Leader schedule\n(see https://docs.solana.com/terminology#leader-schedule)",
    "lineNumber": 332,
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "LeaderSchedule"
    }
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "GetLeaderScheduleResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetLeaderScheduleResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 336,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "TransactionErrorResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~TransactionErrorResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Transaction error or null",
    "lineNumber": 344,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "SignatureStatusResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SignatureStatusResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Signature status for a transaction",
    "lineNumber": 349,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "typedef",
    "name": "Version",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~Version",
    "access": "public",
    "description": "Version info for a node",
    "lineNumber": 357,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "solana-core",
        "description": "Version of solana-core"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Version"
    }
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "SimulatedTransactionResponseValidator",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SimulatedTransactionResponseValidator",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 367,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "typedef",
    "name": "ParsedConfirmedTransactionMeta",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedConfirmedTransactionMeta",
    "access": "public",
    "description": "Metadata for a parsed confirmed transaction on the ledger",
    "lineNumber": 398,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fee",
        "description": "The fee charged for processing the transaction"
      },
      {
        "nullable": null,
        "types": [
          "Array<ParsedInnerInstruction>"
        ],
        "spread": false,
        "optional": false,
        "name": "innerInstructions",
        "description": "An array of cross program invoked parsed instructions"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "preBalances",
        "description": "The balances of the transaction accounts before processing"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "postBalances",
        "description": "The balances of the transaction accounts after processing"
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "logMessages",
        "description": "An array of program log messages emitted during a transaction"
      },
      {
        "nullable": null,
        "types": [
          "Array<TokenBalance>"
        ],
        "spread": false,
        "optional": false,
        "name": "preTokenBalances",
        "description": "The token balances of the transaction accounts before processing"
      },
      {
        "nullable": null,
        "types": [
          "Array<TokenBalance>"
        ],
        "spread": false,
        "optional": false,
        "name": "postTokenBalances",
        "description": "The token balances of the transaction accounts after processing"
      },
      {
        "nullable": null,
        "types": [
          "object",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "The error result of transaction processing"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ParsedConfirmedTransactionMeta"
    }
  },
  {
    "__docId__": 111,
    "kind": "typedef",
    "name": "ConfirmedTransactionMeta",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ConfirmedTransactionMeta",
    "access": "public",
    "description": "Metadata for a confirmed transaction on the ledger",
    "lineNumber": 427,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fee",
        "description": "The fee charged for processing the transaction"
      },
      {
        "nullable": null,
        "types": [
          "Array<CompiledInnerInstruction>"
        ],
        "spread": false,
        "optional": false,
        "name": "innerInstructions",
        "description": "An array of cross program invoked instructions"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "preBalances",
        "description": "The balances of the transaction accounts before processing"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "postBalances",
        "description": "The balances of the transaction accounts after processing"
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "logMessages",
        "description": "An array of program log messages emitted during a transaction"
      },
      {
        "nullable": null,
        "types": [
          "Array<TokenBalance>"
        ],
        "spread": false,
        "optional": false,
        "name": "preTokenBalances",
        "description": "The token balances of the transaction accounts before processing"
      },
      {
        "nullable": null,
        "types": [
          "Array<TokenBalance>"
        ],
        "spread": false,
        "optional": false,
        "name": "postTokenBalances",
        "description": "The token balances of the transaction accounts after processing"
      },
      {
        "nullable": null,
        "types": [
          "object",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "The error result of transaction processing"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConfirmedTransactionMeta"
    }
  },
  {
    "__docId__": 112,
    "kind": "typedef",
    "name": "ConfirmedTransaction",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ConfirmedTransaction",
    "access": "public",
    "description": "A confirmed transaction on the ledger",
    "lineNumber": 447,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slot",
        "description": "The slot during which the transaction was processed"
      },
      {
        "nullable": null,
        "types": [
          "Transaction"
        ],
        "spread": false,
        "optional": false,
        "name": "transaction",
        "description": "The details of the transaction"
      },
      {
        "nullable": null,
        "types": [
          "ConfirmedTransactionMeta",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "meta",
        "description": "Metadata produced from the transaction"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "null",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "blockTime",
        "description": "The unix timestamp of when the transaction was processed"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConfirmedTransaction"
    }
  },
  {
    "__docId__": 113,
    "kind": "typedef",
    "name": "ParsedMessageAccount",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedMessageAccount",
    "access": "public",
    "description": "A partially decoded transaction instruction",
    "lineNumber": 462,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "pubkey",
        "description": "Public key of the account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "accounts",
        "description": "Indicates if the account signed the transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw base-58 instruction data"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ParsedMessageAccount"
    }
  },
  {
    "__docId__": 114,
    "kind": "typedef",
    "name": "ParsedMessageAccount",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedMessageAccount",
    "access": "public",
    "description": "A parsed transaction message account",
    "lineNumber": 476,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "pubkey",
        "description": "Public key of the account"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "signer",
        "description": "Indicates if the account signed the transaction"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "writable",
        "description": "Indicates if the account is writable for this transaction"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ParsedMessageAccount"
    }
  },
  {
    "__docId__": 115,
    "kind": "typedef",
    "name": "ParsedInstruction",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedInstruction",
    "access": "public",
    "description": "A parsed transaction instruction",
    "lineNumber": 490,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": "Name of the program for this instruction"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": "ID of the program for this instruction"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "parsed",
        "description": "Parsed instruction info"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ParsedInstruction"
    }
  },
  {
    "__docId__": 116,
    "kind": "typedef",
    "name": "ParsedMessage",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedMessage",
    "access": "public",
    "description": "A parsed transaction message",
    "lineNumber": 504,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array<ParsedMessageAccount>"
        ],
        "spread": false,
        "optional": false,
        "name": "accountKeys",
        "description": "Accounts used in the instructions"
      },
      {
        "nullable": null,
        "types": [
          "Array<ParsedInstruction | PartiallyDecodedInstruction>"
        ],
        "spread": false,
        "optional": false,
        "name": "instructions",
        "description": "The atomically executed instructions for the transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "recentBlockhash",
        "description": "Recent blockhash"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ParsedMessage"
    }
  },
  {
    "__docId__": 117,
    "kind": "typedef",
    "name": "ParsedTransaction",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedTransaction",
    "access": "public",
    "description": "A parsed transaction",
    "lineNumber": 517,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "signatures",
        "description": "Signatures for the transaction"
      },
      {
        "nullable": null,
        "types": [
          "ParsedMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message of the transaction"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ParsedTransaction"
    }
  },
  {
    "__docId__": 118,
    "kind": "typedef",
    "name": "ParsedConfirmedTransaction",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedConfirmedTransaction",
    "access": "public",
    "description": "A parsed and confirmed transaction on the ledger",
    "lineNumber": 531,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slot",
        "description": "The slot during which the transaction was processed"
      },
      {
        "nullable": null,
        "types": [
          "ParsedTransaction"
        ],
        "spread": false,
        "optional": false,
        "name": "transaction",
        "description": "The details of the transaction"
      },
      {
        "nullable": null,
        "types": [
          "ConfirmedTransactionMeta",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "meta",
        "description": "Metadata produced from the transaction"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "null",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "blockTime",
        "description": "The unix timestamp of when the transaction was processed"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ParsedConfirmedTransaction"
    }
  },
  {
    "__docId__": 119,
    "kind": "typedef",
    "name": "ConfirmedBlock",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ConfirmedBlock",
    "access": "public",
    "description": "A ConfirmedBlock on the ledger",
    "lineNumber": 548,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Blockhash"
        ],
        "spread": false,
        "optional": false,
        "name": "blockhash",
        "description": "Blockhash of this block"
      },
      {
        "nullable": null,
        "types": [
          "Blockhash"
        ],
        "spread": false,
        "optional": false,
        "name": "previousBlockhash",
        "description": "Blockhash of this block's parent"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "parentSlot",
        "description": "Slot index of this block's parent"
      },
      {
        "nullable": null,
        "types": [
          "Array<object>"
        ],
        "spread": false,
        "optional": false,
        "name": "transactions",
        "description": "Vector of transactions and status metas"
      },
      {
        "nullable": null,
        "types": [
          "Array<object>"
        ],
        "spread": false,
        "optional": false,
        "name": "rewards",
        "description": "Vector of block rewards"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConfirmedBlock"
    }
  },
  {
    "__docId__": 120,
    "kind": "typedef",
    "name": "PerfSample",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~PerfSample",
    "access": "public",
    "description": "A performance sample",
    "lineNumber": 573,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slot",
        "description": "Slot number of sample"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numTransactions",
        "description": "Number of transactions in a sample window"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numSlots",
        "description": "Number of slots in a sample window"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "samplePeriodSecs",
        "description": "Sample window in seconds"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PerfSample"
    }
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "createRpcRequest",
    "memberof": "src/connection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection.js~createRpcRequest",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 580,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useHttps",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RpcRequest"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "GetInflationGovernorRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetInflationGovernorRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getInflationGovernor\" message",
    "lineNumber": 643,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "GetEpochInfoRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetEpochInfoRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getEpochInfo\" message",
    "lineNumber": 653,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "GetEpochScheduleRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetEpochScheduleRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getEpochSchedule\" message",
    "lineNumber": 663,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "GetLeaderScheduleRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetLeaderScheduleRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getLeaderSchedule\" message",
    "lineNumber": 673,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "GetBalanceAndContextRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetBalanceAndContextRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getBalance\" message",
    "lineNumber": 678,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "GetBlockTimeRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetBlockTimeRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getBlockTime\" message",
    "lineNumber": 683,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "SlotRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SlotRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages",
    "lineNumber": 693,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "typedef",
    "name": "Supply",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~Supply",
    "access": "public",
    "description": "Supply",
    "lineNumber": 709,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "total",
        "description": "Total supply in lamports"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "circulating",
        "description": "Circulating supply in lamports"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nonCirculating",
        "description": "Non-circulating supply in lamports"
      },
      {
        "nullable": null,
        "types": [
          "Array<PublicKey>"
        ],
        "spread": false,
        "optional": false,
        "name": "nonCirculatingAccounts",
        "description": "List of non-circulating account addresses"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Supply"
    }
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "GetSupplyRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetSupplyRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getSupply\" message",
    "lineNumber": 719,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "typedef",
    "name": "TokenAmount",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~TokenAmount",
    "access": "public",
    "description": "Token amount object which returns a token amount in different formats\nfor various client use cases.",
    "lineNumber": 737,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Raw amount of tokens as string ignoring decimals"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "decimals",
        "description": "Number of decimals configured for token's mint"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "uiAmount",
        "description": "Token account as float, accounts for decimals"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TokenAmount"
    }
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "TokenAmountResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~TokenAmountResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC structure for token amounts",
    "lineNumber": 746,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "typedef",
    "name": "TokenAccountBalancePair",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~TokenAccountBalancePair",
    "access": "public",
    "description": "Token address and balance.",
    "lineNumber": 761,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Address of the token account"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Raw amount of tokens as string ignoring decimals"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "decimals",
        "description": "Number of decimals configured for token's mint"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "uiAmount",
        "description": "Token account as float, accounts for decimals"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TokenAccountBalancePair"
    }
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "GetTokenLargestAccountsResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetTokenLargestAccountsResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getTokenLargestAccounts\" message",
    "lineNumber": 771,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "GetTokenAccountBalance",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetTokenAccountBalance",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getTokenAccountBalance\" message",
    "lineNumber": 785,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "GetTokenSupplyRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetTokenSupplyRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getTokenSupply\" message",
    "lineNumber": 790,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "GetTokenAccountsByOwner",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetTokenAccountsByOwner",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getTokenAccountsByOwner\" message",
    "lineNumber": 795,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "GetParsedTokenAccountsByOwner",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetParsedTokenAccountsByOwner",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data",
    "lineNumber": 813,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "typedef",
    "name": "AccountBalancePair",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~AccountBalancePair",
    "access": "public",
    "description": "Pair of an account address and its balance",
    "lineNumber": 839,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AccountBalancePair"
    }
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "GetLargestAccountsRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetLargestAccountsRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getLargestAccounts\" message",
    "lineNumber": 847,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "GetVersionRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetVersionRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getVersion\" message",
    "lineNumber": 859,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "AccountInfoResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~AccountInfoResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 869,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "ParsedAccountInfoResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedAccountInfoResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 880,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "StakeActivationResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~StakeActivationResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 898,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "GetAccountInfoAndContextRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetAccountInfoAndContextRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getAccountInfo\" message",
    "lineNumber": 912,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "GetParsedAccountInfoResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetParsedAccountInfoResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getAccountInfo\" message with jsonParsed param",
    "lineNumber": 919,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "GetStakeActivationResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetStakeActivationResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getStakeActivation\" message with jsonParsed param",
    "lineNumber": 926,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "GetConfirmedSignaturesForAddressRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetConfirmedSignaturesForAddressRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getConfirmedSignaturesForAddress\" message",
    "lineNumber": 931,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "GetConfirmedSignaturesForAddress2RpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetConfirmedSignaturesForAddress2RpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message",
    "lineNumber": 939,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "AccountNotificationResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~AccountNotificationResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"accountNotification\" message",
    "lineNumber": 954,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "ProgramAccountInfoResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ProgramAccountInfoResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 962,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "ParsedProgramAccountInfoResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedProgramAccountInfoResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 970,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "ProgramAccountNotificationResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ProgramAccountNotificationResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"programNotification\" message",
    "lineNumber": 978,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "SlotInfoResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SlotInfoResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 986,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "SlotNotificationResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SlotNotificationResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"slotNotification\" message",
    "lineNumber": 995,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "SignatureNotificationResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SignatureNotificationResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"signatureNotification\" message",
    "lineNumber": 1003,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "RootNotificationResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~RootNotificationResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"rootNotification\" message",
    "lineNumber": 1011,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "GetProgramAccountsRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetProgramAccountsRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getProgramAccounts\" message",
    "lineNumber": 1019,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "GetParsedProgramAccountsRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetParsedProgramAccountsRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getProgramAccounts\" message",
    "lineNumber": 1026,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "GetSlot",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetSlot",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getSlot\" message",
    "lineNumber": 1033,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "GetSlotLeader",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetSlotLeader",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getSlotLeader\" message",
    "lineNumber": 1038,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "GetClusterNodes",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetClusterNodes",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getClusterNodes\" message",
    "lineNumber": 1043,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "GetVoteAccounts",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetVoteAccounts",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getVoteAccounts\" message",
    "lineNumber": 1058,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "GetSignatureStatusesRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetSignatureStatusesRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getSignatureStatuses\" message",
    "lineNumber": 1094,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "GetTransactionCountRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetTransactionCountRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getTransactionCount\" message",
    "lineNumber": 1111,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "GetTotalSupplyRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetTotalSupplyRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getTotalSupply\" message",
    "lineNumber": 1116,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "GetMinimumBalanceForRentExemptionRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetMinimumBalanceForRentExemptionRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message",
    "lineNumber": 1121,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "ConfirmedTransactionResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ConfirmedTransactionResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 1126,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "ParsedConfirmedTransactionResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedConfirmedTransactionResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 1149,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "ConfirmedTransactionMetaResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ConfirmedTransactionMetaResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 1180,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "ParsedConfirmedTransactionMetaResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedConfirmedTransactionMetaResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 1239,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "GetConfirmedBlockRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetConfirmedBlockRpcResult",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{GetConfirmedBlockRpcResult}",
    "description": "Expected JSON RPC response for the \"getConfirmedBlock\" message",
    "lineNumber": 1306,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "GetConfirmedTransactionRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetConfirmedTransactionRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getConfirmedTransaction\" message",
    "lineNumber": 1337,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "name": "GetParsedConfirmedTransactionRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetParsedConfirmedTransactionRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getConfirmedTransaction\" message",
    "lineNumber": 1352,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "name": "GetRecentBlockhashAndContextRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetRecentBlockhashAndContextRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getRecentBlockhash\" message",
    "lineNumber": 1367,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "GetRecentPerformanceSamplesRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetRecentPerformanceSamplesRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 1379,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "name": "GetFeeCalculatorRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetFeeCalculatorRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message",
    "lineNumber": 1393,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "RequestAirdropRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~RequestAirdropRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"requestAirdrop\" message",
    "lineNumber": 1407,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "SendTransactionRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SendTransactionRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"sendTransaction\" message",
    "lineNumber": 1412,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "typedef",
    "name": "SlotInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SlotInfo",
    "access": "public",
    "description": "Information about the latest slot being processed by a node",
    "lineNumber": 1422,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slot",
        "description": "Currently processing slot"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "Parent of the current slot"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "The root block of the current slot's fork"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SlotInfo"
    }
  },
  {
    "__docId__": 181,
    "kind": "typedef",
    "name": "ParsedAccountData",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ParsedAccountData",
    "access": "public",
    "description": "Parsed account data",
    "lineNumber": 1436,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": "Name of the program that owns this account"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "parsed",
        "description": "Parsed account data"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": "Space used by account data"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ParsedAccountData"
    }
  },
  {
    "__docId__": 182,
    "kind": "typedef",
    "name": "StakeActivationData",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~StakeActivationData",
    "access": "public",
    "description": "Stake Activation data",
    "lineNumber": 1450,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "state:",
        "description": "<string - the stake account's activation state, one of: active, inactive, activating, deactivating"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "active:",
        "description": "stake active during the epoch"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "inactive:",
        "description": "stake inactive during the epoch"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "StakeActivationData"
    }
  },
  {
    "__docId__": 183,
    "kind": "typedef",
    "name": "AccountInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~AccountInfo",
    "access": "public",
    "description": "Information describing an account",
    "lineNumber": 1465,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": "Number of lamports assigned to the account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Identifier of the program that owns the account"
      },
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Optional data assigned to the account"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "executable",
        "description": "`true` if this account's data contains a loaded program"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AccountInfo"
    }
  },
  {
    "__docId__": 184,
    "kind": "typedef",
    "name": "KeyedAccountInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~KeyedAccountInfo",
    "access": "public",
    "description": "Account information identified by pubkey",
    "lineNumber": 1479,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AccountInfo<Buffer>"
        ],
        "spread": false,
        "optional": false,
        "name": "accountInfo",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KeyedAccountInfo"
    }
  },
  {
    "__docId__": 185,
    "kind": "typedef",
    "name": "SignatureResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SignatureResult",
    "access": "public",
    "description": "Signature result",
    "lineNumber": 1574,
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SignatureResult"
    }
  },
  {
    "__docId__": 186,
    "kind": "typedef",
    "name": "TransactionError",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~TransactionError",
    "access": "public",
    "description": "Transaction error",
    "lineNumber": 1583,
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TransactionError"
    }
  },
  {
    "__docId__": 187,
    "kind": "typedef",
    "name": "SignatureStatus",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SignatureStatus",
    "access": "public",
    "description": "Signature status",
    "lineNumber": 1594,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slot",
        "description": "when the transaction was processed"
      },
      {
        "nullable": null,
        "types": [
          "number ",
          " null"
        ],
        "spread": false,
        "optional": false,
        "name": "confirmations",
        "description": "the number of blocks that have been confirmed and voted on in the fork containing `slot` (TODO)"
      },
      {
        "nullable": null,
        "types": [
          "TransactionError ",
          " null"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "error, if any"
      },
      {
        "nullable": null,
        "types": [
          "string ",
          " null"
        ],
        "spread": false,
        "optional": false,
        "name": "confirmationStatus",
        "description": "the transaction's cluster confirmation status, if data available. Possible non-null responses: `processed`, `confirmed`, `finalized`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SignatureStatus"
    }
  },
  {
    "__docId__": 188,
    "kind": "typedef",
    "name": "ConfirmedSignatureInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ConfirmedSignatureInfo",
    "access": "public",
    "description": "A confirmed signature with its status",
    "lineNumber": 1611,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": "the transaction signature"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slot",
        "description": "when the transaction was processed"
      },
      {
        "nullable": null,
        "types": [
          "TransactionError ",
          " null"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "error, if any"
      },
      {
        "nullable": null,
        "types": [
          "string ",
          " null"
        ],
        "spread": false,
        "optional": false,
        "name": "memo",
        "description": "memo associated with the transaction, if any"
      },
      {
        "nullable": null,
        "types": [
          "number ",
          " null ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "blockTime",
        "description": "The unix timestamp of when the transaction was processed"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConfirmedSignatureInfo"
    }
  },
  {
    "__docId__": 189,
    "kind": "class",
    "name": "Connection",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~Connection",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Connection}",
    "description": "A connection to a fullnode JSON RPC endpoint",
    "lineNumber": 1622,
    "interface": false
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "_rpcEndpoint",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcEndpoint",
    "access": "private",
    "description": "",
    "lineNumber": 1623,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "_rpcRequest",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcRequest",
    "access": "private",
    "description": "",
    "lineNumber": 1624,
    "type": {
      "nullable": null,
      "types": [
        "RpcRequest"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "_rpcWebSocket",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcWebSocket",
    "access": "private",
    "description": "",
    "lineNumber": 1625,
    "type": {
      "nullable": null,
      "types": [
        "RpcWebSocketClient"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "_rpcWebSocketConnected",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcWebSocketConnected",
    "access": "private",
    "description": "",
    "lineNumber": 1626,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "_rpcWebSocketHeartbeat",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcWebSocketHeartbeat",
    "access": "private",
    "description": "",
    "lineNumber": 1627,
    "type": {
      "nullable": null,
      "types": [
        "IntervalID",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "_rpcWebSocketIdleTimeout",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcWebSocketIdleTimeout",
    "access": "private",
    "description": "",
    "lineNumber": 1628,
    "type": {
      "nullable": null,
      "types": [
        "TimeoutID",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "_commitment",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_commitment",
    "access": "private",
    "description": "",
    "lineNumber": 1630,
    "type": {
      "nullable": true,
      "types": [
        "Commitment"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "_blockhashInfo",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_blockhashInfo",
    "access": "private",
    "description": "",
    "lineNumber": 1631,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "_disableBlockhashCaching",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_disableBlockhashCaching",
    "access": "private",
    "description": "",
    "lineNumber": 1637,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "_pollingBlockhash",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_pollingBlockhash",
    "access": "private",
    "description": "",
    "lineNumber": 1638,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "_accountChangeSubscriptions",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_accountChangeSubscriptions",
    "access": "private",
    "description": "",
    "lineNumber": 1639,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_accountChangeSubscriptionCounter",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_accountChangeSubscriptionCounter",
    "access": "private",
    "description": "",
    "lineNumber": 1640,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "_programAccountChangeSubscriptions",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_programAccountChangeSubscriptions",
    "access": "private",
    "description": "",
    "lineNumber": 1641,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "_programAccountChangeSubscriptionCounter",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_programAccountChangeSubscriptionCounter",
    "access": "private",
    "description": "",
    "lineNumber": 1644,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "_slotSubscriptions",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_slotSubscriptions",
    "access": "private",
    "description": "",
    "lineNumber": 1645,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "_slotSubscriptionCounter",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_slotSubscriptionCounter",
    "access": "private",
    "description": "",
    "lineNumber": 1648,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "_signatureSubscriptions",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_signatureSubscriptions",
    "access": "private",
    "description": "",
    "lineNumber": 1649,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "_signatureSubscriptionCounter",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_signatureSubscriptionCounter",
    "access": "private",
    "description": "",
    "lineNumber": 1652,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "_rootSubscriptions",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rootSubscriptions",
    "access": "private",
    "description": "",
    "lineNumber": 1653,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "_rootSubscriptionCounter",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rootSubscriptionCounter",
    "access": "private",
    "description": "",
    "lineNumber": 1656,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#constructor",
    "access": "public",
    "description": "Establish a JSON RPC connection ",
    "lineNumber": 1664,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "URL to the fullnode JSON RPC endpoint"
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": "optional default commitment level"
      }
    ]
  },
  {
    "__docId__": 216,
    "kind": "get",
    "name": "commitment",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#commitment",
    "access": "public",
    "description": "The default commitment used for requests ",
    "lineNumber": 1722,
    "type": {
      "nullable": true,
      "types": [
        "Commitment"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "getBalanceAndContext",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getBalanceAndContext",
    "access": "public",
    "description": "Fetch the balance for the specified public key, return with context  ",
    "lineNumber": 1729,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getBalance",
    "access": "public",
    "description": "Fetch the balance for the specified public key  ",
    "lineNumber": 1751,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "getBlockTime",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getBlockTime",
    "access": "public",
    "description": "Fetch the estimated production time of a block  ",
    "lineNumber": 1767,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slot",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number|nullliteral>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "getMinimumLedgerSlot",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getMinimumLedgerSlot",
    "access": "public",
    "description": "Fetch the lowest slot that the node has information about in its ledger.\nThis value may increase over time if the node is configured to purge older ledger data  ",
    "lineNumber": 1783,
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "getFirstAvailableBlock",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getFirstAvailableBlock",
    "access": "public",
    "description": "Fetch the slot of the lowest confirmed block that has not been purged from the ledger  ",
    "lineNumber": 1798,
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "getSupply",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getSupply",
    "access": "public",
    "description": "Fetch information about the current supply  ",
    "lineNumber": 1813,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<Supply>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "getTokenSupply",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getTokenSupply",
    "access": "public",
    "description": "Fetch the current supply of a token mint  ",
    "lineNumber": 1832,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "tokenMintAddress",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<TokenAmount>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "getTokenAccountBalance",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getTokenAccountBalance",
    "access": "public",
    "description": "Fetch the current balance of a token account  ",
    "lineNumber": 1849,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "tokenAddress",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<TokenAmount>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "getTokenAccountsByOwner",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getTokenAccountsByOwner",
    "access": "public",
    "description": "Fetch all the token accounts owned by the specified account  ",
    "lineNumber": 1870,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "ownerAddress",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "TokenAccountsFilter"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "getParsedTokenAccountsByOwner",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getParsedTokenAccountsByOwner",
    "access": "public",
    "description": "Fetch parsed token accounts owned by the specified account  ",
    "lineNumber": 1924,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "ownerAddress",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "TokenAccountsFilter"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "getLargestAccounts",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getLargestAccounts",
    "access": "public",
    "description": "Fetch the 20 largest accounts with their current balances  ",
    "lineNumber": 1973,
    "params": [
      {
        "nullable": true,
        "types": [
          "GetLargestAccountsConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<Array<AccountBalancePair>>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "getTokenLargestAccounts",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getTokenLargestAccounts",
    "access": "public",
    "description": "Fetch the 20 largest token accounts with their current balances\nfor a given mint.  ",
    "lineNumber": 1998,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "mintAddress",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "getAccountInfoAndContext",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getAccountInfoAndContext",
    "access": "public",
    "description": "Fetch all the account info for the specified public key, return with context  ",
    "lineNumber": 2021,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<AccountInfo<Buffer>|nullliteral>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "getParsedAccountInfo",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getParsedAccountInfo",
    "access": "public",
    "description": "Fetch parsed account info for the specified public key  ",
    "lineNumber": 2061,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<AccountInfo<Buffer|ParsedAccountData>|nullliteral>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "getAccountInfo",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getAccountInfo",
    "access": "public",
    "description": "Fetch all the account info for the specified public key  ",
    "lineNumber": 2113,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AccountInfo<Buffer>|nullliteral>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "getStakeActivation",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getStakeActivation",
    "access": "public",
    "description": "Returns epoch activation information for a stake account that has been delegated  ",
    "lineNumber": 2129,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "epoch",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<StakeActivationData>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "getProgramAccounts",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getProgramAccounts",
    "access": "public",
    "description": "Fetch all the accounts owned by the specified program id  ",
    "lineNumber": 2161,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "getParsedProgramAccounts",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getParsedProgramAccounts",
    "access": "public",
    "description": "Fetch and parse all the accounts owned by the specified program id  ",
    "lineNumber": 2199,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "confirmTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#confirmTransaction",
    "access": "public",
    "description": "Confirm the transaction identified by the specified signature.  ",
    "lineNumber": 2251,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionSignature"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<SignatureResult>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "getClusterNodes",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getClusterNodes",
    "access": "public",
    "description": "Return the list of nodes that are currently participating in the cluster  ",
    "lineNumber": 2324,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<ContactInfo>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "getVoteAccounts",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getVoteAccounts",
    "access": "public",
    "description": "Return the list of nodes that are currently participating in the cluster  ",
    "lineNumber": 2338,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<VoteAccountStatus>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "getSlot",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getSlot",
    "access": "public",
    "description": "Fetch the current slot that the node is processing  ",
    "lineNumber": 2353,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "getSlotLeader",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getSlotLeader",
    "access": "public",
    "description": "Fetch the current slot leader of the cluster  ",
    "lineNumber": 2367,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "getSignatureStatus",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getSignatureStatus",
    "access": "public",
    "description": "Fetch the current status of a signature  ",
    "lineNumber": 2381,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionSignature"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "SignatureStatusConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<SignatureStatus|nullliteral>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "getSignatureStatuses",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getSignatureStatuses",
    "access": "public",
    "description": "Fetch the current statuses of a batch of signatures  ",
    "lineNumber": 2396,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<TransactionSignature>"
        ],
        "spread": false,
        "optional": false,
        "name": "signatures",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "SignatureStatusConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<Array<SignatureStatus|nullliteral>>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "getTransactionCount",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getTransactionCount",
    "access": "public",
    "description": "Fetch the current transaction count of the cluster  ",
    "lineNumber": 2416,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "getTotalSupply",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getTotalSupply",
    "access": "public",
    "description": "Fetch the current total currency supply of the cluster in lamports  ",
    "lineNumber": 2430,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "getInflationGovernor",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getInflationGovernor",
    "access": "public",
    "description": "Fetch the cluster InflationGovernor parameters  ",
    "lineNumber": 2444,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<InflationGovernor>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "getEpochInfo",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getEpochInfo",
    "access": "public",
    "description": "Fetch the Epoch Info parameters  ",
    "lineNumber": 2460,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<EpochInfo>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "getEpochSchedule",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getEpochSchedule",
    "access": "public",
    "description": "Fetch the Epoch Schedule parameters  ",
    "lineNumber": 2474,
    "return": {
      "nullable": null,
      "types": [
        "Promise<EpochSchedule>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "getLeaderSchedule",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getLeaderSchedule",
    "access": "public",
    "description": "Fetch the leader schedule for the current epoch  ",
    "lineNumber": 2488,
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<LeaderSchedule>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "getMinimumBalanceForRentExemption",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getMinimumBalanceForRentExemption",
    "access": "public",
    "description": "Fetch the minimum balance needed to exempt an account of `dataLength`\nsize from rent  ",
    "lineNumber": 2502,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dataLength",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "getRecentBlockhashAndContext",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getRecentBlockhashAndContext",
    "access": "public",
    "description": "Fetch a recent blockhash from the cluster, return with context  ",
    "lineNumber": 2524,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "getRecentPerformanceSamples",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getRecentPerformanceSamples",
    "access": "public",
    "description": "Fetch recent performance samples  ",
    "lineNumber": 2544,
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<PerfSample>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "getFeeCalculatorForBlockhash",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getFeeCalculatorForBlockhash",
    "access": "public",
    "description": "Fetch the fee calculator for a recent blockhash from the cluster, return with context  ",
    "lineNumber": 2567,
    "params": [
      {
        "nullable": null,
        "types": [
          "Blockhash"
        ],
        "spread": false,
        "optional": false,
        "name": "blockhash",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<FeeCalculator|nullliteral>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "getRecentBlockhash",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getRecentBlockhash",
    "access": "public",
    "description": "Fetch a recent blockhash from the cluster  ",
    "lineNumber": 2593,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "getVersion",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getVersion",
    "access": "public",
    "description": "Fetch the node version  ",
    "lineNumber": 2606,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Version>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "getConfirmedBlock",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getConfirmedBlock",
    "access": "public",
    "description": "Fetch a list of Transactions and transaction statuses from the cluster\nfor a confirmed block  ",
    "lineNumber": 2620,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slot",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ConfirmedBlock>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "getConfirmedTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getConfirmedTransaction",
    "access": "public",
    "description": "Fetch a transaction details for a confirmed transaction  ",
    "lineNumber": 2649,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionSignature"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ConfirmedTransaction|nullliteral>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "getParsedConfirmedTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getParsedConfirmedTransaction",
    "access": "public",
    "description": "Fetch parsed transaction details for a confirmed transaction  ",
    "lineNumber": 2675,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionSignature"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ParsedConfirmedTransaction|nullliteral>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "getConfirmedSignaturesForAddress",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getConfirmedSignaturesForAddress",
    "access": "public",
    "description": "Fetch a list of all the confirmed signatures for transactions involving an address\nwithin a specified slot range. Max range allowed is 10,000 slots.  ",
    "lineNumber": 2742,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "queried address"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "startSlot",
        "description": "start slot, inclusive"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "endSlot",
        "description": "end slot, inclusive"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<TransactionSignature>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "getConfirmedSignaturesForAddress2",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getConfirmedSignaturesForAddress2",
    "access": "public",
    "description": "Returns confirmed signatures for transactions involving an\naddress backwards in time from the provided signature or most recent confirmed block  ",
    "lineNumber": 2770,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "queried address"
      },
      {
        "nullable": true,
        "types": [
          "ConfirmedSignaturesForAddress2Options"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<ConfirmedSignatureInfo>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "getNonceAndContext",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getNonceAndContext",
    "access": "public",
    "description": "Fetch the contents of a Nonce account from the cluster, return with context  ",
    "lineNumber": 2792,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "nonceAccount",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<NonceAccount|nullliteral>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "getNonce",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getNonce",
    "access": "public",
    "description": "Fetch the contents of a Nonce account from the cluster  ",
    "lineNumber": 2815,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "nonceAccount",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<NonceAccount|nullliteral>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "requestAirdrop",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#requestAirdrop",
    "access": "public",
    "description": "Request an allocation of lamports to the specified account  ",
    "lineNumber": 2834,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "_recentBlockhash",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#_recentBlockhash",
    "access": "private",
    "description": " ",
    "lineNumber": 2852,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "disableCache",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Blockhash>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "_pollNewBlockhash",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#_pollNewBlockhash",
    "access": "private",
    "description": " ",
    "lineNumber": 2870,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Blockhash>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "simulateTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#simulateTransaction",
    "access": "public",
    "description": "Simulate a transaction  ",
    "lineNumber": 2902,
    "params": [
      {
        "nullable": null,
        "types": [
          "Transaction"
        ],
        "spread": false,
        "optional": false,
        "name": "transaction",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Account>"
        ],
        "spread": false,
        "optional": false,
        "name": "signers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<SimulatedTransactionResponse>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "sendTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#sendTransaction",
    "access": "public",
    "description": "Sign and send a transaction  ",
    "lineNumber": 2961,
    "params": [
      {
        "nullable": null,
        "types": [
          "Transaction"
        ],
        "spread": false,
        "optional": false,
        "name": "transaction",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Account>"
        ],
        "spread": false,
        "optional": false,
        "name": "signers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SendOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "validatorExit",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#validatorExit",
    "access": "private",
    "description": "  ",
    "lineNumber": 2996,
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "sendRawTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#sendRawTransaction",
    "access": "public",
    "description": "Send a transaction that has already been signed and serialized into the\nwire format  ",
    "lineNumber": 3010,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer",
          "Uint8Array",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTransaction",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "SendOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "sendEncodedTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#sendEncodedTransaction",
    "access": "public",
    "description": "Send a transaction that has already been signed, serialized into the\nwire format, and encoded as a base64 string  ",
    "lineNumber": 3026,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encodedTransaction",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "SendOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "_wsOnOpen",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnOpen",
    "access": "private",
    "description": " ",
    "lineNumber": 3063,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "_wsOnError",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnError",
    "access": "private",
    "description": " ",
    "lineNumber": 3075,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "_wsOnClose",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnClose",
    "access": "private",
    "description": " ",
    "lineNumber": 3082,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "_subscribe",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#_subscribe",
    "access": "private",
    "description": " ",
    "lineNumber": 3099,
    "params": [
      {
        "nullable": null,
        "types": [
          "SubInfo"
        ],
        "spread": false,
        "optional": false,
        "name": "sub",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rpcMethod",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RpcArgs"
        ],
        "spread": false,
        "optional": false,
        "name": "rpcArgs",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "_unsubscribe",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#_unsubscribe",
    "access": "private",
    "description": " ",
    "lineNumber": 3125,
    "params": [
      {
        "nullable": null,
        "types": [
          "SubInfo"
        ],
        "spread": false,
        "optional": false,
        "name": "sub",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rpcMethod",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "_resetSubscriptions",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_resetSubscriptions",
    "access": "private",
    "description": " ",
    "lineNumber": 3143,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "_updateSubscriptions",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_updateSubscriptions",
    "access": "private",
    "description": " ",
    "lineNumber": 3164,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "_wsOnAccountNotification",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnAccountNotification",
    "access": "private",
    "description": " ",
    "lineNumber": 3243,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "onAccountChange",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#onAccountChange",
    "access": "public",
    "description": "Register a callback to be invoked whenever the specified account changes  ",
    "lineNumber": 3279,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": "Public key of the account to monitor"
      },
      {
        "nullable": null,
        "types": [
          "AccountChangeCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to invoke whenever the account is changed"
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": "Specify the commitment level account changes must reach before notification"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "subscription id"
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "removeAccountChangeListener",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#removeAccountChangeListener",
    "access": "public",
    "description": "Deregister an account notification callback  ",
    "lineNumber": 3300,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "subscription id to deregister"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "_wsOnProgramAccountNotification",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnProgramAccountNotification",
    "access": "private",
    "description": " ",
    "lineNumber": 3314,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "onProgramAccountChange",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#onProgramAccountChange",
    "access": "public",
    "description": "Register a callback to be invoked whenever accounts owned by the\nspecified program change  ",
    "lineNumber": 3358,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": "Public key of the program to monitor"
      },
      {
        "nullable": null,
        "types": [
          "ProgramAccountChangeCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to invoke whenever the account is changed"
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": "Specify the commitment level account changes must reach before notification"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "subscription id"
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "removeProgramAccountChangeListener",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#removeProgramAccountChangeListener",
    "access": "public",
    "description": "Deregister an account notification callback  ",
    "lineNumber": 3379,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "subscription id to deregister"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "_wsOnSlotNotification",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnSlotNotification",
    "access": "private",
    "description": " ",
    "lineNumber": 3393,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "onSlotChange",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#onSlotChange",
    "access": "public",
    "description": "Register a callback to be invoked upon slot changes  ",
    "lineNumber": 3420,
    "params": [
      {
        "nullable": null,
        "types": [
          "SlotChangeCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to invoke whenever the slot changes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "subscription id"
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "removeSlotChangeListener",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#removeSlotChangeListener",
    "access": "public",
    "description": "Deregister a slot notification callback  ",
    "lineNumber": 3435,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "subscription id to deregister"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "_buildArgs",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_buildArgs",
    "access": "private",
    "description": " ",
    "lineNumber": 3446,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "override",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "stringliteral",
          "stringliteral"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "extra",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<any>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "_wsOnSignatureNotification",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnSignatureNotification",
    "access": "private",
    "description": " ",
    "lineNumber": 3472,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "onSignature",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#onSignature",
    "access": "public",
    "description": "Register a callback to be invoked upon signature updates  ",
    "lineNumber": 3500,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionSignature"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": "Transaction signature string in base 58"
      },
      {
        "nullable": null,
        "types": [
          "SignatureResultCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to invoke on signature notifications"
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": "Specify the commitment level signature must reach before notification"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "subscription id"
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "removeSignatureListener",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#removeSignatureListener",
    "access": "public",
    "description": "Deregister a signature notification callback  ",
    "lineNumber": 3521,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "subscription id to deregister"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "_wsOnRootNotification",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnRootNotification",
    "access": "private",
    "description": " ",
    "lineNumber": 3535,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "onRootChange",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#onRootChange",
    "access": "public",
    "description": "Register a callback to be invoked upon root changes  ",
    "lineNumber": 3558,
    "params": [
      {
        "nullable": null,
        "types": [
          "RootChangeCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to invoke whenever the root changes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "subscription id"
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "removeRootChangeListener",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#removeRootChangeListener",
    "access": "public",
    "description": "Deregister a root notification callback  ",
    "lineNumber": 3573,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "subscription id to deregister"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 303,
    "kind": "file",
    "name": "src/fee-calculator.js",
    "content": "// @flow\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @private\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * @typedef {Object} FeeCalculator\n * @property {number} lamportsPerSignature lamports Cost in lamports to validate a signature\n */\nexport type FeeCalculator = {\n  lamportsPerSignature: number,\n};\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/fee-calculator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 304,
    "kind": "variable",
    "name": "FeeCalculatorLayout",
    "memberof": "src/fee-calculator.js",
    "static": true,
    "longname": "src/fee-calculator.js~FeeCalculatorLayout",
    "access": "private",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{FeeCalculatorLayout}",
    "description": "https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "typedef",
    "name": "FeeCalculator",
    "memberof": "src/fee-calculator.js",
    "static": true,
    "longname": "src/fee-calculator.js~FeeCalculator",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamportsPerSignature",
        "description": "lamports Cost in lamports to validate a signature"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "FeeCalculator"
    }
  },
  {
    "__docId__": 306,
    "kind": "file",
    "name": "src/index.js",
    "content": "// @flow\nexport {Account} from './account';\nexport {BPF_LOADER_DEPRECATED_PROGRAM_ID} from './bpf-loader-deprecated';\nexport {BpfLoader, BPF_LOADER_PROGRAM_ID} from './bpf-loader';\nexport {Connection} from './connection';\nexport {Loader} from './loader';\nexport {Message} from './message';\nexport {NonceAccount, NONCE_ACCOUNT_LENGTH} from './nonce-account';\nexport {MAX_SEED_LENGTH, PublicKey} from './publickey';\nexport {\n  STAKE_CONFIG_ID,\n  Authorized,\n  Lockup,\n  StakeAuthorizationLayout,\n  StakeInstruction,\n  STAKE_INSTRUCTION_LAYOUTS,\n  StakeProgram,\n} from './stake-program';\nexport {\n  SystemInstruction,\n  SystemProgram,\n  SYSTEM_INSTRUCTION_LAYOUTS,\n} from './system-program';\nexport {Secp256k1Program} from './secp256k1-program';\nexport {Transaction, TransactionInstruction} from './transaction';\nexport {VALIDATOR_INFO_KEY, ValidatorInfo} from './validator-info';\nexport {VOTE_PROGRAM_ID, VoteAccount} from './vote-account';\nexport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from './sysvar';\nexport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nexport {sendAndConfirmRawTransaction} from './util/send-and-confirm-raw-transaction';\nexport {clusterApiUrl} from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 307,
    "kind": "variable",
    "name": "LAMPORTS_PER_SOL",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~LAMPORTS_PER_SOL",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{LAMPORTS_PER_SOL}",
    "description": "There are 1-billion lamports in one SOL",
    "lineNumber": 42,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "src/instruction.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @typedef {Object} InstructionType\n * @property (index} The Instruction index (from solana upstream program)\n * @property (BufferLayout} The BufferLayout to use to build data\n */\nexport type InstructionType = {|\n  index: number,\n  layout: typeof BufferLayout,\n|};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n */\nexport function encodeData(type: InstructionType, fields: Object): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): Object {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/instruction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "typedef",
    "name": "InstructionType",
    "memberof": "src/instruction.js",
    "static": true,
    "longname": "src/instruction.js~InstructionType",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "(index}",
        "description": "The Instruction index (from solana upstream program)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "(BufferLayout}",
        "description": "The BufferLayout to use to build data"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InstructionType"
    }
  },
  {
    "__docId__": 310,
    "kind": "function",
    "name": "encodeData",
    "memberof": "src/instruction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/instruction.js~encodeData",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{encodeData}",
    "description": "Populate a buffer of instruction data using an InstructionType",
    "lineNumber": 20,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "fields",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "function",
    "name": "decodeData",
    "memberof": "src/instruction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/instruction.js~decodeData",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{decodeData}",
    "description": "Decode instruction data buffer using an InstructionType",
    "lineNumber": 32,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "src/layout.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: Object, fields: Object): number {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/layout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "function",
    "name": "publicKey",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~publicKey",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{publicKey}",
    "description": "Layout for a public key",
    "lineNumber": 8,
    "params": [
      {
        "name": "property",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "publicKey",
        "defaultValue": "publicKey"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "function",
    "name": "uint64",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~uint64",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{uint64}",
    "description": "Layout for a 64bit unsigned value",
    "lineNumber": 15,
    "params": [
      {
        "name": "property",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "uint64",
        "defaultValue": "uint64"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "function",
    "name": "rustString",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~rustString",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{rustString}",
    "description": "Layout for a Rust String type",
    "lineNumber": 22,
    "params": [
      {
        "name": "property",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "string",
        "defaultValue": "string"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "function",
    "name": "authorized",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~authorized",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{authorized}",
    "description": "Layout for an Authorized object",
    "lineNumber": 60,
    "params": [
      {
        "name": "property",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "authorized",
        "defaultValue": "authorized"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "function",
    "name": "lockup",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~lockup",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{lockup}",
    "description": "Layout for a Lockup object",
    "lineNumber": 70,
    "params": [
      {
        "name": "property",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "lockup",
        "defaultValue": "lockup"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "function",
    "name": "getAlloc",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~getAlloc",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{getAlloc}",
    "description": " ",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 319,
    "kind": "file",
    "name": "src/loader.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'singleGossip',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'singleGossip',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'singleGossip',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'singleGossip',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 320,
    "kind": "class",
    "name": "Loader",
    "memberof": "src/loader.js",
    "static": true,
    "longname": "src/loader.js~Loader",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Loader}",
    "description": "Program loader interface",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 321,
    "kind": "get",
    "name": "chunkSize",
    "memberof": "src/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/loader.js~Loader.chunkSize",
    "access": "public",
    "description": "Amount of program data placed in each load Transaction ",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "getMinNumSignatures",
    "memberof": "src/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/loader.js~Loader.getMinNumSignatures",
    "access": "public",
    "description": "Minimum number of signatures required to load a program not including\nretries\n\nCan be used to calculate transaction fees  ",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dataLength",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "load",
    "memberof": "src/loader.js~Loader",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/loader.js~Loader.load",
    "access": "public",
    "description": "Loads a generic program  ",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": "The connection to use"
      },
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "payer",
        "description": "System account that pays to load the program"
      },
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": "Account to load the program into"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": "Public key that identifies the loader"
      },
      {
        "nullable": null,
        "types": [
          "Buffer",
          "Uint8Array",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Program octets"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "true if program was loaded successfully, false if program was already loaded"
    }
  },
  {
    "__docId__": 324,
    "kind": "file",
    "name": "src/message.js",
    "content": "// @flow\n\nimport bs58 from 'bs58';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\n\n/**\n * The message header, identifying signed and read-only account\n *\n * @typedef {Object} MessageHeader\n * @property {number} numRequiredSignatures The number of signatures required for this message to be considered valid. The\n * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n * @property {number} numReadonlySignedAccounts: The last `numReadonlySignedAccounts` of the signed keys are read-only accounts\n * @property {number} numReadonlyUnsignedAccounts The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts\n */\nexport type MessageHeader = {\n  numRequiredSignatures: number,\n  numReadonlySignedAccounts: number,\n  numReadonlyUnsignedAccounts: number,\n};\n\n/**\n * An instruction to execute by a program\n *\n * @typedef {Object} CompiledInstruction\n * @property {number} programIdIndex Index into the transaction keys array indicating the program account that executes this instruction\n * @property {number[]} accounts Ordered indices into the transaction keys array indicating which accounts to pass to the program\n * @property {string} data The program input data encoded as base 58\n */\nexport type CompiledInstruction = {\n  programIdIndex: number,\n  accounts: number[],\n  data: string,\n};\n\n/**\n * Message constructor arguments\n *\n * @typedef {Object} MessageArgs\n * @property {MessageHeader} header The message header, identifying signed and read-only `accountKeys`\n * @property {string[]} accounts All the account keys used by this transaction\n * @property {Blockhash} recentBlockhash The hash of a recent ledger block\n * @property {CompiledInstruction[]} instructions Instructions that will be executed in sequence and committed in one atomic transaction if all succeed.\n */\ntype MessageArgs = {\n  header: MessageHeader,\n  accountKeys: string[],\n  recentBlockhash: Blockhash,\n  instructions: CompiledInstruction[],\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => key.toBuffer()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIdIndex = byteArray.shift();\n      const accountCount = shortvec.decodeLength(byteArray);\n      instruction.accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = byteArray.slice(0, dataLength);\n      instruction.data = bs58.encode(Buffer.from(data));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 325,
    "kind": "typedef",
    "name": "MessageHeader",
    "memberof": "src/message.js",
    "static": true,
    "longname": "src/message.js~MessageHeader",
    "access": "public",
    "description": "The message header, identifying signed and read-only account",
    "lineNumber": 21,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numRequiredSignatures",
        "description": "The number of signatures required for this message to be considered valid. The\nsignatures must match the first `numRequiredSignatures` of `accountKeys`."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numReadonlySignedAccounts:",
        "description": "The last `numReadonlySignedAccounts` of the signed keys are read-only accounts"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numReadonlyUnsignedAccounts",
        "description": "The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MessageHeader"
    }
  },
  {
    "__docId__": 326,
    "kind": "typedef",
    "name": "CompiledInstruction",
    "memberof": "src/message.js",
    "static": true,
    "longname": "src/message.js~CompiledInstruction",
    "access": "public",
    "description": "An instruction to execute by a program",
    "lineNumber": 35,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "programIdIndex",
        "description": "Index into the transaction keys array indicating the program account that executes this instruction"
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "accounts",
        "description": "Ordered indices into the transaction keys array indicating which accounts to pass to the program"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The program input data encoded as base 58"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CompiledInstruction"
    }
  },
  {
    "__docId__": 327,
    "kind": "typedef",
    "name": "MessageArgs",
    "memberof": "src/message.js",
    "static": true,
    "longname": "src/message.js~MessageArgs",
    "access": "public",
    "description": "Message constructor arguments",
    "lineNumber": 50,
    "properties": [
      {
        "nullable": null,
        "types": [
          "MessageHeader"
        ],
        "spread": false,
        "optional": false,
        "name": "header",
        "description": "The message header, identifying signed and read-only `accountKeys`"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "accounts",
        "description": "All the account keys used by this transaction"
      },
      {
        "nullable": null,
        "types": [
          "Blockhash"
        ],
        "spread": false,
        "optional": false,
        "name": "recentBlockhash",
        "description": "The hash of a recent ledger block"
      },
      {
        "nullable": null,
        "types": [
          "CompiledInstruction[]"
        ],
        "spread": false,
        "optional": false,
        "name": "instructions",
        "description": "Instructions that will be executed in sequence and committed in one atomic transaction if all succeed."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MessageArgs"
    }
  },
  {
    "__docId__": 328,
    "kind": "variable",
    "name": "PUBKEY_LENGTH",
    "memberof": "src/message.js",
    "static": true,
    "longname": "src/message.js~PUBKEY_LENGTH",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 329,
    "kind": "class",
    "name": "Message",
    "memberof": "src/message.js",
    "static": true,
    "longname": "src/message.js~Message",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Message}",
    "description": "List of instructions to be processed atomically",
    "lineNumber": 62,
    "interface": false
  },
  {
    "__docId__": 330,
    "kind": "member",
    "name": "header",
    "memberof": "src/message.js~Message",
    "static": false,
    "longname": "src/message.js~Message#header",
    "access": "public",
    "description": "",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "MessageHeader"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "accountKeys",
    "memberof": "src/message.js~Message",
    "static": false,
    "longname": "src/message.js~Message#accountKeys",
    "access": "public",
    "description": "",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "recentBlockhash",
    "memberof": "src/message.js~Message",
    "static": false,
    "longname": "src/message.js~Message#recentBlockhash",
    "access": "public",
    "description": "",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "Blockhash"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "instructions",
    "memberof": "src/message.js~Message",
    "static": false,
    "longname": "src/message.js~Message#instructions",
    "access": "public",
    "description": "",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "CompiledInstruction[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 334,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/message.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/message.js~Message#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageArgs"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "isAccountWritable",
    "memberof": "src/message.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/message.js~Message#isAccountWritable",
    "access": "public",
    "description": " ",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/message.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/message.js~Message#serialize",
    "access": "public",
    "description": " ",
    "lineNumber": 86,
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "from",
    "memberof": "src/message.js~Message",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/message.js~Message.from",
    "access": "public",
    "description": "Decode a compiled message into a Message object.  ",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer",
          "Uint8Array",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Message"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 342,
    "kind": "file",
    "name": "src/nonce-account.js",
    "content": "// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @private\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    nonceAccount.authorizedPubkey = new PublicKey(\n      nonceAccount.authorizedPubkey,\n    );\n    nonceAccount.nonce = new PublicKey(nonceAccount.nonce).toString();\n    return nonceAccount;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/nonce-account.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "variable",
    "name": "NonceAccountLayout",
    "memberof": "src/nonce-account.js",
    "static": true,
    "longname": "src/nonce-account.js~NonceAccountLayout",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32",
    "lineNumber": 16,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "variable",
    "name": "NONCE_ACCOUNT_LENGTH",
    "memberof": "src/nonce-account.js",
    "static": true,
    "longname": "src/nonce-account.js~NONCE_ACCOUNT_LENGTH",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{NONCE_ACCOUNT_LENGTH}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "class",
    "name": "NonceAccount",
    "memberof": "src/nonce-account.js",
    "static": true,
    "longname": "src/nonce-account.js~NonceAccount",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{NonceAccount}",
    "description": "NonceAccount class",
    "lineNumber": 29,
    "interface": false
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "authorizedPubkey",
    "memberof": "src/nonce-account.js~NonceAccount",
    "static": false,
    "longname": "src/nonce-account.js~NonceAccount#authorizedPubkey",
    "access": "public",
    "description": "",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "nonce",
    "memberof": "src/nonce-account.js~NonceAccount",
    "static": false,
    "longname": "src/nonce-account.js~NonceAccount#nonce",
    "access": "public",
    "description": "",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Blockhash"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "feeCalculator",
    "memberof": "src/nonce-account.js~NonceAccount",
    "static": false,
    "longname": "src/nonce-account.js~NonceAccount#feeCalculator",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "FeeCalculator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "fromAccountData",
    "memberof": "src/nonce-account.js~NonceAccount",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/nonce-account.js~NonceAccount.fromAccountData",
    "access": "public",
    "description": "Deserialize NonceAccount from the account data.  ",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer",
          "Uint8Array",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "account data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NonceAccount"
      ],
      "spread": false,
      "description": "NonceAccount"
    }
  },
  {
    "__docId__": 350,
    "kind": "file",
    "name": "src/publickey.js",
    "content": "// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\n//$FlowFixMe\nlet naclLowLevel = nacl.lowlevel;\n\ntype PublicKeyNonce = [PublicKey, number]; // This type exists to workaround an esdoc parse error\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Uint8Array | Array<number>) {\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      const decoded = bs58.decode(value);\n      if (decoded.length != 32) {\n        throw new Error(`Invalid public key input`);\n      }\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new Error(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, Buffer.from(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(null, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKeyNonce> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n}\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0,\n  0x4a0e,\n  0x1b27,\n  0xc4ee,\n  0xe478,\n  0xad2f,\n  0x1806,\n  0x2f43,\n  0xd7a7,\n  0x3dfb,\n  0x0099,\n  0x2b4d,\n  0xdf0b,\n  0x4fc1,\n  0x2480,\n  0x2b83,\n]);\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/publickey.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 351,
    "kind": "variable",
    "name": "naclLowLevel",
    "memberof": "src/publickey.js",
    "static": true,
    "longname": "src/publickey.js~naclLowLevel",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 352,
    "kind": "variable",
    "name": "MAX_SEED_LENGTH",
    "memberof": "src/publickey.js",
    "static": true,
    "longname": "src/publickey.js~MAX_SEED_LENGTH",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{MAX_SEED_LENGTH}",
    "description": "Maximum length of derived pubkey seed",
    "lineNumber": 16,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "class",
    "name": "PublicKey",
    "memberof": "src/publickey.js",
    "static": true,
    "longname": "src/publickey.js~PublicKey",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{PublicKey}",
    "description": "A public key",
    "lineNumber": 21,
    "interface": false
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "_bn",
    "memberof": "src/publickey.js~PublicKey",
    "static": false,
    "longname": "src/publickey.js~PublicKey#_bn",
    "access": "private",
    "description": "",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "BN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 355,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#constructor",
    "access": "public",
    "description": "Create a new PublicKey object ",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Buffer",
          "Uint8Array",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "equals",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#equals",
    "access": "public",
    "description": "Checks if two publicKeys are equal  ",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "toBase58",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#toBase58",
    "access": "public",
    "description": "Return the base-58 representation of the public key  ",
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "toBuffer",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#toBuffer",
    "access": "public",
    "description": "Return the Buffer representation of the public key  ",
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "toString",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#toString",
    "access": "public",
    "description": "Returns a string representation of the public key  ",
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "createWithSeed",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/publickey.js~PublicKey.createWithSeed",
    "access": "public",
    "description": "Derive a public key from another key, a seed, and a program ID.  ",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "fromPublicKey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<PublicKey>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "createProgramAddress",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/publickey.js~PublicKey.createProgramAddress",
    "access": "public",
    "description": "Derive a program address from seeds and a program ID.  ",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Buffer|Uint8Array>"
        ],
        "spread": false,
        "optional": false,
        "name": "seeds",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<PublicKey>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "findProgramAddress",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/publickey.js~PublicKey.findProgramAddress",
    "access": "public",
    "description": "Find a valid program address\n\nValid program addresses must fall off the ed25519 curve.  This function\niterates a nonce until it finds one that when combined with the seeds\nresults in a valid program address.  ",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Buffer|Uint8Array>"
        ],
        "spread": false,
        "optional": false,
        "name": "seeds",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<PublicKeyNonce>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 365,
    "kind": "function",
    "name": "is_on_curve",
    "memberof": "src/publickey.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/publickey.js~is_on_curve",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 366,
    "kind": "variable",
    "name": "gf1",
    "memberof": "src/publickey.js",
    "static": true,
    "longname": "src/publickey.js~gf1",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 367,
    "kind": "variable",
    "name": "I",
    "memberof": "src/publickey.js",
    "static": true,
    "longname": "src/publickey.js~I",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 368,
    "kind": "function",
    "name": "neq25519",
    "memberof": "src/publickey.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/publickey.js~neq25519",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 369,
    "kind": "file",
    "name": "src/secp256k1-program.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport createKeccakHash from 'keccak';\nimport assert from 'assert';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst PUBLIC_KEY_BYTES = 65;\nconst HASHED_PUBKEY_SERIALIZED_SIZE = 20;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Create a Secp256k1 instruction using a public key params\n * @typedef {Object} CreateSecp256k1InstructionWithPublicKeyParams\n * @property {Buffer | Uint8Array | Array<number>} publicKey\n * @property {Buffer | Uint8Array | Array<number>} message\n * @property {Buffer | Uint8Array | Array<number>} signature\n * @property {number} recoveryId\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {|\n  publicKey: Buffer | Uint8Array | Array<number>,\n  message: Buffer | Uint8Array | Array<number>,\n  signature: Buffer | Uint8Array | Array<number>,\n  recoveryId: number,\n|};\n\n/**\n * Create a Secp256k1 instruction using a private key params\n * @typedef {Object} CreateSecp256k1InstructionWithPrivateKeyParams\n * @property {Buffer | Uint8Array | Array<number>} privateKey\n * @property {Buffer | Uint8Array | Array<number>} message\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {|\n  privateKey: Buffer | Uint8Array | Array<number>,\n  message: Buffer | Uint8Array | Array<number>,\n|};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethPublicKey'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * Public key that identifies the Secp256k program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('KeccakSecp256k11111111111111111111111111111');\n  }\n\n  /**\n   * Create a secp256k1 instruction with public key\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes`,\n    );\n\n    let ethPublicKey;\n    try {\n      ethPublicKey = constructEthPubkey(publicKey);\n    } catch (error) {\n      throw new Error(`Error constructing ethereum public key: ${error}`);\n    }\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethPublicKey.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: 0,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: 0,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: 0,\n        signature: toBuffer(signature),\n        ethPublicKey: ethPublicKey,\n        recoveryId: recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create a secp256k1 instruction with private key\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes`,\n    );\n\n    try {\n      const publicKey = publicKeyCreate(privateKey, false);\n      const messageHash = createKeccakHash('keccak256')\n        .update(toBuffer(message))\n        .digest();\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n\nexport function constructEthPubkey(\n  publicKey: Buffer | Uint8Array | Array<number>,\n): Buffer {\n  return createKeccakHash('keccak256')\n    .update(toBuffer(publicKey.slice(1))) // throw away leading byte\n    .digest()\n    .slice(-HASHED_PUBKEY_SERIALIZED_SIZE);\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/secp256k1-program.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 370,
    "kind": "variable",
    "name": "publicKeyCreate",
    "memberof": "src/secp256k1-program.js",
    "static": true,
    "longname": "src/secp256k1-program.js~publicKeyCreate",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 371,
    "kind": "variable",
    "name": "PRIVATE_KEY_BYTES",
    "memberof": "src/secp256k1-program.js",
    "static": true,
    "longname": "src/secp256k1-program.js~PRIVATE_KEY_BYTES",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 372,
    "kind": "variable",
    "name": "PUBLIC_KEY_BYTES",
    "memberof": "src/secp256k1-program.js",
    "static": true,
    "longname": "src/secp256k1-program.js~PUBLIC_KEY_BYTES",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 373,
    "kind": "variable",
    "name": "HASHED_PUBKEY_SERIALIZED_SIZE",
    "memberof": "src/secp256k1-program.js",
    "static": true,
    "longname": "src/secp256k1-program.js~HASHED_PUBKEY_SERIALIZED_SIZE",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 374,
    "kind": "variable",
    "name": "SIGNATURE_OFFSETS_SERIALIZED_SIZE",
    "memberof": "src/secp256k1-program.js",
    "static": true,
    "longname": "src/secp256k1-program.js~SIGNATURE_OFFSETS_SERIALIZED_SIZE",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 375,
    "kind": "typedef",
    "name": "CreateSecp256k1InstructionWithPublicKeyParams",
    "memberof": "src/secp256k1-program.js",
    "static": true,
    "longname": "src/secp256k1-program.js~CreateSecp256k1InstructionWithPublicKeyParams",
    "access": "public",
    "description": "Create a Secp256k1 instruction using a public key params",
    "lineNumber": 27,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Buffer ",
          " Uint8Array ",
          " Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer ",
          " Uint8Array ",
          " Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer ",
          " Uint8Array ",
          " Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "recoveryId",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CreateSecp256k1InstructionWithPublicKeyParams"
    }
  },
  {
    "__docId__": 376,
    "kind": "typedef",
    "name": "CreateSecp256k1InstructionWithPrivateKeyParams",
    "memberof": "src/secp256k1-program.js",
    "static": true,
    "longname": "src/secp256k1-program.js~CreateSecp256k1InstructionWithPrivateKeyParams",
    "access": "public",
    "description": "Create a Secp256k1 instruction using a private key params",
    "lineNumber": 40,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Buffer ",
          " Uint8Array ",
          " Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "privateKey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer ",
          " Uint8Array ",
          " Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CreateSecp256k1InstructionWithPrivateKeyParams"
    }
  },
  {
    "__docId__": 377,
    "kind": "variable",
    "name": "SECP256K1_INSTRUCTION_LAYOUT",
    "memberof": "src/secp256k1-program.js",
    "static": true,
    "longname": "src/secp256k1-program.js~SECP256K1_INSTRUCTION_LAYOUT",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 378,
    "kind": "class",
    "name": "Secp256k1Program",
    "memberof": "src/secp256k1-program.js",
    "static": true,
    "longname": "src/secp256k1-program.js~Secp256k1Program",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Secp256k1Program}",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 379,
    "kind": "get",
    "name": "programId",
    "memberof": "src/secp256k1-program.js~Secp256k1Program",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/secp256k1-program.js~Secp256k1Program.programId",
    "access": "public",
    "description": "Public key that identifies the Secp256k program ",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "createInstructionWithPublicKey",
    "memberof": "src/secp256k1-program.js~Secp256k1Program",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/secp256k1-program.js~Secp256k1Program.createInstructionWithPublicKey",
    "access": "public",
    "description": "Create a secp256k1 instruction with public key  ",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "CreateSecp256k1InstructionWithPublicKeyParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "createInstructionWithPrivateKey",
    "memberof": "src/secp256k1-program.js~Secp256k1Program",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/secp256k1-program.js~Secp256k1Program.createInstructionWithPrivateKey",
    "access": "public",
    "description": "Create a secp256k1 instruction with private key  ",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "CreateSecp256k1InstructionWithPrivateKeyParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 382,
    "kind": "function",
    "name": "constructEthPubkey",
    "memberof": "src/secp256k1-program.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/secp256k1-program.js~constructEthPubkey",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{constructEthPubkey}",
    "description": " ",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer",
          "Uint8Array",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 383,
    "kind": "file",
    "name": "src/stake-program.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\nexport class Authorized {\n  staker: PublicKey;\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\nexport class Lockup {\n  unixTimestamp: number;\n  epoch: number;\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n}\n\n/**\n * Create stake account transaction params\n * @typedef {Object} CreateStakeAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Create stake account with seed transaction params\n * @typedef {Object} CreateStakeAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Initialize stake instruction params\n * @typedef {Object} InitializeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n */\nexport type InitializeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n|};\n\n/**\n * Delegate stake instruction params\n * @typedef {Object} DelegateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} votePubkey\n */\nexport type DelegateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  votePubkey: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params\n * @typedef {Object} AuthorizeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n * @property {PublicKey} custodianPubkey\n */\nexport type AuthorizeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params using a derived key\n * @typedef {Object} AuthorizeWithSeedStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorityBase\n * @property {string} authoritySeed\n * @property {PublicKey} authorityOwner\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n * @property {PublicKey} custodianPubkey\n */\nexport type AuthorizeWithSeedStakeParams = {|\n  stakePubkey: PublicKey,\n  authorityBase: PublicKey,\n  authoritySeed: string,\n  authorityOwner: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Split stake instruction params\n * @typedef {Object} SplitStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} splitStakePubkey\n * @property {number} lamports\n */\nexport type SplitStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  splitStakePubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Withdraw stake instruction params\n * @typedef {Object} WithdrawStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n * @property {PublicKey} custodianPubkey\n */\nexport type WithdrawStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Deactivate stake instruction params\n * @typedef {Object} DeactivateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type DeactivateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (STAKE_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n * @typedef { 'Initialize' | 'Authorize' | 'AuthorizeWithSeed' | 'Delegate' | 'Split' | 'Withdraw'\n | 'Deactivate' } StakeInstructionType\n */\nexport type StakeInstructionType = $Keys<typeof STAKE_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid stake InstructionType's\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * @typedef {Object} StakeAuthorizationType\n * @property (index} The Stake Authorization index (from solana-stake-program)\n */\nexport type StakeAuthorizationType = {|\n  index: number,\n|};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * Public key that identifies the Stake program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Stake11111111111111111111111111111111111111');\n  }\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static get space(): number {\n    return 200;\n  }\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: authorized.staker.toBuffer(),\n        withdrawer: authorized.withdrawer.toBuffer(),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: lockup.custodian.toBuffer(),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: authorityOwner.toBuffer(),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey,\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/stake-program.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 384,
    "kind": "variable",
    "name": "STAKE_CONFIG_ID",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~STAKE_CONFIG_ID",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{STAKE_CONFIG_ID}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "class",
    "name": "Authorized",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~Authorized",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Authorized}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "staker",
    "memberof": "src/stake-program.js~Authorized",
    "static": false,
    "longname": "src/stake-program.js~Authorized#staker",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "withdrawer",
    "memberof": "src/stake-program.js~Authorized",
    "static": false,
    "longname": "src/stake-program.js~Authorized#withdrawer",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 388,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stake-program.js~Authorized",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stake-program.js~Authorized#constructor",
    "access": "public",
    "description": "Create a new Authorized object ",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "staker",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "withdrawer",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 391,
    "kind": "class",
    "name": "Lockup",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~Lockup",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Lockup}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "unixTimestamp",
    "memberof": "src/stake-program.js~Lockup",
    "static": false,
    "longname": "src/stake-program.js~Lockup#unixTimestamp",
    "access": "public",
    "description": "",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "epoch",
    "memberof": "src/stake-program.js~Lockup",
    "static": false,
    "longname": "src/stake-program.js~Lockup#epoch",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "custodian",
    "memberof": "src/stake-program.js~Lockup",
    "static": false,
    "longname": "src/stake-program.js~Lockup#custodian",
    "access": "public",
    "description": "",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 395,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stake-program.js~Lockup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stake-program.js~Lockup#constructor",
    "access": "public",
    "description": "Create a new Lockup object ",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "unixTimestamp",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "epoch",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "custodian",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 399,
    "kind": "typedef",
    "name": "CreateStakeAccountParams",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~CreateStakeAccountParams",
    "access": "public",
    "description": "Create stake account transaction params",
    "lineNumber": 57,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "fromPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "stakePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Authorized"
        ],
        "spread": false,
        "optional": false,
        "name": "authorized",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Lockup"
        ],
        "spread": false,
        "optional": false,
        "name": "lockup",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CreateStakeAccountParams"
    }
  },
  {
    "__docId__": 400,
    "kind": "typedef",
    "name": "CreateStakeAccountWithSeedParams",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~CreateStakeAccountWithSeedParams",
    "access": "public",
    "description": "Create stake account with seed transaction params",
    "lineNumber": 76,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "fromPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "stakePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "basePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Authorized"
        ],
        "spread": false,
        "optional": false,
        "name": "authorized",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Lockup"
        ],
        "spread": false,
        "optional": false,
        "name": "lockup",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CreateStakeAccountWithSeedParams"
    }
  },
  {
    "__docId__": 401,
    "kind": "typedef",
    "name": "InitializeStakeParams",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~InitializeStakeParams",
    "access": "public",
    "description": "Initialize stake instruction params",
    "lineNumber": 93,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "stakePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Authorized"
        ],
        "spread": false,
        "optional": false,
        "name": "authorized",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Lockup"
        ],
        "spread": false,
        "optional": false,
        "name": "lockup",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InitializeStakeParams"
    }
  },
  {
    "__docId__": 402,
    "kind": "typedef",
    "name": "DelegateStakeParams",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~DelegateStakeParams",
    "access": "public",
    "description": "Delegate stake instruction params",
    "lineNumber": 106,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "stakePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "votePubkey",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "DelegateStakeParams"
    }
  },
  {
    "__docId__": 403,
    "kind": "typedef",
    "name": "AuthorizeStakeParams",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~AuthorizeStakeParams",
    "access": "public",
    "description": "Authorize stake instruction params",
    "lineNumber": 121,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "stakePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "newAuthorizedPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StakeAuthorizationType"
        ],
        "spread": false,
        "optional": false,
        "name": "stakeAuthorizationType",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "custodianPubkey",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AuthorizeStakeParams"
    }
  },
  {
    "__docId__": 404,
    "kind": "typedef",
    "name": "AuthorizeWithSeedStakeParams",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~AuthorizeWithSeedStakeParams",
    "access": "public",
    "description": "Authorize stake instruction params using a derived key",
    "lineNumber": 140,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "stakePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorityBase",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "authoritySeed",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorityOwner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "newAuthorizedPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StakeAuthorizationType"
        ],
        "spread": false,
        "optional": false,
        "name": "stakeAuthorizationType",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "custodianPubkey",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AuthorizeWithSeedStakeParams"
    }
  },
  {
    "__docId__": 405,
    "kind": "typedef",
    "name": "SplitStakeParams",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~SplitStakeParams",
    "access": "public",
    "description": "Split stake instruction params",
    "lineNumber": 158,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "stakePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "splitStakePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SplitStakeParams"
    }
  },
  {
    "__docId__": 406,
    "kind": "typedef",
    "name": "WithdrawStakeParams",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~WithdrawStakeParams",
    "access": "public",
    "description": "Withdraw stake instruction params",
    "lineNumber": 174,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "stakePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "toPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "custodianPubkey",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WithdrawStakeParams"
    }
  },
  {
    "__docId__": 407,
    "kind": "typedef",
    "name": "DeactivateStakeParams",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~DeactivateStakeParams",
    "access": "public",
    "description": "Deactivate stake instruction params",
    "lineNumber": 188,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "stakePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedPubkey",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "DeactivateStakeParams"
    }
  },
  {
    "__docId__": 408,
    "kind": "class",
    "name": "StakeInstruction",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~StakeInstruction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{StakeInstruction}",
    "description": "Stake Instruction class",
    "lineNumber": 196,
    "interface": false
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "decodeInstructionType",
    "memberof": "src/stake-program.js~StakeInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeInstruction.decodeInstructionType",
    "access": "public",
    "description": "Decode a stake instruction and retrieve the instruction type.  ",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StakeInstructionType"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "decodeInitialize",
    "memberof": "src/stake-program.js~StakeInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeInstruction.decodeInitialize",
    "access": "public",
    "description": "Decode a initialize stake instruction and retrieve the instruction params.  ",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InitializeStakeParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "decodeDelegate",
    "memberof": "src/stake-program.js~StakeInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeInstruction.decodeDelegate",
    "access": "public",
    "description": "Decode a delegate stake instruction and retrieve the instruction params.  ",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DelegateStakeParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "decodeAuthorize",
    "memberof": "src/stake-program.js~StakeInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeInstruction.decodeAuthorize",
    "access": "public",
    "description": "Decode an authorize stake instruction and retrieve the instruction params.  ",
    "lineNumber": 270,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AuthorizeStakeParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "decodeAuthorizeWithSeed",
    "memberof": "src/stake-program.js~StakeInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeInstruction.decodeAuthorizeWithSeed",
    "access": "public",
    "description": "Decode an authorize-with-seed stake instruction and retrieve the instruction params.  ",
    "lineNumber": 297,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AuthorizeWithSeedStakeParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "decodeSplit",
    "memberof": "src/stake-program.js~StakeInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeInstruction.decodeSplit",
    "access": "public",
    "description": "Decode a split stake instruction and retrieve the instruction params.  ",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SplitStakeParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "decodeWithdraw",
    "memberof": "src/stake-program.js~StakeInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeInstruction.decodeWithdraw",
    "access": "public",
    "description": "Decode a withdraw stake instruction and retrieve the instruction params.  ",
    "lineNumber": 351,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WithdrawStakeParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "decodeDeactivate",
    "memberof": "src/stake-program.js~StakeInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeInstruction.decodeDeactivate",
    "access": "public",
    "description": "Decode a deactivate stake instruction and retrieve the instruction params.  ",
    "lineNumber": 376,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DeactivateStakeParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "checkProgramId",
    "memberof": "src/stake-program.js~StakeInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeInstruction.checkProgramId",
    "access": "private",
    "description": " ",
    "lineNumber": 392,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "checkKeyLength",
    "memberof": "src/stake-program.js~StakeInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeInstruction.checkKeyLength",
    "access": "private",
    "description": " ",
    "lineNumber": 401,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "expectedLength",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "typedef",
    "name": "StakeInstructionType",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~StakeInstructionType",
    "access": "public",
    "description": "An enumeration of valid StakeInstructionType's",
    "lineNumber": 415,
    "type": {
      "types": [
        " 'Initialize' ",
        " 'Authorize' ",
        " 'AuthorizeWithSeed' ",
        " 'Delegate' ",
        " 'Split' ",
        " 'Withdraw'\n",
        " 'Deactivate' "
      ],
      "optional": false,
      "name": "StakeInstructionType"
    }
  },
  {
    "__docId__": 420,
    "kind": "variable",
    "name": "STAKE_INSTRUCTION_LAYOUTS",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~STAKE_INSTRUCTION_LAYOUTS",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{STAKE_INSTRUCTION_LAYOUTS}",
    "description": "An enumeration of valid stake InstructionType's",
    "lineNumber": 420,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "typedef",
    "name": "StakeAuthorizationType",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~StakeAuthorizationType",
    "access": "public",
    "description": "",
    "lineNumber": 475,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "(index}",
        "description": "The Stake Authorization index (from solana-stake-program)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "StakeAuthorizationType"
    }
  },
  {
    "__docId__": 422,
    "kind": "variable",
    "name": "StakeAuthorizationLayout",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~StakeAuthorizationLayout",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{StakeAuthorizationLayout}",
    "description": "An enumeration of valid StakeAuthorizationLayout's",
    "lineNumber": 482,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "class",
    "name": "StakeProgram",
    "memberof": "src/stake-program.js",
    "static": true,
    "longname": "src/stake-program.js~StakeProgram",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{StakeProgram}",
    "description": "Factory class for transactions to interact with the Stake program",
    "lineNumber": 494,
    "interface": false
  },
  {
    "__docId__": 424,
    "kind": "get",
    "name": "programId",
    "memberof": "src/stake-program.js~StakeProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeProgram.programId",
    "access": "public",
    "description": "Public key that identifies the Stake program ",
    "lineNumber": 498,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 425,
    "kind": "get",
    "name": "space",
    "memberof": "src/stake-program.js~StakeProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeProgram.space",
    "access": "public",
    "description": "Max space of a Stake account\n\nThis is generated from the solana-stake-program StakeState struct as\n`std::mem::size_of::<StakeState>()`:\nhttps://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html ",
    "lineNumber": 509,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/stake-program.js~StakeProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeProgram.initialize",
    "access": "public",
    "description": "Generate an Initialize instruction to add to a Stake Create transaction  ",
    "lineNumber": 516,
    "params": [
      {
        "nullable": null,
        "types": [
          "InitializeStakeParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "createAccountWithSeed",
    "memberof": "src/stake-program.js~StakeProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeProgram.createAccountWithSeed",
    "access": "public",
    "description": "Generate a Transaction that creates a new Stake account at\n  an address generated with `from`, a seed, and the Stake programId  ",
    "lineNumber": 545,
    "params": [
      {
        "nullable": null,
        "types": [
          "CreateStakeAccountWithSeedParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "createAccount",
    "memberof": "src/stake-program.js~StakeProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeProgram.createAccount",
    "access": "public",
    "description": "Generate a Transaction that creates a new Stake account  ",
    "lineNumber": 568,
    "params": [
      {
        "nullable": null,
        "types": [
          "CreateStakeAccountParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "delegate",
    "memberof": "src/stake-program.js~StakeProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeProgram.delegate",
    "access": "public",
    "description": "Generate a Transaction that delegates Stake tokens to a validator\nVote PublicKey. This transaction can also be used to redelegate Stake\nto a new validator Vote PublicKey.  ",
    "lineNumber": 589,
    "params": [
      {
        "nullable": null,
        "types": [
          "DelegateStakeParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "authorize",
    "memberof": "src/stake-program.js~StakeProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeProgram.authorize",
    "access": "public",
    "description": "Generate a Transaction that authorizes a new PublicKey as Staker\nor Withdrawer on the Stake account.  ",
    "lineNumber": 617,
    "params": [
      {
        "nullable": null,
        "types": [
          "AuthorizeStakeParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "authorizeWithSeed",
    "memberof": "src/stake-program.js~StakeProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeProgram.authorizeWithSeed",
    "access": "public",
    "description": "Generate a Transaction that authorizes a new PublicKey as Staker\nor Withdrawer on the Stake account.  ",
    "lineNumber": 651,
    "params": [
      {
        "nullable": null,
        "types": [
          "AuthorizeWithSeedStakeParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "split",
    "memberof": "src/stake-program.js~StakeProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeProgram.split",
    "access": "public",
    "description": "Generate a Transaction that splits Stake tokens into another stake account  ",
    "lineNumber": 688,
    "params": [
      {
        "nullable": null,
        "types": [
          "SplitStakeParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "withdraw",
    "memberof": "src/stake-program.js~StakeProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeProgram.withdraw",
    "access": "public",
    "description": "Generate a Transaction that withdraws deactivated Stake tokens.  ",
    "lineNumber": 718,
    "params": [
      {
        "nullable": null,
        "types": [
          "WithdrawStakeParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "deactivate",
    "memberof": "src/stake-program.js~StakeProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stake-program.js~StakeProgram.deactivate",
    "access": "public",
    "description": "Generate a Transaction that deactivates Stake tokens.  ",
    "lineNumber": 753,
    "params": [
      {
        "nullable": null,
        "types": [
          "DeactivateStakeParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 435,
    "kind": "file",
    "name": "src/system-program.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\n/**\n * Create account system transaction params\n * @typedef {Object} CreateAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer system transaction params\n * @typedef {Object} TransferParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type TransferParams = {|\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Assign system transaction params\n * @typedef {Object} AssignParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} programId\n */\nexport type AssignParams = {|\n  accountPubkey: PublicKey,\n  programId: PublicKey,\n|};\n\n/**\n * Create account with seed system transaction params\n * @typedef {Object} CreateAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Create nonce account system transaction params\n * @typedef {Object} CreateNonceAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {number} lamports\n */\nexport type CreateNonceAccountParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Create nonce account with seed system transaction params\n * @typedef {Object} CreateNonceAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n */\nexport type CreateNonceAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n  basePubkey: PublicKey,\n  seed: string,\n|};\n\n/**\n * Initialize nonce account system instruction params\n * @typedef {Object} InitializeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type InitializeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Advance nonce account system instruction params\n * @typedef {Object} AdvanceNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type AdvanceNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Withdraw nonce account system transaction params\n * @typedef {Object} WithdrawNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Authorize nonce account system transaction params\n * @typedef {Object} AuthorizeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n */\nexport type AuthorizeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n|};\n\n/**\n * Allocate account system transaction params\n * @typedef {Object} AllocateParams\n * @property {PublicKey} accountPubkey\n * @property {number} space\n */\nexport type AllocateParams = {|\n  accountPubkey: PublicKey,\n  space: number,\n|};\n\n/**\n * Allocate account with seed system transaction params\n * @typedef {Object} AllocateWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type AllocateWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Assign account with seed system transaction params\n * @typedef {Object} AssignWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type AssignWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer with seed system transaction params\n * @typedef {Object} TransferWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} basePubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type TransferWithSeedParams = {|\n  fromPubkey: PublicKey,\n  basePubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (SYSTEM_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n * @typedef {'Create' | 'Assign' | 'Transfer' | 'CreateWithSeed'\n | 'AdvanceNonceAccount' | 'WithdrawNonceAccount' | 'InitializeNonceAccount'\n | 'AuthorizeNonceAccount'} SystemInstructionType\n */\nexport type SystemInstructionType = $Keys<typeof SYSTEM_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid system InstructionType's\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('11111111111111111111111111111111');\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {programId: params.programId.toBuffer()});\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: params.basePubkey.toBuffer(),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if (params.basePubkey && params.seed) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.authorizedPubkey.toBuffer(),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.newAuthorizedPubkey.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        space: params.space,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/system-program.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 436,
    "kind": "typedef",
    "name": "CreateAccountParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~CreateAccountParams",
    "access": "public",
    "description": "Create account system transaction params",
    "lineNumber": 21,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "fromPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "newAccountPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CreateAccountParams"
    }
  },
  {
    "__docId__": 437,
    "kind": "typedef",
    "name": "TransferParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~TransferParams",
    "access": "public",
    "description": "Transfer system transaction params",
    "lineNumber": 36,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "fromPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "toPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TransferParams"
    }
  },
  {
    "__docId__": 438,
    "kind": "typedef",
    "name": "AssignParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~AssignParams",
    "access": "public",
    "description": "Assign system transaction params",
    "lineNumber": 48,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "accountPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AssignParams"
    }
  },
  {
    "__docId__": 439,
    "kind": "typedef",
    "name": "CreateAccountWithSeedParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~CreateAccountWithSeedParams",
    "access": "public",
    "description": "Create account with seed system transaction params",
    "lineNumber": 64,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "fromPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "newAccountPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "basePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CreateAccountWithSeedParams"
    }
  },
  {
    "__docId__": 440,
    "kind": "typedef",
    "name": "CreateNonceAccountParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~CreateNonceAccountParams",
    "access": "public",
    "description": "Create nonce account system transaction params",
    "lineNumber": 82,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "fromPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "noncePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CreateNonceAccountParams"
    }
  },
  {
    "__docId__": 441,
    "kind": "typedef",
    "name": "CreateNonceAccountWithSeedParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~CreateNonceAccountWithSeedParams",
    "access": "public",
    "description": "Create nonce account with seed system transaction params",
    "lineNumber": 99,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "fromPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "noncePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "basePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CreateNonceAccountWithSeedParams"
    }
  },
  {
    "__docId__": 442,
    "kind": "typedef",
    "name": "InitializeNonceParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~InitializeNonceParams",
    "access": "public",
    "description": "Initialize nonce account system instruction params",
    "lineNumber": 114,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "noncePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedPubkey",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InitializeNonceParams"
    }
  },
  {
    "__docId__": 443,
    "kind": "typedef",
    "name": "AdvanceNonceParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~AdvanceNonceParams",
    "access": "public",
    "description": "Advance nonce account system instruction params",
    "lineNumber": 125,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "noncePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedPubkey",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AdvanceNonceParams"
    }
  },
  {
    "__docId__": 444,
    "kind": "typedef",
    "name": "WithdrawNonceParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~WithdrawNonceParams",
    "access": "public",
    "description": "Withdraw nonce account system transaction params",
    "lineNumber": 138,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "noncePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "toPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WithdrawNonceParams"
    }
  },
  {
    "__docId__": 445,
    "kind": "typedef",
    "name": "AuthorizeNonceParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~AuthorizeNonceParams",
    "access": "public",
    "description": "Authorize nonce account system transaction params",
    "lineNumber": 152,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "noncePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "newAuthorizedPubkey",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AuthorizeNonceParams"
    }
  },
  {
    "__docId__": 446,
    "kind": "typedef",
    "name": "AllocateParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~AllocateParams",
    "access": "public",
    "description": "Allocate account system transaction params",
    "lineNumber": 164,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "accountPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AllocateParams"
    }
  },
  {
    "__docId__": 447,
    "kind": "typedef",
    "name": "AllocateWithSeedParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~AllocateWithSeedParams",
    "access": "public",
    "description": "Allocate account with seed system transaction params",
    "lineNumber": 178,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "accountPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "basePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AllocateWithSeedParams"
    }
  },
  {
    "__docId__": 448,
    "kind": "typedef",
    "name": "AssignWithSeedParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~AssignWithSeedParams",
    "access": "public",
    "description": "Assign account with seed system transaction params",
    "lineNumber": 194,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "accountPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "basePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AssignWithSeedParams"
    }
  },
  {
    "__docId__": 449,
    "kind": "typedef",
    "name": "TransferWithSeedParams",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~TransferWithSeedParams",
    "access": "public",
    "description": "Transfer with seed system transaction params",
    "lineNumber": 211,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "fromPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "basePubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "toPubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TransferWithSeedParams"
    }
  },
  {
    "__docId__": 450,
    "kind": "class",
    "name": "SystemInstruction",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~SystemInstruction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SystemInstruction}",
    "description": "System Instruction class",
    "lineNumber": 223,
    "interface": false
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "decodeInstructionType",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeInstructionType",
    "access": "public",
    "description": "Decode a system instruction and retrieve the instruction type.  ",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SystemInstructionType"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "decodeCreateAccount",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeCreateAccount",
    "access": "public",
    "description": "Decode a create account system instruction and retrieve the instruction params.  ",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CreateAccountParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "decodeTransfer",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeTransfer",
    "access": "public",
    "description": "Decode a transfer system instruction and retrieve the instruction params.  ",
    "lineNumber": 275,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransferParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "decodeTransferWithSeed",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeTransferWithSeed",
    "access": "public",
    "description": "Decode a transfer with seed system instruction and retrieve the instruction params.  ",
    "lineNumber": 294,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransferWithSeedParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "decodeAllocate",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeAllocate",
    "access": "public",
    "description": "Decode an allocate system instruction and retrieve the instruction params.  ",
    "lineNumber": 318,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AllocateParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "decodeAllocateWithSeed",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeAllocateWithSeed",
    "access": "public",
    "description": "Decode an allocate with seed system instruction and retrieve the instruction params.  ",
    "lineNumber": 336,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AllocateWithSeedParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "decodeAssign",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeAssign",
    "access": "public",
    "description": "Decode an assign system instruction and retrieve the instruction params.  ",
    "lineNumber": 359,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AssignParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "decodeAssignWithSeed",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeAssignWithSeed",
    "access": "public",
    "description": "Decode an assign with seed system instruction and retrieve the instruction params.  ",
    "lineNumber": 377,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AssignWithSeedParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "decodeCreateWithSeed",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeCreateWithSeed",
    "access": "public",
    "description": "Decode a create account with seed system instruction and retrieve the instruction params.  ",
    "lineNumber": 399,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CreateAccountWithSeedParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "decodeNonceInitialize",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeNonceInitialize",
    "access": "public",
    "description": "Decode a nonce initialize system instruction and retrieve the instruction params.  ",
    "lineNumber": 424,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InitializeNonceParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "decodeNonceAdvance",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeNonceAdvance",
    "access": "public",
    "description": "Decode a nonce advance system instruction and retrieve the instruction params.  ",
    "lineNumber": 444,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AdvanceNonceParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "decodeNonceWithdraw",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeNonceWithdraw",
    "access": "public",
    "description": "Decode a nonce withdraw system instruction and retrieve the instruction params.  ",
    "lineNumber": 464,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WithdrawNonceParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "decodeNonceAuthorize",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.decodeNonceAuthorize",
    "access": "public",
    "description": "Decode a nonce authorize system instruction and retrieve the instruction params.  ",
    "lineNumber": 486,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AuthorizeNonceParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "checkProgramId",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.checkProgramId",
    "access": "private",
    "description": " ",
    "lineNumber": 507,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "checkKeyLength",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.checkKeyLength",
    "access": "private",
    "description": " ",
    "lineNumber": 516,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "expectedLength",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 466,
    "kind": "typedef",
    "name": "SystemInstructionType",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~SystemInstructionType",
    "access": "public",
    "description": "An enumeration of valid SystemInstructionType's",
    "lineNumber": 531,
    "type": {
      "types": [
        "'Create' ",
        " 'Assign' ",
        " 'Transfer' ",
        " 'CreateWithSeed'\n",
        " 'AdvanceNonceAccount' ",
        " 'WithdrawNonceAccount' ",
        " 'InitializeNonceAccount'\n",
        " 'AuthorizeNonceAccount'"
      ],
      "optional": false,
      "name": "SystemInstructionType"
    }
  },
  {
    "__docId__": 467,
    "kind": "variable",
    "name": "SYSTEM_INSTRUCTION_LAYOUTS",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~SYSTEM_INSTRUCTION_LAYOUTS",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SYSTEM_INSTRUCTION_LAYOUTS}",
    "description": "An enumeration of valid system InstructionType's",
    "lineNumber": 536,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "class",
    "name": "SystemProgram",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~SystemProgram",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SystemProgram}",
    "description": "Factory class for transactions to interact with the System program",
    "lineNumber": 636,
    "interface": false
  },
  {
    "__docId__": 469,
    "kind": "get",
    "name": "programId",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.programId",
    "access": "public",
    "description": "Public key that identifies the System program ",
    "lineNumber": 640,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "createAccount",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.createAccount",
    "access": "public",
    "description": "Generate a transaction instruction that creates a new account  ",
    "lineNumber": 647,
    "params": [
      {
        "nullable": null,
        "types": [
          "CreateAccountParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "transfer",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.transfer",
    "access": "public",
    "description": "Generate a transaction instruction that transfers lamports from one account to another  ",
    "lineNumber": 668,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransferParams",
          "TransferWithSeedParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "assign",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.assign",
    "access": "public",
    "description": "Generate a transaction instruction that assigns an account to a program  ",
    "lineNumber": 704,
    "params": [
      {
        "nullable": null,
        "types": [
          "AssignParams",
          "AssignWithSeedParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "createAccountWithSeed",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.createAccountWithSeed",
    "access": "public",
    "description": "Generate a transaction instruction that creates a new account at\n  an address generated with `from`, a seed, and programId  ",
    "lineNumber": 737,
    "params": [
      {
        "nullable": null,
        "types": [
          "CreateAccountWithSeedParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "createNonceAccount",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.createNonceAccount",
    "access": "public",
    "description": "Generate a transaction that creates a new Nonce account  ",
    "lineNumber": 762,
    "params": [
      {
        "nullable": null,
        "types": [
          "CreateNonceAccountParams",
          "CreateNonceAccountWithSeedParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "nonceInitialize",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.nonceInitialize",
    "access": "public",
    "description": "Generate an instruction to initialize a Nonce account  ",
    "lineNumber": 802,
    "params": [
      {
        "nullable": null,
        "types": [
          "InitializeNonceParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "nonceAdvance",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.nonceAdvance",
    "access": "public",
    "description": "Generate an instruction to advance the nonce in a Nonce account  ",
    "lineNumber": 828,
    "params": [
      {
        "nullable": null,
        "types": [
          "AdvanceNonceParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "nonceWithdraw",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.nonceWithdraw",
    "access": "public",
    "description": "Generate a transaction instruction that withdraws lamports from a Nonce account  ",
    "lineNumber": 850,
    "params": [
      {
        "nullable": null,
        "types": [
          "WithdrawNonceParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "nonceAuthorize",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.nonceAuthorize",
    "access": "public",
    "description": "Generate a transaction instruction that authorizes a new PublicKey as the authority\non a Nonce account.  ",
    "lineNumber": 879,
    "params": [
      {
        "nullable": null,
        "types": [
          "AuthorizeNonceParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "allocate",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.allocate",
    "access": "public",
    "description": "Generate a transaction instruction that allocates space in an account without funding  ",
    "lineNumber": 898,
    "params": [
      {
        "nullable": null,
        "types": [
          "AllocateParams",
          "AllocateWithSeedParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 480,
    "kind": "file",
    "name": "src/sysvar.js",
    "content": "// @flow\nimport {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/sysvar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 481,
    "kind": "variable",
    "name": "SYSVAR_CLOCK_PUBKEY",
    "memberof": "src/sysvar.js",
    "static": true,
    "longname": "src/sysvar.js~SYSVAR_CLOCK_PUBKEY",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SYSVAR_CLOCK_PUBKEY}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "variable",
    "name": "SYSVAR_RECENT_BLOCKHASHES_PUBKEY",
    "memberof": "src/sysvar.js",
    "static": true,
    "longname": "src/sysvar.js~SYSVAR_RECENT_BLOCKHASHES_PUBKEY",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SYSVAR_RECENT_BLOCKHASHES_PUBKEY}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "variable",
    "name": "SYSVAR_RENT_PUBKEY",
    "memberof": "src/sysvar.js",
    "static": true,
    "longname": "src/sysvar.js~SYSVAR_RENT_PUBKEY",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SYSVAR_RENT_PUBKEY}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "variable",
    "name": "SYSVAR_REWARDS_PUBKEY",
    "memberof": "src/sysvar.js",
    "static": true,
    "longname": "src/sysvar.js~SYSVAR_REWARDS_PUBKEY",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SYSVAR_REWARDS_PUBKEY}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "variable",
    "name": "SYSVAR_STAKE_HISTORY_PUBKEY",
    "memberof": "src/sysvar.js",
    "static": true,
    "longname": "src/sysvar.js~SYSVAR_STAKE_HISTORY_PUBKEY",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SYSVAR_STAKE_HISTORY_PUBKEY}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "variable",
    "name": "SYSVAR_INSTRUCTIONS_PUBKEY",
    "memberof": "src/sysvar.js",
    "static": true,
    "longname": "src/sysvar.js~SYSVAR_INSTRUCTIONS_PUBKEY",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SYSVAR_INSTRUCTIONS_PUBKEY}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 487,
    "kind": "file",
    "name": "src/timing.js",
    "content": "// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @ignore\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @ignore\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/timing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 488,
    "kind": "variable",
    "name": "NUM_TICKS_PER_SECOND",
    "memberof": "src/timing.js",
    "static": true,
    "longname": "src/timing.js~NUM_TICKS_PER_SECOND",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{NUM_TICKS_PER_SECOND}",
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "variable",
    "name": "DEFAULT_TICKS_PER_SLOT",
    "memberof": "src/timing.js",
    "static": true,
    "longname": "src/timing.js~DEFAULT_TICKS_PER_SLOT",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{DEFAULT_TICKS_PER_SLOT}",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 490,
    "kind": "variable",
    "name": "NUM_SLOTS_PER_SECOND",
    "memberof": "src/timing.js",
    "static": true,
    "longname": "src/timing.js~NUM_SLOTS_PER_SECOND",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{NUM_SLOTS_PER_SECOND}",
    "description": "",
    "lineNumber": 19,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "variable",
    "name": "MS_PER_SLOT",
    "memberof": "src/timing.js",
    "static": true,
    "longname": "src/timing.js~MS_PER_SLOT",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{MS_PER_SLOT}",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "file",
    "name": "src/transaction.js",
    "content": "// @flow\n\nimport invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport type {CompiledInstruction} from './message';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n *\n * @typedef {Object} AccountMeta\n * @property {PublicKey} pubkey An account's public key\n * @property {boolean} isSigner True if an instruction requires a transaction signature matching `pubkey`\n * @property {boolean} isWritable True if the `pubkey` can be loaded as a read-write account.\n */\nexport type AccountMeta = {\n  pubkey: PublicKey,\n  isSigner: boolean,\n  isWritable: boolean,\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} data\n */\nexport type TransactionInstructionCtorFields = {|\n  keys?: Array<AccountMeta>,\n  programId?: PublicKey,\n  data?: Buffer,\n|};\n\n/**\n * Configuration object for Transaction.serialize()\n *\n * @typedef {Object} SerializeConfig\n * @property {boolean|undefined} requireAllSignatures Require all transaction signatures be present (default: true)\n * @property {boolean|undefined} verifySignatures Verify provided signatures (default: true)\n */\nexport type SerializeConfig = {\n  requireAllSignatures?: boolean,\n  verifySignatures?: boolean,\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property {?Blockhash} recentBlockhash A recent blockhash\n * @property {?PublicKey} feePayer The transaction fee payer\n * @property {?Array<SignaturePubkeyPair>} signatures One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  recentBlockhash?: Blockhash | null,\n  nonceInfo?: NonceInformation | null,\n  feePayer?: PublicKey | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * NonceInformation to be used to build a Transaction.\n *\n * @typedef {Object} NonceInformation\n * @property {Blockhash} nonce The current Nonce blockhash\n * @property {TransactionInstruction} nonceInstruction AdvanceNonceAccount Instruction\n */\ntype NonceInformation = {|\n  nonce: Blockhash,\n  nonceInstruction: TransactionInstruction,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer: ?PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash: ?Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo: ?NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @private\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @private\n   */\n  _partialSign(message: Message, ...signers: Array<Account>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, signature);\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @private\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @private\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @private\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 493,
    "kind": "typedef",
    "name": "TransactionSignature",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionSignature",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "TransactionSignature"
    }
  },
  {
    "__docId__": 494,
    "kind": "variable",
    "name": "DEFAULT_SIGNATURE",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~DEFAULT_SIGNATURE",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Default (empty) signature\n\nSignatures are 64 bytes in length",
    "lineNumber": 24,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 495,
    "kind": "variable",
    "name": "PACKET_DATA_SIZE",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~PACKET_DATA_SIZE",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{PACKET_DATA_SIZE}",
    "description": "Maximum over-the-wire size of a Transaction\n\n1280 is IPv6 minimum MTU\n40 bytes is the size of the IPv6 header\n8 bytes is the size of the fragment header",
    "lineNumber": 33,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 496,
    "kind": "variable",
    "name": "SIGNATURE_LENGTH",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~SIGNATURE_LENGTH",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 497,
    "kind": "typedef",
    "name": "AccountMeta",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~AccountMeta",
    "access": "public",
    "description": "Account metadata used to define instructions",
    "lineNumber": 45,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "pubkey",
        "description": "An account's public key"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isSigner",
        "description": "True if an instruction requires a transaction signature matching `pubkey`"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isWritable",
        "description": "True if the `pubkey` can be loaded as a read-write account."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AccountMeta"
    }
  },
  {
    "__docId__": 498,
    "kind": "typedef",
    "name": "TransactionInstructionCtorFields",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionInstructionCtorFields",
    "access": "public",
    "description": "List of TransactionInstruction object fields that may be initialized at construction",
    "lineNumber": 59,
    "properties": [
      {
        "nullable": true,
        "types": [
          "Array<PublicKey>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TransactionInstructionCtorFields"
    }
  },
  {
    "__docId__": 499,
    "kind": "typedef",
    "name": "SerializeConfig",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~SerializeConfig",
    "access": "public",
    "description": "Configuration object for Transaction.serialize()",
    "lineNumber": 72,
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "requireAllSignatures",
        "description": "Require all transaction signatures be present (default: true)"
      },
      {
        "nullable": null,
        "types": [
          "boolean",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "verifySignatures",
        "description": "Verify provided signatures (default: true)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SerializeConfig"
    }
  },
  {
    "__docId__": 500,
    "kind": "class",
    "name": "TransactionInstruction",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionInstruction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{TransactionInstruction}",
    "description": "Transaction Instruction class",
    "lineNumber": 80,
    "interface": false
  },
  {
    "__docId__": 501,
    "kind": "member",
    "name": "keys",
    "memberof": "src/transaction.js~TransactionInstruction",
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#keys",
    "access": "public",
    "description": "Public keys to include in this transaction\nBoolean represents whether this pubkey needs to sign the transaction ",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "Array<AccountMeta>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 502,
    "kind": "member",
    "name": "programId",
    "memberof": "src/transaction.js~TransactionInstruction",
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#programId",
    "access": "public",
    "description": "Program Id to execute ",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 503,
    "kind": "member",
    "name": "data",
    "memberof": "src/transaction.js~TransactionInstruction",
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#data",
    "access": "public",
    "description": "Program input ",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 504,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/transaction.js~TransactionInstruction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstructionCtorFields"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 505,
    "kind": "typedef",
    "name": "TransactionCtorFields",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionCtorFields",
    "access": "public",
    "description": "List of Transaction object fields that may be initialized at construction",
    "lineNumber": 119,
    "properties": [
      {
        "nullable": true,
        "types": [
          "Blockhash"
        ],
        "spread": false,
        "optional": false,
        "name": "recentBlockhash",
        "description": "A recent blockhash"
      },
      {
        "nullable": true,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "feePayer",
        "description": "The transaction fee payer"
      },
      {
        "nullable": true,
        "types": [
          "Array<SignaturePubkeyPair>"
        ],
        "spread": false,
        "optional": false,
        "name": "signatures",
        "description": "One or more signatures"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TransactionCtorFields"
    }
  },
  {
    "__docId__": 506,
    "kind": "typedef",
    "name": "NonceInformation",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~NonceInformation",
    "access": "public",
    "description": "NonceInformation to be used to build a Transaction.",
    "lineNumber": 133,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Blockhash"
        ],
        "spread": false,
        "optional": false,
        "name": "nonce",
        "description": "The current Nonce blockhash"
      },
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "nonceInstruction",
        "description": "AdvanceNonceAccount Instruction"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "NonceInformation"
    }
  },
  {
    "__docId__": 507,
    "kind": "class",
    "name": "Transaction",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~Transaction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Transaction}",
    "description": "Transaction class",
    "lineNumber": 141,
    "interface": false
  },
  {
    "__docId__": 508,
    "kind": "member",
    "name": "signatures",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#signatures",
    "access": "public",
    "description": "Signatures for the transaction.  Typically created by invoking the\n`sign()` method ",
    "lineNumber": 146,
    "type": {
      "nullable": null,
      "types": [
        "Array<SignaturePubkeyPair>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 509,
    "kind": "get",
    "name": "signature",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#signature",
    "access": "public",
    "description": "The first (payer) Transaction signature ",
    "lineNumber": 151,
    "type": {
      "nullable": null,
      "types": [
        "Buffer",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 510,
    "kind": "member",
    "name": "feePayer",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#feePayer",
    "access": "public",
    "description": "The transaction fee payer ",
    "lineNumber": 161,
    "type": {
      "nullable": true,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 511,
    "kind": "member",
    "name": "instructions",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#instructions",
    "access": "public",
    "description": "The instructions to atomically execute ",
    "lineNumber": 166,
    "type": {
      "nullable": null,
      "types": [
        "Array<TransactionInstruction>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "recentBlockhash",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#recentBlockhash",
    "access": "public",
    "description": "A recent transaction id. Must be populated by the caller ",
    "lineNumber": 171,
    "type": {
      "nullable": true,
      "types": [
        "Blockhash"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 513,
    "kind": "member",
    "name": "nonceInfo",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#nonceInfo",
    "access": "public",
    "description": "Optional Nonce information. If populated, transaction will use a durable\nNonce hash instead of a recentBlockhash. Must be populated by the caller ",
    "lineNumber": 177,
    "type": {
      "nullable": true,
      "types": [
        "NonceInformation"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 514,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#constructor",
    "access": "public",
    "description": "Construct an empty Transaction ",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionCtorFields"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "add",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#add",
    "access": "public",
    "description": "Add one or more instructions to this Transaction  ",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<Transaction|TransactionInstruction|TransactionInstructionCtorFields>"
        ],
        "spread": true,
        "optional": false,
        "name": "items",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "compileMessage",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#compileMessage",
    "access": "public",
    "description": "Compile transaction data  ",
    "lineNumber": 213,
    "return": {
      "nullable": null,
      "types": [
        "Message"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "_compile",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#_compile",
    "access": "private",
    "description": "  ",
    "lineNumber": 375,
    "return": {
      "nullable": null,
      "types": [
        "Message"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "serializeMessage",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#serializeMessage",
    "access": "public",
    "description": "Get a buffer of the Transaction data that need to be covered by signatures  ",
    "lineNumber": 401,
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "setSigners",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#setSigners",
    "access": "public",
    "description": "Specify the public keys which will be used to sign the Transaction.\nThe first signer will be used as the transaction fee payer account.\n\nSignatures can be added with either `partialSign` or `addSignature` ",
    "lineNumber": 415,
    "deprecated": "Deprecated since v0.84.0. Only the fee payer needs to be\nspecified and it can be set in the Transaction constructor or with the\n`feePayer` property. ",
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<PublicKey>"
        ],
        "spread": true,
        "optional": false,
        "name": "signers",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "sign",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#sign",
    "access": "public",
    "description": "Sign the Transaction with the specified accounts. Multiple signatures may\nbe applied to a Transaction. The first signature is considered \"primary\"\nand is used identify and confirm transactions.\n\nIf the Transaction `feePayer` is not set, the first signer will be used\nas the transaction fee payer account.\n\nTransaction fields should not be modified after the first call to `sign`,\nas doing so may invalidate the signature and cause the Transaction to be\nrejected.\n\nThe Transaction must be assigned a valid `recentBlockhash` before invoking this method ",
    "lineNumber": 448,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<Account>"
        ],
        "spread": true,
        "optional": false,
        "name": "signers",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "partialSign",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#partialSign",
    "access": "public",
    "description": "Partially sign a transaction with the specified accounts. All accounts must\ncorrespond to either the fee payer or a signer account in the transaction\ninstructions.\n\nAll the caveats from the `sign` method apply to `partialSign` ",
    "lineNumber": 483,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<Account>"
        ],
        "spread": true,
        "optional": false,
        "name": "signers",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "_partialSign",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#_partialSign",
    "access": "private",
    "description": " ",
    "lineNumber": 508,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...Array<Account>"
        ],
        "spread": true,
        "optional": false,
        "name": "signers",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "addSignature",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#addSignature",
    "access": "public",
    "description": "Add an externally created signature to a transaction. The public key\nmust correspond to either the fee payer or a signer account in the transaction\ninstructions. ",
    "lineNumber": 521,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "pubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "_addSignature",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#_addSignature",
    "access": "private",
    "description": " ",
    "lineNumber": 529,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "pubkey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "verifySignatures",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#verifySignatures",
    "access": "public",
    "description": "Verify signatures of a complete, signed Transaction  ",
    "lineNumber": 545,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "_verifySignatures",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#_verifySignatures",
    "access": "private",
    "description": "  ",
    "lineNumber": 552,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "signData",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "requireAllSignatures",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#serialize",
    "access": "public",
    "description": "Serialize the Transaction in the wire format.  ",
    "lineNumber": 572,
    "params": [
      {
        "nullable": null,
        "types": [
          "SerializeConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "_serialize",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#_serialize",
    "access": "private",
    "description": "  ",
    "lineNumber": 592,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "signData",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 534,
    "kind": "get",
    "name": "keys",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#keys",
    "access": "private",
    "description": "Deprecated method ",
    "lineNumber": 625,
    "type": {
      "nullable": null,
      "types": [
        "Array<PublicKey>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 535,
    "kind": "get",
    "name": "programId",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#programId",
    "access": "private",
    "description": "Deprecated method ",
    "lineNumber": 634,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 536,
    "kind": "get",
    "name": "data",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#data",
    "access": "private",
    "description": "Deprecated method ",
    "lineNumber": 643,
    "type": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "from",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transaction.js~Transaction.from",
    "access": "public",
    "description": "Parse a wire transaction into a Transaction object.  ",
    "lineNumber": 651,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer",
          "Uint8Array",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "populate",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transaction.js~Transaction.populate",
    "access": "public",
    "description": "Populate Transaction object from message and signatures  ",
    "lineNumber": 669,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "signatures",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 539,
    "kind": "file",
    "name": "src/util/cluster.js",
    "content": "//@flow\n\n/**\n * @private\n */\nconst endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/cluster.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 540,
    "kind": "variable",
    "name": "endpoint",
    "memberof": "src/util/cluster.js",
    "static": true,
    "longname": "src/util/cluster.js~endpoint",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "{\"http\": *, \"https\": *}"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "function",
    "name": "clusterApiUrl",
    "memberof": "src/util/cluster.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/cluster.js~clusterApiUrl",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{clusterApiUrl}",
    "description": "Retrieves the RPC API URL for the specified cluster",
    "lineNumber": 24,
    "params": [
      {
        "name": "cluster",
        "types": [
          "*"
        ]
      },
      {
        "name": "tls",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 542,
    "kind": "file",
    "name": "src/util/promise-timeout.js",
    "content": "// @flow\n\nexport function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: TimeoutID;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/promise-timeout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 543,
    "kind": "function",
    "name": "promiseTimeout",
    "memberof": "src/util/promise-timeout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/promise-timeout.js~promiseTimeout",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{promiseTimeout}",
    "description": " ",
    "lineNumber": 3,
    "params": [
      {
        "nullable": null,
        "types": [
          "Promise<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "promise",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "timeoutMs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<T|nullliteral>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 544,
    "kind": "file",
    "name": "src/util/send-and-confirm-raw-transaction.js",
    "content": "// @flow\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/send-and-confirm-raw-transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 545,
    "kind": "function",
    "name": "sendAndConfirmRawTransaction",
    "memberof": "src/util/send-and-confirm-raw-transaction.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/util/send-and-confirm-raw-transaction.js~sendAndConfirmRawTransaction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{sendAndConfirmRawTransaction}",
    "description": "Send and confirm a raw transaction\n\nIf `commitment` option is not specified, defaults to 'max' commitment.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<TransactionSignature>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTransaction",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ConfirmOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 546,
    "kind": "file",
    "name": "src/util/send-and-confirm-transaction.js",
    "content": "// @flow\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {Account} from '../account';\nimport type {ConfirmOptions} from '../connection';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/send-and-confirm-transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 547,
    "kind": "function",
    "name": "sendAndConfirmTransaction",
    "memberof": "src/util/send-and-confirm-transaction.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/util/send-and-confirm-transaction.js~sendAndConfirmTransaction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{sendAndConfirmTransaction}",
    "description": "Sign, send and confirm a transaction.\n\nIf `commitment` option is not specified, defaults to 'max' commitment.",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<TransactionSignature>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Transaction"
        ],
        "spread": false,
        "optional": false,
        "name": "transaction",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Account>"
        ],
        "spread": false,
        "optional": false,
        "name": "signers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ConfirmOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 548,
    "kind": "file",
    "name": "src/util/shortvec-encoding.js",
    "content": "// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/shortvec-encoding.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 549,
    "kind": "function",
    "name": "decodeLength",
    "memberof": "src/util/shortvec-encoding.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/shortvec-encoding.js~decodeLength",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{decodeLength}",
    "description": " ",
    "lineNumber": 3,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "bytes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 550,
    "kind": "function",
    "name": "encodeLength",
    "memberof": "src/util/shortvec-encoding.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/shortvec-encoding.js~encodeLength",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{encodeLength}",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "bytes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "len",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 551,
    "kind": "file",
    "name": "src/util/sleep.js",
    "content": "// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/sleep.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 552,
    "kind": "function",
    "name": "sleep",
    "memberof": "src/util/sleep.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/sleep.js~sleep",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{sleep}",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ms",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 553,
    "kind": "file",
    "name": "src/util/to-buffer.js",
    "content": "// @flow\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/to-buffer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 554,
    "kind": "function",
    "name": "toBuffer",
    "memberof": "src/util/to-buffer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/to-buffer.js~toBuffer",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{toBuffer}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 555,
    "kind": "file",
    "name": "src/validator-info.js",
    "content": "// @flow\n\nimport {struct} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @private\n */\ntype ConfigKey = {|\n  publicKey: PublicKey,\n  isSigner: boolean,\n|};\n\n/**\n * Info used to identity validators.\n *\n * @typedef {Object} Info\n * @property {string} name validator name\n * @property {?string} website optional, validator website\n * @property {?string} details optional, extra information the validator chose to share\n * @property {?string} keybaseUsername optional, used to identify validators on keybase.io\n */\nexport type Info = {|\n  name: string,\n  website?: string,\n  details?: string,\n  keybaseUsername?: string,\n|};\n\nconst InfoString = struct({\n  name: 'string',\n  website: 'string?',\n  details: 'string?',\n  keybaseUsername: 'string?',\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = InfoString(JSON.parse(rawInfo));\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/validator-info.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 556,
    "kind": "variable",
    "name": "VALIDATOR_INFO_KEY",
    "memberof": "src/validator-info.js",
    "static": true,
    "longname": "src/validator-info.js~VALIDATOR_INFO_KEY",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{VALIDATOR_INFO_KEY}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 557,
    "kind": "typedef",
    "name": "Info",
    "memberof": "src/validator-info.js",
    "static": true,
    "longname": "src/validator-info.js~Info",
    "access": "public",
    "description": "Info used to identity validators.",
    "lineNumber": 30,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "validator name"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "website",
        "description": "optional, validator website"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "details",
        "description": "optional, extra information the validator chose to share"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keybaseUsername",
        "description": "optional, used to identify validators on keybase.io"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Info"
    }
  },
  {
    "__docId__": 558,
    "kind": "variable",
    "name": "InfoString",
    "memberof": "src/validator-info.js",
    "static": true,
    "longname": "src/validator-info.js~InfoString",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 559,
    "kind": "class",
    "name": "ValidatorInfo",
    "memberof": "src/validator-info.js",
    "static": true,
    "longname": "src/validator-info.js~ValidatorInfo",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{ValidatorInfo}",
    "description": "ValidatorInfo class",
    "lineNumber": 47,
    "interface": false
  },
  {
    "__docId__": 560,
    "kind": "member",
    "name": "key",
    "memberof": "src/validator-info.js~ValidatorInfo",
    "static": false,
    "longname": "src/validator-info.js~ValidatorInfo#key",
    "access": "public",
    "description": "validator public key ",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 561,
    "kind": "member",
    "name": "info",
    "memberof": "src/validator-info.js~ValidatorInfo",
    "static": false,
    "longname": "src/validator-info.js~ValidatorInfo#info",
    "access": "public",
    "description": "validator information ",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "Info"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 562,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/validator-info.js~ValidatorInfo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validator-info.js~ValidatorInfo#constructor",
    "access": "public",
    "description": "Construct a valid ValidatorInfo ",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "validator public key"
      },
      {
        "nullable": null,
        "types": [
          "Info"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "validator information"
      }
    ]
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "fromConfigData",
    "memberof": "src/validator-info.js~ValidatorInfo",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator-info.js~ValidatorInfo.fromConfigData",
    "access": "public",
    "description": "Deserialize ValidatorInfo from the config account data. Exactly two config\nkeys are required in the data.  ",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer",
          "Uint8Array",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "config account data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidatorInfo",
        "nullliteral"
      ],
      "spread": false,
      "description": "null if info was not found"
    }
  },
  {
    "__docId__": 566,
    "kind": "file",
    "name": "src/vote-account.js",
    "content": "// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {|\n  slot: number,\n  confirmationCount: number,\n|};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {|\n  epoch: number,\n  credits: number,\n  prevCredits: number,\n|};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @private\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n    va.nodePubkey = new PublicKey(va.nodePubkey);\n    va.authorizedVoterPubkey = new PublicKey(va.authorizedVoterPubkey);\n    va.authorizedWithdrawerPubkey = new PublicKey(\n      va.authorizedWithdrawerPubkey,\n    );\n    if (!va.rootSlotValid) {\n      va.rootSlot = null;\n    }\n    return va;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/vote-account.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 567,
    "kind": "variable",
    "name": "VOTE_PROGRAM_ID",
    "memberof": "src/vote-account.js",
    "static": true,
    "longname": "src/vote-account.js~VOTE_PROGRAM_ID",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{VOTE_PROGRAM_ID}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 568,
    "kind": "variable",
    "name": "VoteAccountLayout",
    "memberof": "src/vote-account.js",
    "static": true,
    "longname": "src/vote-account.js~VoteAccountLayout",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88",
    "lineNumber": 31,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 569,
    "kind": "class",
    "name": "VoteAccount",
    "memberof": "src/vote-account.js",
    "static": true,
    "longname": "src/vote-account.js~VoteAccount",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{VoteAccount}",
    "description": "VoteAccount class",
    "lineNumber": 65,
    "interface": false
  },
  {
    "__docId__": 570,
    "kind": "member",
    "name": "nodePubkey",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#nodePubkey",
    "access": "public",
    "description": "",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 571,
    "kind": "member",
    "name": "authorizedVoterPubkey",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#authorizedVoterPubkey",
    "access": "public",
    "description": "",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 572,
    "kind": "member",
    "name": "authorizedWithdrawerPubkey",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#authorizedWithdrawerPubkey",
    "access": "public",
    "description": "",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 573,
    "kind": "member",
    "name": "commission",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#commission",
    "access": "public",
    "description": "",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 574,
    "kind": "member",
    "name": "votes",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#votes",
    "access": "public",
    "description": "",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "Array<Lockout>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 575,
    "kind": "member",
    "name": "rootSlot",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#rootSlot",
    "access": "public",
    "description": "",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "number",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 576,
    "kind": "member",
    "name": "epoch",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#epoch",
    "access": "public",
    "description": "",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 577,
    "kind": "member",
    "name": "credits",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#credits",
    "access": "public",
    "description": "",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 578,
    "kind": "member",
    "name": "lastEpochCredits",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#lastEpochCredits",
    "access": "public",
    "description": "",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 579,
    "kind": "member",
    "name": "epochCredits",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#epochCredits",
    "access": "public",
    "description": "",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Array<EpochCredits>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "fromAccountData",
    "memberof": "src/vote-account.js~VoteAccount",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/vote-account.js~VoteAccount.fromAccountData",
    "access": "public",
    "description": "Deserialize VoteAccount from the account data.  ",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer",
          "Uint8Array",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "account data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VoteAccount"
      ],
      "spread": false,
      "description": "VoteAccount"
    }
  },
  {
    "kind": "index",
    "content": "[![Build status][travis-image]][travis-url]\n[![codecov][codecov-image]][codecov-url]\n[![esdoc][esdoc-image]][esdoc-url]\n<br>\n[![npm][npm-image]][npm-url]\n[![npm-downloads][npm-downloads-image]][npm-url]\n<br>\n[![semantic-release][semantic-release-image]][semantic-release-url]\n[![code-style-prettier][code-style-prettier-image]][code-style-prettier-url]\n\n[travis-image]: https://api.travis-ci.org/solana-labs/solana-web3.js.svg?branch=master\n[travis-url]: https://travis-ci.org/solana-labs/solana-web3.js\n[codecov-image]: https://codecov.io/gh/solana-labs/solana-web3.js/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/solana-labs/solana-web3.js\n[esdoc-image]: https://solana-labs.github.io/solana-web3.js/badge.svg\n[npm-image]: https://img.shields.io/npm/v/@solana/web3.js.svg?style=flat\n[npm-downloads-image]: https://img.shields.io/npm/dm/@solana/web3.js.svg?style=flat\n[esdoc-url]: https://solana-labs.github.io/solana-web3.js/\n[npm-url]: https://www.npmjs.com/package/@solana/web3.js\n[semantic-release-image]: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg\n[semantic-release-url]: https://github.com/semantic-release/semantic-release\n[code-style-prettier-image]: https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square\n[code-style-prettier-url]: https://github.com/prettier/prettier\n\n# Solana JavaScript API\n\nThis is the Solana Javascript API built on the Solana [JSON RPC API](https://docs.solana.com/apps/jsonrpc-api)\n\n[Latest API Documentation](https://solana-labs.github.io/solana-web3.js/)\n\n\n## Installation\n\n### Yarn\n```\n$ yarn add @solana/web3.js\n```\n\n### npm\n```\n$ npm install --save @solana/web3.js\n```\n\n### Browser bundle\n```html\n<script src=\"https://github.com/solana-labs/solana-web3.js/releases/download/v0.0.6/solanaWeb3.min.js\"></script>\n```\n\n\n### Development Environment Setup\nTo build and run tests:\n1. Install Rust from https://rustup.rs/\n2. Install the latest Solana release from https://docs.solana.com/cli/install-solana-cli-tools\n\n## Usage\n\n### Javascript\n```js\nconst solanaWeb3 = require('@solana/web3.js');\nconsole.log(solanaWeb3);\n```\n\n### ES6\n```js\nimport solanaWeb3 from '@solana/web3.js';\nconsole.log(solanaWeb3);\n```\n\n### Browser bundle\n```js\n// `solanaWeb3` is provided in the global namespace by the `solanaWeb3.min.js` script bundle.\nconsole.log(solanaWeb3);\n```\n\n## Flow\n\nA [Flow library definition](https://flow.org/en/docs/libdefs/) is provided at\n[module.flow.js](https://github.com/solana-labs/solana-web3.js/tree/master/module.flow.js).\nAdd the following line under the [libs] section of your project's .flowconfig to\nactivate it:\n```ini\n[libs]\nnode_modules/@solana/web3.js/module.flow.js\n```\n\n## Examples\nSee the [examples/](https://github.com/solana-labs/solana-web3.js/tree/master/examples) directory for small snippets.\n\nStandalone examples:\n* Message feed (BPF Rust and C): https://github.com/solana-labs/example-messagefeed\n* Tic-tac-toe (BPF C): https://github.com/solana-labs/example-tictactoe\n* Web wallet: https://github.com/solana-labs/example-webwallet\n\n## Releases\nReleases are available on [Github](https://github.com/solana-labs/solana-web3.js/releases)\nand [npmjs.com](https://www.npmjs.com/package/@solana/web3.js)\n\nEach Github release features a tarball containing API documentation and a\nminified version of the module suitable for direct use in a browser environment\n(&lt;script&gt; tag)\n\n## Deprecated\n\n### Local Network\n\n**Please use `solana-test-validator` from the latest Solana release instead of the information in this section**\n\nThe `solana-localnet` program is provided to easily start a test Solana cluster\nlocally on your machine.  Docker must be installed.  The JSON RPC endpoint of\nthe local cluster is `http://localhost:8899`.\n\nTo start, first fetch the latest Docker image by running:\n```bash\n$ npx solana-localnet update\n```\n\nThen run the following command to start the cluster\n```bash\n$ npx solana-localnet up\n```\n\nWhile the cluster is running logs are available with:\n```bash\n$ npx solana-localnet logs -f\n```\n\nStop the cluster with:\n```bash\n$ npx solana-localnet down\n```\n\n### BPF program development\n\n**Please use `cargo build-bpf` from the latest Solana release instead of the information in this section**\n\nThe Solana BPF SDK is located in the `bpf-sdk/` subdirectory if you installed\nsolana-web3.js from npmjs.com.\n\nFrom a git clone, run `npm run bpf-sdk:install` to fetch the latest BPF SDK.\n\nAdditionally Rust must be installed to build Rust BPF programs such as\n`examples/bpf-rust-noop/`.  See https://www.rust-lang.org/install.html for\ninstallation details.\n",
    "longname": "/home/travis/build/solana-labs/solana-web3.js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@solana/web3.js\",\n  \"version\": \"0.0.0-development\",\n  \"description\": \"Solana Javascript API\",\n  \"keywords\": [\n    \"api\",\n    \"blockchain\"\n  ],\n  \"license\": \"MIT\",\n  \"author\": \"Solana Maintainers <maintainers@solana.com>\",\n  \"homepage\": \"https://solana.com/\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/solana-labs/solana-web3.js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"http://github.com/solana-labs/solana-web3.js.git/issues\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"main\": \"lib/index.cjs.js\",\n  \"module\": \"lib/index.esm.js\",\n  \"types\": \"lib/index.d.ts\",\n  \"bin\": {\n    \"solana-bpf-sdk-install\": \"bin/bpf-sdk-install.sh\",\n    \"solana-localnet\": \"bin/localnet.sh\"\n  },\n  \"testnetDefaultChannel\": \"edge\",\n  \"files\": [\n    \"/bin\",\n    \"/doc\",\n    \"/examples\",\n    \"/bpf-sdk\",\n    \"/lib\",\n    \"/module.flow.js\",\n    \"/src\"\n  ],\n  \"scripts\": {\n    \"bpf-sdk:install\": \"npm run clean:fixtures; bin/bpf-sdk-install.sh .\",\n    \"bpf-sdk:remove-symlinks\": \"find bpf-sdk -type l -print -exec cp {} {}.tmp \\\\; -exec mv {}.tmp {} \\\\;\",\n    \"build\": \"cross-env NODE_ENV=production rollup -c\",\n    \"build:fixtures\": \"set -ex; ./test/fixtures/noop-c/build.sh; ./test/fixtures/noop-rust/build.sh\",\n    \"clean:fixtures\": \"make -C examples/bpf-c-noop clean \",\n    \"clean\": \"rimraf ./coverage ./lib\",\n    \"codecov\": \"set -ex; npm run test:cover; cat ./coverage/lcov.info | codecov\",\n    \"dev\": \"cross-env NODE_ENV=development rollup -c\",\n    \"doc\": \"set -ex; esdoc; node -p '\\\"\\\\nDocumentation coverage: \\\" + require(\\\"./doc/coverage.json\\\").coverage'\",\n    \"defs\": \"set -ex; flow check-contents < module.flow.js; tsc module.d.ts\",\n    \"doc:watch\": \"watch 'npm run doc' . --wait=1 --ignoreDirectoryPattern=/doc/\",\n    \"examples\": \"set -ex; for example in examples/*.js; do node $example; done\",\n    \"flow\": \"set -ex; flow stop; flow\",\n    \"flow:stop\": \"flow stop\",\n    \"flow:watch\": \"flow stop; watch 'flow' . --wait=1 --ignoreDirectoryPattern=/doc/\",\n    \"lint\": \"set -ex; npm run pretty; eslint . --ext .js,.ts\",\n    \"lint:fix\": \"npm run pretty:fix && eslint . --fix\",\n    \"lint:watch\": \"watch 'npm run lint:fix' . --wait=1 --ignoreDirectoryPattern=/doc/\",\n    \"localnet:down\": \"bin/localnet.sh down\",\n    \"localnet:logs\": \"bin/localnet.sh logs -f\",\n    \"localnet:up\": \"bin/localnet.sh up\",\n    \"localnet:update\": \"bin/localnet.sh update\",\n    \"ok\": \"run-s lint flow test doc defs\",\n    \"prepare\": \"run-s clean bpf-sdk:install bpf-sdk:remove-symlinks build\",\n    \"pretty\": \"prettier --check '{,{examples,src,test}/**/}*.{j,t}s'\",\n    \"pretty:fix\": \"prettier --write '{,{examples,src,test}/**/}*.{j,t}s'\",\n    \"re\": \"semantic-release --repository-url git@github.com:solana-labs/solana-web3.js.git\",\n    \"test\": \"npm run build:fixtures && cross-env NODE_ENV=test jest --useStderr\",\n    \"test:cover\": \"npm run build:fixtures && cross-env NODE_ENV=test jest --coverage --useStderr\",\n    \"test:live\": \"npm run build:fixtures && cross-env NODE_ENV=test TEST_LIVE=1 jest --useStderr\",\n    \"test:live-with-test-validator\": \"start-server-and-test 'solana-test-validator --reset --quiet' http://localhost:8899/health test:live\",\n    \"test:watch\": \"npm run build:fixtures && cross-env NODE_ENV=test jest --watch --useStderr\"\n  },\n  \"jest\": {\n    \"testEnvironment\": \"./jest-environment\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.3.1\",\n    \"bn.js\": \"^5.0.0\",\n    \"bs58\": \"^4.0.1\",\n    \"buffer\": \"^6.0.1\",\n    \"buffer-layout\": \"^1.2.0\",\n    \"crypto-hash\": \"^1.2.2\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"jayson\": \"^3.0.1\",\n    \"keccak\": \"^3.0.1\",\n    \"mz\": \"^2.7.0\",\n    \"node-fetch\": \"^2.2.0\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"rpc-websockets\": \"^7.4.2\",\n    \"secp256k1\": \"^4.0.2\",\n    \"superstruct\": \"^0.8.3\",\n    \"tweetnacl\": \"^1.0.0\",\n    \"ws\": \"^7.0.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.3.3\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.3.3\",\n    \"@babel/plugin-proposal-function-bind\": \"^7.2.0\",\n    \"@babel/plugin-transform-runtime\": \"^7.2.0\",\n    \"@babel/preset-env\": \"^7.3.1\",\n    \"@babel/preset-flow\": \"^7.0.0\",\n    \"@commitlint/config-conventional\": \"^11.0.0\",\n    \"@commitlint/travis-cli\": \"^11.0.0\",\n    \"@solana/spl-token\": \"^0.0.13\",\n    \"@typescript-eslint/eslint-plugin\": \"^4.0.0\",\n    \"@typescript-eslint/parser\": \"^3.10.1\",\n    \"acorn\": \"^8.0.1\",\n    \"babel-eslint\": \"10.1.0\",\n    \"babel-plugin-module-resolver\": \"4.0.0\",\n    \"codecov\": \"^3.0.4\",\n    \"cross-env\": \"7.0.3\",\n    \"elfy\": \"^1.0.0\",\n    \"enzyme\": \"3.11.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-flow-type-plugin\": \"^1.1.0\",\n    \"esdoc-importpath-plugin\": \"^1.0.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"7.18.0\",\n    \"eslint-config-prettier\": \"^7.0.0\",\n    \"eslint-plugin-flowtype\": \"^5.2.0\",\n    \"eslint-plugin-import\": \"2.22.1\",\n    \"eslint-plugin-jest\": \"22.19.0\",\n    \"eslint-plugin-prettier\": \"^3.0.0\",\n    \"flow-bin\": \"0.130.0\",\n    \"flow-typed\": \"3.2.1\",\n    \"fs-file-tree\": \"1.1.1\",\n    \"jest\": \"26.6.3\",\n    \"marked\": \"^1.1.0\",\n    \"prettier\": \"^2.0.0\",\n    \"rimraf\": \"3.0.2\",\n    \"rollup\": \"2.37.1\",\n    \"rollup-plugin-babel\": \"^4.3.2\",\n    \"rollup-plugin-commonjs\": \"^10.0.0\",\n    \"rollup-plugin-copy\": \"^3.3.0\",\n    \"rollup-plugin-json\": \"^4.0.0\",\n    \"rollup-plugin-node-builtins\": \"^2.1.2\",\n    \"rollup-plugin-node-globals\": \"^1.2.1\",\n    \"rollup-plugin-node-resolve\": \"5.2.0\",\n    \"rollup-plugin-replace\": \"2.2.0\",\n    \"rollup-plugin-terser\": \"^7.0.0\",\n    \"semantic-release\": \"^17.0.2\",\n    \"start-server-and-test\": \"^1.11.6\",\n    \"typescript\": \"^4.0.2\",\n    \"watch\": \"^1.0.2\"\n  }\n}\n",
    "longname": "/home/travis/build/solana-labs/solana-web3.js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]