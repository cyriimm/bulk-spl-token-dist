[{"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/index.js":"1","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/App.js":"2","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/serviceWorker.js":"3","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/connected-wallets.js":"4","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/wallet.js":"5","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/page.js":"6","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/PopupPage.js":"7","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/NavigationFrame.js":"8","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/WalletPage.js":"9","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/LoadingIndicator.js":"10","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/names.js":"11","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/ConnectionsPage.js":"12","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/LoginPage.js":"13","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/utils.ts":"14","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/connection.tsx":"15","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ExportAccountDialog.js":"16","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/BalancesList.js":"17","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/localStorage.js":"18","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/wallet-seed.js":"19","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/instructions.js":"20","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/data.js":"21","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignFormContent.js":"22","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignTransactionFormContent.js":"23","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/clusters.js":"24","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddHarwareWalletDialog.js":"25","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SolanaIcon.js":"26","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DeleteMnemonicDialog.js":"27","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddAccountDialog.js":"28","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ConnectionIcon.js":"29","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DebugButtons.js":"30","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ConnectionsList.js":"31","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ErrorLogViewer.js":"32","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/factory.js":"33","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DialogForm.js":"34","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/notifications.js":"35","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/fetch-loop.ts":"36","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MergeAccountsDialog.js":"37","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/EditAccountNameDialog.js":"38","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MintTokenDialog.js":"39","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/ledger.js":"40","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/index.js":"41","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/TokenInstruction.js":"42","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/ledger-core.js":"43","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/swap/eth.js":"44","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/LabelValue.js":"45","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/config.js":"46","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/swap/api.js":"47","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/DexInstruction.js":"48","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/SystemInstruction.js":"49","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/UnknownInstruction.js":"50","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/NewOrder.js":"51","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/transactions.js":"52","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/TokenIcon.js":"53","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/CloseTokenAccountButton.js":"54","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DepositDialog.js":"55","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SendDialog.js":"56","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddTokenDialog.js":"57","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/markets.ts":"58","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/TokenInfoDialog.js":"59","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/CopyableDisplay.js":"60","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/EthFeeEstimate.tsx":"61","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/Queue.js":"62","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MultiTokenSender.jsx":"63"},{"size":504,"mtime":1630540576231,"results":"64","hashOfConfig":"65"},{"size":2693,"mtime":1630543402474,"results":"66","hashOfConfig":"65"},{"size":5103,"mtime":1630540576232,"results":"67","hashOfConfig":"65"},{"size":975,"mtime":1630540576232,"results":"68","hashOfConfig":"65"},{"size":14833,"mtime":1630567350092,"results":"69","hashOfConfig":"65"},{"size":385,"mtime":1630540576233,"results":"70","hashOfConfig":"65"},{"size":14806,"mtime":1630540576232,"results":"71","hashOfConfig":"65"},{"size":12716,"mtime":1630542912135,"results":"72","hashOfConfig":"65"},{"size":1352,"mtime":1630542247076,"results":"73","hashOfConfig":"65"},{"size":913,"mtime":1630540576230,"results":"74","hashOfConfig":"65"},{"size":13522,"mtime":1630553750566,"results":"75","hashOfConfig":"65"},{"size":866,"mtime":1630540576232,"results":"76","hashOfConfig":"65"},{"size":15428,"mtime":1630540576232,"results":"77","hashOfConfig":"65"},{"size":2971,"mtime":1630540576234,"results":"78","hashOfConfig":"65"},{"size":5811,"mtime":1630582674705,"results":"79","hashOfConfig":"65"},{"size":2369,"mtime":1630540576230,"results":"80","hashOfConfig":"65"},{"size":22675,"mtime":1630593375001,"results":"81","hashOfConfig":"65"},{"size":2150,"mtime":1630540576234,"results":"82","hashOfConfig":"65"},{"size":6821,"mtime":1630540576234,"results":"83","hashOfConfig":"65"},{"size":5215,"mtime":1630540576233,"results":"84","hashOfConfig":"65"},{"size":967,"mtime":1630554414822,"results":"85","hashOfConfig":"65"},{"size":2668,"mtime":1630540576231,"results":"86","hashOfConfig":"65"},{"size":9935,"mtime":1630540576231,"results":"87","hashOfConfig":"65"},{"size":584,"mtime":1630540576232,"results":"88","hashOfConfig":"65"},{"size":5944,"mtime":1630540576229,"results":"89","hashOfConfig":"65"},{"size":929,"mtime":1630540576231,"results":"90","hashOfConfig":"65"},{"size":2212,"mtime":1630540576230,"results":"91","hashOfConfig":"65"},{"size":2588,"mtime":1630540576229,"results":"92","hashOfConfig":"65"},{"size":825,"mtime":1630540576229,"results":"93","hashOfConfig":"65"},{"size":3375,"mtime":1630540576230,"results":"94","hashOfConfig":"65"},{"size":4444,"mtime":1630540576229,"results":"95","hashOfConfig":"65"},{"size":3157,"mtime":1630540576230,"results":"96","hashOfConfig":"65"},{"size":355,"mtime":1630540576234,"results":"97","hashOfConfig":"65"},{"size":720,"mtime":1630540576230,"results":"98","hashOfConfig":"65"},{"size":3095,"mtime":1630540576233,"results":"99","hashOfConfig":"65"},{"size":5715,"mtime":1630540576233,"results":"100","hashOfConfig":"65"},{"size":10219,"mtime":1630540576230,"results":"101","hashOfConfig":"65"},{"size":1316,"mtime":1630540576230,"results":"102","hashOfConfig":"65"},{"size":3929,"mtime":1630540576230,"results":"103","hashOfConfig":"65"},{"size":1819,"mtime":1630540576234,"results":"104","hashOfConfig":"65"},{"size":11114,"mtime":1630582506263,"results":"105","hashOfConfig":"65"},{"size":2119,"mtime":1630540576231,"results":"106","hashOfConfig":"65"},{"size":4603,"mtime":1630540576234,"results":"107","hashOfConfig":"65"},{"size":6767,"mtime":1630540576233,"results":"108","hashOfConfig":"65"},{"size":501,"mtime":1630540576231,"results":"109","hashOfConfig":"65"},{"size":125,"mtime":1630540576232,"results":"110","hashOfConfig":"65"},{"size":1257,"mtime":1630540576233,"results":"111","hashOfConfig":"65"},{"size":2261,"mtime":1630540576231,"results":"112","hashOfConfig":"65"},{"size":1657,"mtime":1630540576231,"results":"113","hashOfConfig":"65"},{"size":1342,"mtime":1630540576231,"results":"114","hashOfConfig":"65"},{"size":1983,"mtime":1630540576231,"results":"115","hashOfConfig":"65"},{"size":13590,"mtime":1630540576234,"results":"116","hashOfConfig":"65"},{"size":626,"mtime":1630540576231,"results":"117","hashOfConfig":"65"},{"size":1727,"mtime":1630540576229,"results":"118","hashOfConfig":"65"},{"size":10401,"mtime":1630540576230,"results":"119","hashOfConfig":"65"},{"size":22324,"mtime":1630601788863,"results":"120","hashOfConfig":"65"},{"size":9091,"mtime":1630540576229,"results":"121","hashOfConfig":"65"},{"size":2219,"mtime":1630540576233,"results":"122","hashOfConfig":"65"},{"size":2257,"mtime":1630540576231,"results":"123","hashOfConfig":"65"},{"size":2402,"mtime":1630540576229,"results":"124","hashOfConfig":"65"},{"size":2090,"mtime":1630540576230,"results":"125","hashOfConfig":"65"},{"size":806,"mtime":1630598418924,"results":"126","hashOfConfig":"65"},{"size":6450,"mtime":1630598090460,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"1nobsn4",{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"130"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"130"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"130"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"130"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"130"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"130"},"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/index.js",[],["263","264"],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/App.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/serviceWorker.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/connected-wallets.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/wallet.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/page.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/PopupPage.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/NavigationFrame.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/WalletPage.js",["265"],"import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport BalancesList from '../components/BalancesList';\nimport Grid from '@material-ui/core/Grid';\nimport { useIsProdNetwork } from '../utils/connection';\nimport DebugButtons from '../components/DebugButtons';\nimport { makeStyles } from '@material-ui/core';\nimport { useIsExtensionWidth } from '../utils/utils';\nimport ErrorLogViewer from '../components/ErrorLogViewer';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    [theme.breakpoints.down(theme.ext)]: {\n      padding: 0,\n    },\n    [theme.breakpoints.up(theme.ext)]: {\n      maxWidth: 'md',\n    },\n  },\n  balancesContainer: {\n    [theme.breakpoints.down(theme.ext)]: {\n      marginBottom: 24,\n    },\n  },\n}));\n\nexport default function WalletPage() {\n  const classes = useStyles();\n  const isProdNetwork = useIsProdNetwork();\n  const isExtensionWidth = useIsExtensionWidth();\n  return (\n    <Container fixed maxWidth=\"md\" className={classes.container}>\n      <Grid container spacing={isExtensionWidth ? 0 : 3}>\n        <Grid item xs={12} className={classes.balancesContainer}>\n          <BalancesList />\n        </Grid>\n\n        <Grid item xs={12}>\n          <DebugButtons />\n        </Grid>\n\n        <Grid item xs={12}>\n          <ErrorLogViewer />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/LoadingIndicator.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/names.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/ConnectionsPage.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/LoginPage.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/utils.ts",[],["266","267"],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/connection.tsx",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ExportAccountDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/BalancesList.js",["268","269","270","271","272"],"import React, {\n  useState,\n  useMemo,\n  useCallback,\n  useEffect,\n  useContext,\n} from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet,\n  useWalletPublicKeys,\n  useWalletSelector,\n} from '../utils/wallet';\nimport {\n  findAssociatedTokenAddress,\n  transferBetweenSplTokenAccounts,\n  transferTokens,\n} from '../utils/tokens';\nimport LoadingIndicator from './LoadingIndicator';\nimport Collapse from '@material-ui/core/Collapse';\nimport { Typography } from '@material-ui/core';\nimport TokenInfoDialog from './TokenInfoDialog';\nimport Link from '@material-ui/core/Link';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { abbreviateAddress, useIsExtensionWidth } from '../utils/utils';\nimport Button from '@material-ui/core/Button';\nimport SendIcon from '@material-ui/icons/Send';\nimport ReceiveIcon from '@material-ui/icons/WorkOutline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AddIcon from '@material-ui/icons/Add';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport EditIcon from '@material-ui/icons/Edit';\nimport MergeType from '@material-ui/icons/MergeType';\nimport SortIcon from '@material-ui/icons/Sort';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddTokenDialog from './AddTokenDialog';\nimport ExportAccountDialog from './ExportAccountDialog';\nimport SendDialog from './SendDialog';\nimport DepositDialog from './DepositDialog';\nimport {\n  useIsProdNetwork,\n  refreshAccountInfo,\n  useSolanaExplorerUrlSuffix,\n  useConnectionConfig,\n  ConnectionContext,\n} from '../utils/connection';\nimport { serumMarkets, priceStore } from '../utils/markets';\nimport { swapApiRequest } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport { showTokenInfoDialog } from '../utils/config';\n\nimport CloseTokenAccountDialog from './CloseTokenAccountButton';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport TokenIcon from './TokenIcon';\nimport EditAccountNameDialog from './EditAccountNameDialog';\nimport MergeAccountsDialog from './MergeAccountsDialog';\nimport { useConnection } from '../utils/connection';\nimport MultiTokenSender from './MultiTokenSender';\n\nconst balanceFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n  useGrouping: true,\n});\n\nconst SortAccounts = {\n  None: 0,\n  Ascending: 1,\n  Descending: 2,\n};\n\n// Aggregated $USD values of all child BalanceListItems child components.\n//\n// Values:\n// * undefined => loading.\n// * null => no market exists.\n// * float => done.\n//\n// For a given set of publicKeys, we know all the USD values have been loaded when\n// all of their values in this object are not `undefined`.\nconst usdValues = {};\n\n// Calculating associated token addresses is an asynchronous operation, so we cache\n// the values so that we can quickly render components using them. This prevents\n// flickering for the associated token fingerprint icon.\nconst associatedTokensCache = {};\n\nconst numberFormat = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nfunction fairsIsLoaded(publicKeys) {\n  return (\n    publicKeys.filter((pk) => usdValues[pk.toString()] !== undefined).length ===\n    publicKeys.length\n  );\n}\n\nexport default function BalancesList() {\n  const wallet = useWallet();\n  const [publicKeys, loaded] = useWalletPublicKeys();\n  const [showAddTokenDialog, setShowAddTokenDialog] = useState(false);\n  const [showEditAccountNameDialog, setShowEditAccountNameDialog] = useState(\n    false,\n  );\n  const [showMergeAccounts, setShowMergeAccounts] = useState(false);\n  const [sortAccounts, setSortAccounts] = useState(SortAccounts.None);\n  const { accounts, setAccountName } = useWalletSelector();\n  const isExtensionWidth = useIsExtensionWidth();\n  // Dummy var to force rerenders on demand.\n  const [, setForceUpdate] = useState(false);\n  const selectedAccount = accounts.find((a) => a.isSelected);\n  const allTokensLoaded = loaded && fairsIsLoaded(publicKeys);\n  let sortedPublicKeys = publicKeys;\n  if (allTokensLoaded && sortAccounts !== SortAccounts.None) {\n    sortedPublicKeys = [...publicKeys];\n    sortedPublicKeys.sort((a, b) => {\n      const aVal = usdValues[a.toString()];\n      const bVal = usdValues[b.toString()];\n\n      a = aVal === undefined || aVal === null ? -1 : aVal;\n      b = bVal === undefined || bVal === null ? -1 : bVal;\n      if (sortAccounts === SortAccounts.Descending) {\n        if (a < b) {\n          return -1;\n        } else if (a > b) {\n          return 1;\n        } else {\n          return 0;\n        }\n      } else {\n        if (b < a) {\n          return -1;\n        } else if (b > a) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n  }\n  const totalUsdValue = publicKeys\n    .filter((pk) => usdValues[pk.toString()])\n    .map((pk) => usdValues[pk.toString()])\n    .reduce((a, b) => a + b, 0.0);\n\n  // Memoized callback and component for the `BalanceListItems`.\n  //\n  // The `BalancesList` fetches data, e.g., fairs for tokens using React hooks\n  // in each of the child `BalanceListItem` components. However, we want the\n  // parent component, to aggregate all of this data together, for example,\n  // to show the cumulative USD amount in the wallet.\n  //\n  // To achieve this, we need to pass a callback from the parent to the chlid,\n  // so that the parent can collect the results of all the async network requests.\n  // However, this can cause a render loop, since invoking the callback can cause\n  // the parent to rerender, which causese the child to rerender, which causes\n  // the callback to be invoked.\n  //\n  // To solve this, we memoize all the `BalanceListItem` children components.\n  const setUsdValuesCallback = useCallback(\n    (publicKey, usdValue) => {\n      if (usdValues[publicKey.toString()] !== usdValue) {\n        usdValues[publicKey.toString()] = usdValue;\n        if (fairsIsLoaded(publicKeys)) {\n          setForceUpdate((forceUpdate) => !forceUpdate);\n        }\n      }\n    },\n    [publicKeys],\n  );\n  const balanceListItemsMemo = useMemo(() => {\n    return sortedPublicKeys.map((pk) => {\n      return React.memo((props) => {\n        return (\n          <BalanceListItem\n            key={pk.toString()}\n            publicKey={pk}\n            setUsdValue={setUsdValuesCallback}\n          />\n        );\n      });\n    });\n  }, [sortedPublicKeys, setUsdValuesCallback]);\n\n  const iconSize = isExtensionWidth ? 'small' : 'medium';\n\n  return (\n    <Paper>\n      <AppBar position=\"static\" color=\"default\" elevation={1}>\n        <Toolbar>\n          <Typography\n            variant=\"h6\"\n            style={{ flexGrow: 1, fontSize: isExtensionWidth && '1rem' }}\n            component=\"h2\"\n          >\n            {selectedAccount && selectedAccount.name}\n            {isExtensionWidth ? '' : ' Balances'}{' '}\n            {allTokensLoaded && (\n              <>({numberFormat.format(totalUsdValue.toFixed(2))})</>\n            )}\n          </Typography>\n          {selectedAccount &&\n            selectedAccount.name !== 'Main account' &&\n            selectedAccount.name !== 'Hardware wallet' && (\n              <Tooltip title=\"Edit Account Name\" arrow>\n                <IconButton\n                  size={iconSize}\n                  onClick={() => setShowEditAccountNameDialog(true)}\n                >\n                  <EditIcon />\n                </IconButton>\n              </Tooltip>\n            )}\n          <Tooltip title=\"Merge Tokens\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowMergeAccounts(true)}\n            >\n              <MergeType />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Add Token\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowAddTokenDialog(true)}\n            >\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Sort Tokens\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => {\n                switch (sortAccounts) {\n                  case SortAccounts.None:\n                    setSortAccounts(SortAccounts.Ascending);\n                    return;\n                  case SortAccounts.Ascending:\n                    setSortAccounts(SortAccounts.Descending);\n                    return;\n                  case SortAccounts.Descending:\n                    setSortAccounts(SortAccounts.None);\n                    return;\n                  default:\n                    console.error('invalid sort type', sortAccounts);\n                }\n              }}\n            >\n              <SortIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Refresh\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => {\n                refreshWalletPublicKeys(wallet);\n                publicKeys.map((publicKey) =>\n                  refreshAccountInfo(wallet.connection, publicKey, true),\n                );\n              }}\n              style={{ marginRight: -12 }}\n            >\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n      <List disablePadding>\n        {balanceListItemsMemo.map((Memoized) => (\n          <Memoized />\n        ))}\n        {loaded ? null : <LoadingIndicator />}\n      </List>\n      <AddTokenDialog\n        open={showAddTokenDialog}\n        onClose={() => setShowAddTokenDialog(false)}\n      />\n      <EditAccountNameDialog\n        open={showEditAccountNameDialog}\n        onClose={() => setShowEditAccountNameDialog(false)}\n        oldName={selectedAccount ? selectedAccount.name : ''}\n        onEdit={(name) => {\n          setAccountName(selectedAccount.selector, name);\n          setShowEditAccountNameDialog(false);\n        }}\n      />\n      <MergeAccountsDialog\n        open={showMergeAccounts}\n        onClose={() => setShowMergeAccounts(false)}\n      />\n      <MultiTokenSender />\n    </Paper>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  address: {\n    textOverflow: 'ellipsis',\n    overflowX: 'hidden',\n  },\n  itemDetails: {\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    marginBottom: theme.spacing(2),\n  },\n  buttonContainer: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport function BalanceListItem({ publicKey, expandable, setUsdValue }) {\n  const wallet = useWallet();\n  const balanceInfo = useBalanceInfo(publicKey);\n  const classes = useStyles();\n  const connection = useConnection();\n  const [open, setOpen] = useState(false);\n  const isExtensionWidth = useIsExtensionWidth();\n  const [, setForceUpdate] = useState(false);\n  // Valid states:\n  //   * undefined => loading.\n  //   * null => not found.\n  //   * else => price is loaded.\n  const [price, setPrice] = useState(undefined);\n  useEffect(() => {\n    if (balanceInfo) {\n      if (balanceInfo.tokenSymbol) {\n        const coin = balanceInfo.tokenSymbol.toUpperCase();\n        // Don't fetch USD stable coins. Mark to 1 USD.\n        if (coin === 'USDT' || coin === 'USDC') {\n          setPrice(1);\n        }\n        // A Serum market exists. Fetch the price.\n        else if (serumMarkets[coin]) {\n          let m = serumMarkets[coin];\n          priceStore\n            .getPrice(connection, m.name)\n            .then((price) => {\n              setPrice(price);\n            })\n            .catch((err) => {\n              console.error(err);\n              setPrice(null);\n            });\n        }\n        // No Serum market exists.\n        else {\n          setPrice(null);\n        }\n      }\n      // No token symbol so don't fetch market data.\n      else {\n        setPrice(null);\n      }\n    }\n  }, [price, balanceInfo, connection]);\n\n  expandable = expandable === undefined ? true : expandable;\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let {\n    amount,\n    decimals,\n    mint,\n    tokenName,\n    tokenSymbol,\n    tokenLogoUri,\n  } = balanceInfo;\n  tokenName = tokenName ?? abbreviateAddress(mint);\n  let displayName;\n  if (isExtensionWidth) {\n    displayName = tokenSymbol ?? tokenName;\n  } else {\n    displayName = tokenName + (tokenSymbol ? ` (${tokenSymbol})` : '');\n  }\n\n  // Fetch and cache the associated token address.\n  if (wallet && wallet.publicKey && mint) {\n    if (\n      associatedTokensCache[wallet.publicKey.toString()] === undefined ||\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()] ===\n        undefined\n    ) {\n      findAssociatedTokenAddress(wallet.publicKey, mint).then((assocTok) => {\n        let walletAccounts = Object.assign(\n          {},\n          associatedTokensCache[wallet.publicKey.toString()],\n        );\n        walletAccounts[mint.toString()] = assocTok;\n        associatedTokensCache[wallet.publicKey.toString()] = walletAccounts;\n        if (assocTok.equals(publicKey)) {\n          // Force a rerender now that we've cached the value.\n          setForceUpdate((forceUpdate) => !forceUpdate);\n        }\n      });\n    }\n  }\n\n  // undefined => not loaded.\n  let isAssociatedToken = mint ? undefined : false;\n  if (\n    wallet &&\n    wallet.publicKey &&\n    mint &&\n    associatedTokensCache[wallet.publicKey.toString()]\n  ) {\n    let acc =\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()];\n    if (acc) {\n      if (acc.equals(publicKey)) {\n        isAssociatedToken = true;\n      } else {\n        isAssociatedToken = false;\n      }\n    }\n  }\n\n  const subtitle =\n    isExtensionWidth || !publicKey.equals(balanceInfo.owner) ? undefined : (\n      <div style={{ display: 'flex', height: '20px', overflow: 'hidden' }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          {publicKey.toBase58()}\n        </div>\n      </div>\n    );\n\n  const usdValue =\n    price === undefined // Not yet loaded.\n      ? undefined\n      : price === null // Loaded and empty.\n      ? null\n      : ((amount / Math.pow(10, decimals)) * price).toFixed(2); // Loaded.\n  if (setUsdValue && usdValue !== undefined) {\n    setUsdValue(publicKey, usdValue === null ? null : parseFloat(usdValue));\n  }\n\n  return (\n    <>\n      <ListItem button onClick={() => expandable && setOpen((open) => !open)}>\n        <ListItemIcon>\n          <TokenIcon\n            mint={mint}\n            tokenName={tokenName}\n            url={tokenLogoUri}\n            size={28}\n          />\n        </ListItemIcon>\n        <div style={{ display: 'flex', flex: 1 }}>\n          <ListItemText\n            primary={\n              <>\n                {balanceFormat.format(amount / Math.pow(10, decimals))}{' '}\n                {displayName}\n              </>\n            }\n            secondary={subtitle}\n            secondaryTypographyProps={{ className: classes.address }}\n          />\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              flexDirection: 'column',\n            }}\n          >\n            {price && (\n              <Typography color=\"textSecondary\">\n                {numberFormat.format(usdValue)}\n              </Typography>\n            )}\n          </div>\n        </div>\n        {expandable ? open ? <ExpandLess /> : <ExpandMore /> : <></>}\n      </ListItem>\n      {expandable && (\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <BalanceListItemDetails\n            isAssociatedToken={isAssociatedToken}\n            publicKey={publicKey}\n            serumMarkets={serumMarkets}\n            balanceInfo={balanceInfo}\n          />\n        </Collapse>\n      )}\n    </>\n  );\n}\n\nfunction BalanceListItemDetails({\n  publicKey,\n  serumMarkets,\n  balanceInfo,\n  isAssociatedToken,\n}) {\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const classes = useStyles();\n  const [sendDialogOpen, setSendDialogOpen] = useState(false);\n  const [depositDialogOpen, setDepositDialogOpen] = useState(false);\n  const [tokenInfoDialogOpen, setTokenInfoDialogOpen] = useState(false);\n  const [exportAccDialogOpen, setExportAccDialogOpen] = useState(false);\n  const [\n    closeTokenAccountDialogOpen,\n    setCloseTokenAccountDialogOpen,\n  ] = useState(false);\n  const wallet = useWallet();\n  const isProdNetwork = useIsProdNetwork();\n  const [swapInfo] = useAsyncData(async () => {\n    if (!showSwapAddress || !isProdNetwork) {\n      return null;\n    }\n    return await swapApiRequest(\n      'POST',\n      'swap_to',\n      {\n        blockchain: 'sol',\n        coin: balanceInfo.mint?.toBase58(),\n        address: publicKey.toBase58(),\n      },\n      { ignoreUserErrors: true },\n    );\n  }, [\n    'swapInfo',\n    isProdNetwork,\n    balanceInfo.mint?.toBase58(),\n    publicKey.toBase58(),\n  ]);\n  const isExtensionWidth = useIsExtensionWidth();\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let { mint, tokenName, tokenSymbol, owner, amount } = balanceInfo;\n\n  // Only show the export UI for the native SOL coin.\n  const exportNeedsDisplay =\n    mint === null && tokenName === 'SOL' && tokenSymbol === 'SOL';\n\n  const market = tokenSymbol\n    ? serumMarkets[tokenSymbol.toUpperCase()]\n      ? serumMarkets[tokenSymbol.toUpperCase()].publicKey\n      : undefined\n    : undefined;\n  const isSolAddress = publicKey.equals(owner);\n  const additionalInfo = isExtensionWidth ? undefined : (\n    <>\n      <Typography variant=\"body2\">\n        Token Name: {tokenName ?? 'Unknown'}\n      </Typography>\n      <Typography variant=\"body2\">\n        Token Symbol: {tokenSymbol ?? 'Unknown'}\n      </Typography>\n      {mint ? (\n        <Typography variant=\"body2\" className={classes.address}>\n          Token Address: {mint.toBase58()}\n        </Typography>\n      ) : null}\n      {!isSolAddress && (\n        <Typography variant=\"body2\" className={classes.address}>\n          {isAssociatedToken ? 'Associated' : ''} Token Metadata:{' '}\n          {publicKey.toBase58()}\n        </Typography>\n      )}\n      {!isSolAddress && isAssociatedToken === false && (\n        <div style={{ display: 'flex' }}>\n          This is an auxiliary token account.\n        </div>\n      )}\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div>\n          <Typography variant=\"body2\">\n            <Link\n              href={\n                `https://explorer.solana.com/account/${publicKey.toBase58()}` +\n                urlSuffix\n              }\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              View on Solana\n            </Link>\n          </Typography>\n          {market && (\n            <Typography variant=\"body2\">\n              <Link\n                href={`https://dex.projectserum.com/#/market/${market}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Serum\n              </Link>\n            </Typography>\n          )}\n          {swapInfo && swapInfo.coin.erc20Contract && (\n            <Typography variant=\"body2\">\n              <Link\n                href={\n                  `https://etherscan.io/token/${swapInfo.coin.erc20Contract}` +\n                  urlSuffix\n                }\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Ethereum\n              </Link>\n            </Typography>\n          )}\n        </div>\n        {exportNeedsDisplay && wallet.allowsExport && (\n          <div>\n            <Typography variant=\"body2\">\n              <Link href={'#'} onClick={(e) => setExportAccDialogOpen(true)}>\n                Export\n              </Link>\n            </Typography>\n          </div>\n        )}\n      </div>\n    </>\n  );\n\n  return (\n    <>\n      {wallet.allowsExport && (\n        <ExportAccountDialog\n          onClose={() => setExportAccDialogOpen(false)}\n          open={exportAccDialogOpen}\n        />\n      )}\n      <div className={classes.itemDetails}>\n        <div className={classes.buttonContainer}>\n          {!publicKey.equals(owner) && showTokenInfoDialog ? (\n            <Button\n              variant=\"outlined\"\n              color=\"default\"\n              startIcon={<InfoIcon />}\n              onClick={() => setTokenInfoDialogOpen(true)}\n            >\n              Token Info\n            </Button>\n          ) : null}\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<ReceiveIcon />}\n            onClick={() => setDepositDialogOpen(true)}\n          >\n            Receive\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<SendIcon />}\n            onClick={() => setSendDialogOpen(true)}\n          >\n            Send\n          </Button>\n          {localStorage.getItem('warning-close-account') &&\n          mint &&\n          amount === 0 ? (\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              size=\"small\"\n              startIcon={<DeleteIcon />}\n              onClick={() => setCloseTokenAccountDialogOpen(true)}\n            >\n              Delete\n            </Button>\n          ) : null}\n        </div>\n        {additionalInfo}\n      </div>\n      <SendDialog\n        open={sendDialogOpen}\n        onClose={() => setSendDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <DepositDialog\n        open={depositDialogOpen}\n        onClose={() => setDepositDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n        swapInfo={swapInfo}\n        isAssociatedToken={isAssociatedToken}\n      />\n      <TokenInfoDialog\n        open={tokenInfoDialogOpen}\n        onClose={() => setTokenInfoDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <CloseTokenAccountDialog\n        open={closeTokenAccountDialogOpen}\n        onClose={() => setCloseTokenAccountDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n    </>\n  );\n}\n","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/localStorage.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/wallet-seed.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/instructions.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/data.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignFormContent.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignTransactionFormContent.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/clusters.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddHarwareWalletDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SolanaIcon.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DeleteMnemonicDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddAccountDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ConnectionIcon.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DebugButtons.js",["273","274","275","276","277","278","279","280","281","282","283"],"import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet\n} from '../utils/wallet';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { Account, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { abbreviateAddress, sleep } from '../utils/utils';\nimport {\n  refreshAccountInfo,\n  useConnectionConfig,\n  MAINNET_URL,\n} from '../utils/connection';\nimport { createAndInitializeMint } from '../utils/tokens';\nimport { Tooltip, Button, Paper } from '@material-ui/core';\nimport MintTokenDialog from '../components/MintTokenDialog';\n\nexport default function DebugButtons() {\n  const wallet = useWallet();\n  const updateTokenName = useUpdateTokenName();\n  const { endpoint } = useConnectionConfig();\n  const balanceInfo = useBalanceInfo(wallet.publicKey);\n  const [sendTransaction, sending] = useSendTransaction();\n  const [showMintTokenDialog, setShowMintTokenDialog] = useState(false);\n  const callAsync = useCallAsync();\n\n  let { amount } = balanceInfo || {};\n\n  function requestAirdrop() {\n    callAsync(\n      wallet.connection.requestAirdrop(wallet.publicKey, LAMPORTS_PER_SOL),\n      {\n        onSuccess: async () => {\n          await sleep(5000);\n          refreshAccountInfo(wallet.connection, wallet.publicKey);\n        },\n        successMessage:\n          'Success! Please wait up to 30 seconds for the SOL tokens to appear in your wallet.',\n      },\n    );\n  }\n\n  function mintTestToken() {\n    // let mint = new Account();\n    // updateTokenName(\n    //   mint.publicKey,\n    //   `TEST`,\n    //   `TEST`,\n    // );\n    // sendTransaction(\n    //   createAndInitializeMint({\n    //     connection: wallet.connection,\n    //     owner: wallet,\n    //     mint,\n    //     amount: 1000000000,\n    //     decimals: 0,\n    //     initialAccount: new Account(),\n    //   }),\n    //   { onSuccess: () => refreshWalletPublicKeys(wallet) },\n    // );\n    setShowMintTokenDialog(true);\n\n  }\n\n  const noSol = amount === 0;\n  const requestAirdropDisabled = endpoint === MAINNET_URL;\n  const spacing = 24;\n  return (\n    <div style={{ display: 'flex', marginLeft: spacing }}>\n\n      <Tooltip\n        title={\n          requestAirdropDisabled\n            ? 'Receive some devnet SOL for free. Only enabled on the devnet'\n            : 'Receive some devnet SOL for free'\n        }\n      >\n        <span>\n          {/* <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={requestAirdrop}\n            disabled={requestAirdropDisabled}\n          >\n            Request Airdrop\n          </Button> */}\n        </span>\n      </Tooltip>\n      <Tooltip\n        title={\n          noSol\n            ? 'Generate and receive balances in a new test token. Requires SOL balance'\n            : 'Generate and receive balances in a new test token'\n        }\n      >\n        <span>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={mintTestToken}\n            disabled={sending || noSol}\n            style={{ marginLeft: spacing }}\n          >\n            Mint A Token\n          </Button>\n          <MintTokenDialog open={showMintTokenDialog} onClose={()=>setShowMintTokenDialog(false)} />\n        </span>\n      </Tooltip>\n    </div>\n    \n  );\n}\n","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ConnectionsList.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ErrorLogViewer.js",["284","285","286","287","288","289","290"],"import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { TextareaAutosize, Paper } from '@material-ui/core';\nimport EventEmitter from \"reactjs-eventemitter\";\n\nexport default function ErrorLogViewer(){\n    const spacing = 24;\n    const [errorAddresses, setErrorAddress] = useState([]);\n    const [errorAddressString, setErrorAddressString] = useState('');\n    const [lastOkAddress, setLastOkAddress] = useState('');\n    const [totalSuccess, setTotalSuccess] = useState(0);\n    const [totalErrors, setTotalErrors] = useState(0);\n\n\n    useEffect( ()=>{\n\n\n\n        EventEmitter.subscribe('ERROR_ADDRESS', errorAddress => {\n\n            console.log('ERROR ADDRESS', errorAddress);\n            if(errorAddress!=null && errorAddress!=''){\n        \n                setErrorAddressString((prevState) =>{\n                    let addressStr =prevState;\n                    addressStr += errorAddress +',';\n                    return addressStr;\n                });\n              \n                setTotalErrors((prevState)=> {\n\n                    return prevState + 1;\n                });\n    \n            }else{}      \n            \n        \n        });\n    \n        EventEmitter.subscribe('SUCCESS_ADDRESS', okAddress => {\n    \n            setLastOkAddress(okAddress);\n           \n            setTotalSuccess((prevState) => {\n\n                return prevState + 1;\n            });     \n            \n        \n        })\n\n\n\n\n    }, [])\n\n\n\n\n\n\n    // Emitter.on('ERROR_ADDRESS', (errorAddress) => {\n    //     console.log('ERROR ADDRESS', errorAddress);\n    //     if(errorAddress!=null && errorAddress!=''){\n\n    //         let addressStr = errorAddressString;\n\n    //         addressStr += errorAddress +',';\n    \n    //         setErrorAddressString(addressStr);\n    //         let totalError = totalErrors + 1;\n    //         setTotalErrors(totalError);\n\n    //     }else{}\n\n    // });\n    \n    // Emitter.on('SUCCESS_ADDRESS', (okAddress) => {\n\n    //     setLastOkAddress(okAddress);\n    //     let totalSuccessVal = totalSuccess+1;\n        \n    //     setTotalSuccess(totalSuccessVal);\n\n\n    // });\n\n    // useEffect(()=> {\n\n\n\n    // }, [])\n\n    function updateErrorLogViewer(address){\n\n        console.log('error here...', address);\n    }\n\n    return (\n\n        <div style={{ display: 'flex', width: \"100%\" }}>\n                {/* Last Successful Airdrop Address:  {lastOkAddress}\n                <p></p>\n                Successfully Completed Airdrops:  {totalSuccess}\n                <p></p>\n                Unsuccessful Airdrops:  {totalErrors} */}\n\n            <Paper  style={{ width: \"100%\"}}  >\n                Last Successful Airdrop Address:  {lastOkAddress}\n                <p></p>\n                Successfully Completed Airdrops:  {totalSuccess}\n                <p></p>\n                Unsuccessful Airdrops:  {totalErrors}\n                <p></p>\n                <TextareaAutosize aria-label=\"empty textarea\" defaultValue={errorAddressString} placeholder=\"Unprocessed addresses will appear here.\" style={{ width: \"100%\", height:\"500px\" }} /> \n             </Paper>   \n                   \n        \n        </div>\n\n\n    );\n\n\n\n}","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/factory.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DialogForm.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/notifications.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/fetch-loop.ts",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MergeAccountsDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/EditAccountNameDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MintTokenDialog.js",["291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313"],"import React, { useEffect, useRef, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport DialogForm from './DialogForm';\nimport { PublicKey } from '@solana/web3.js';\nimport { abbreviateAddress } from '../utils/utils';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n  ConnectToMetamaskButton,\n  getErc20Balance,\n  useEthAccount,\n  withdrawEth,\n} from '../utils/swap/eth';\nimport {\n    refreshWalletPublicKeys,\n    useBalanceInfo,\n    useWallet\n  } from '../utils/wallet';\nimport { useConnection, useIsProdNetwork } from '../utils/connection';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { Account, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createAndInitializeMint } from '../utils/tokens';\n\nexport default function MintTokenDialog({open, onClose, publicKey}){\n\n    const updateTokenName = useUpdateTokenName();\n    const isProdNetwork = useIsProdNetwork();\n    const [tab, setTab] = useState('spl');\n    const [name, setName] = useState('name');\n    const [symbol, setSymbol] = useState('symbol');\n    const [amount, setAmount] = useState('amount');\n    const [decimals, setDecimals] = useState('decimals');\n    const [sendTransaction, sending] = useSendTransaction();\n\n    const wallet = useWallet();\n\n  \n    const onSubmitRef = useRef();\n    const ethAccount = useEthAccount();\n\n    function mintTestToken() {\n        console.log(name,symbol,amount,decimals);\n        let mint = new Account();\n        updateTokenName(\n          mint.publicKey,\n          name,\n          symbol,\n        );\n        sendTransaction(\n          createAndInitializeMint({\n            connection: wallet.connection,\n            owner: wallet,\n            mint,\n            amount: (Number(amount)*1000000),\n            decimals: 6,\n            initialAccount: new Account(),\n          }),\n          { onSuccess: (e) => {console.log('event:'+e);refreshWalletPublicKeys(wallet)} },\n        );\n      \n    \n      }\n\n\n    return (\n        <>\n            <DialogForm\n                open={open}\n                onClose={onClose}\n                onSubmit={() => onSubmitRef.current()}\n                fullWidth\n            >\n\n                <DialogTitle>\n                    MINT A TOKEN (6 Decimals)\n                </DialogTitle>\n                <DialogContent style={{ paddingTop: 16}}>\n                <TextField\n                    label='Name'\n                 \n                    onChange={(e) => setName(e.target.value.trim())}\n                ></TextField>\n                <TextField\n                    label='Symbol'\n                 \n                    onChange={(e) => setSymbol(e.target.value.trim())}\n                ></TextField>\n                <TextField\n                    label='Amount'\n              \n                    onChange={(e) => setAmount(e.target.value.trim())}\n                ></TextField> \n                {/* <TextField\n                    label='Decimals'\n                    \n                    onChange={(e) => setDecimals(e.target.value.trim())}\n                ></TextField>                                                    */}\n                </DialogContent>\n\n                <DialogActions>\n                    <Button onClick={mintTestToken}>Mint</Button>\n                </DialogActions>\n\n\n            </DialogForm>\n        </>\n\n\n\n    );\n\n\n\n\n\n}","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/ledger.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/index.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/TokenInstruction.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/ledger-core.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/swap/eth.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/LabelValue.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/config.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/swap/api.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/DexInstruction.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/SystemInstruction.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/UnknownInstruction.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/NewOrder.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/transactions.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/TokenIcon.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/CloseTokenAccountButton.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DepositDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SendDialog.js",["314","315","316","317","318","319","320","321","322"],"import React, { useEffect, useRef, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport DialogForm from './DialogForm';\nimport { useWallet, useWalletAddressForMint } from '../utils/wallet';\nimport { PublicKey } from '@solana/web3.js';\nimport { abbreviateAddress } from '../utils/utils';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n  ConnectToMetamaskButton,\n  getErc20Balance,\n  useEthAccount,\n  withdrawEth,\n} from '../utils/swap/eth';\nimport { useConnection, useIsProdNetwork } from '../utils/connection';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  TOKEN_PROGRAM_ID,\n  WRAPPED_SOL_MINT,\n} from '../utils/tokens/instructions';\nimport { parseTokenAccountData } from '../utils/tokens/data';\nimport { Switch, Tooltip } from '@material-ui/core';\nimport { EthFeeEstimate } from './EthFeeEstimate';\nimport CSVReader from 'react-csv-reader';\n\nconst timeout = (ms) => new Promise((res) => setTimeout(res, ms));\n\nconst WUSDC_MINT = new PublicKey(\n  'BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW',\n);\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\n\nconst WUSDT_MINT = new PublicKey(\n  'BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4',\n);\n\nconst USDT_MINT = new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB');\n\nexport default function SendDialog({ open, onClose, publicKey, balanceInfo }) {\n  const isProdNetwork = useIsProdNetwork();\n  const [tab, setTab] = useState('spl');\n\n  const onSubmitRef = useRef();\n\n  const [swapCoinInfo] = useSwapApiGet(\n    showSwapAddress && balanceInfo.mint && isProdNetwork\n      ? `coins/sol/${balanceInfo.mint.toBase58()}`\n      : null,\n  );\n  const ethAccount = useEthAccount();\n\n  const { mint, tokenName, tokenSymbol } = balanceInfo;\n\n  const getTabs = (mint) => {\n    if (mint?.equals(WUSDC_MINT)) {\n      return [\n        <Tab label=\"SPL WUSDC\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"SPL USDC\" key=\"wusdcToSplUsdc\" value=\"wusdcToSplUsdc\" />,\n        <Tab label=\"ERC20 USDC\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else if (mint?.equals(WUSDT_MINT)) {\n      return [\n        <Tab label=\"SPL WUSDT\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"SPL USDT\" key=\"wusdtToSplUsdt\" value=\"wusdtToSplUsdt\" />,\n        <Tab label=\"ERC20 USDT\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else if (\n      localStorage.getItem('sollet-private') &&\n      mint?.equals(USDC_MINT)\n    ) {\n      return [\n        <Tab label=\"SPL USDC\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"SPL WUSDC\" key=\"usdcToSplWUsdc\" value=\"usdcToSplWUsdc\" />,\n        <Tab label=\"ERC20 USDC\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else {\n      return [\n        <Tab label={`SPL ${swapCoinInfo.ticker}`} key=\"spl\" value=\"spl\" />,\n        <Tab\n          label={`${swapCoinInfo.erc20Contract ? 'ERC20' : 'Native'} ${\n            swapCoinInfo.ticker\n          }`}\n          key=\"swap\"\n          value=\"swap\"\n        />,\n      ];\n    }\n  };\n\n  return (\n    <>\n      <DialogForm\n        open={open}\n        onClose={onClose}\n        onSubmit={() => onSubmitRef.current()}\n        fullWidth\n      >\n        <DialogTitle>\n          Send {tokenName}\n          {tokenSymbol}\n          {ethAccount && (\n            <div>\n              <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n                Metamask connected: {ethAccount}\n              </Typography>\n            </div>\n          )}\n        </DialogTitle>\n        {swapCoinInfo ? (\n          <Tabs\n            value={tab}\n            variant=\"fullWidth\"\n            onChange={(e, value) => setTab(value)}\n            textColor=\"primary\"\n            indicatorColor=\"primary\"\n          >\n            {getTabs(mint)}\n          </Tabs>\n        ) : null}\n\n        {tab === 'spl' ? (\n          <SendSplDialog\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            onSubmitRef={onSubmitRef}\n          />\n        ) : tab === 'wusdcToSplUsdc' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            wusdcToSplUsdc\n          />\n        ) : tab === 'wusdtToSplUsdt' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            wusdtToSplUsdt\n          />\n        ) : tab === 'usdcToSplWUsdc' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            usdcToSplWUsdc\n          />\n        ) : (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            ethAccount={ethAccount}\n            onSubmitRef={onSubmitRef}\n          />\n        )}\n      </DialogForm>\n    </>\n  );\n}\n\nfunction SendSplDialog({ onClose, publicKey, balanceInfo, onSubmitRef }) {\n  const defaultAddressHelperText =\n    !balanceInfo.mint || balanceInfo.mint.equals(WRAPPED_SOL_MINT)\n      ? 'Enter Solana Address'\n      : 'Enter SPL token or Solana address';\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [csv, setCsv] = useState([]);\n  const [splitCsv, setSplitCsv] = useState([]);\n  const [csvIndex, setCsvIndex] = useState(0);\n  const [addressHelperText, setAddressHelperText] = useState(\n    defaultAddressHelperText,\n  );\n  const [passValidation, setPassValidation] = useState();\n  const [overrideDestinationCheck, setOverrideDestinationCheck] = useState(\n    false,\n  );\n  const [shouldShowOverride, setShouldShowOverride] = useState();\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    validAmount,\n  } = useForm(balanceInfo, addressHelperText, passValidation);\n  const { decimals, mint } = balanceInfo;\n  const mintString = mint && mint.toBase58();\n\n  useEffect(() => {\n    (async () => {\n      if (!destinationAddress) {\n        setAddressHelperText(defaultAddressHelperText);\n        setPassValidation(undefined);\n        setShouldShowOverride(undefined);\n        return;\n      }\n      try {\n        const destinationAccountInfo = await wallet.connection.getAccountInfo(\n          new PublicKey(destinationAddress),\n        );\n        setShouldShowOverride(false);\n\n        if (destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID)) {\n          const accountInfo = parseTokenAccountData(\n            destinationAccountInfo.data,\n          );\n          if (accountInfo.mint.toBase58() === mintString) {\n            setPassValidation(true);\n            setAddressHelperText('Address is a valid SPL token address');\n          } else {\n            setPassValidation(false);\n            setAddressHelperText('Destination address mint does not match');\n          }\n        } else {\n          setPassValidation(true);\n          setAddressHelperText('Destination is a Solana address');\n        }\n      } catch (e) {\n        console.log(`Received error validating address ${e}`);\n        setAddressHelperText(defaultAddressHelperText);\n        setShouldShowOverride(true);\n        setPassValidation(undefined);\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [destinationAddress, wallet, mintString]);\n\n  useEffect(() => {\n    return () => {\n      setOverrideDestinationCheck(false);\n    };\n  }, [setOverrideDestinationCheck]);\n\n  async function makeTransaction2(address, qt) {\n    let amount = Math.round(parseFloat(qt) * 10 ** decimals);\n    console.log(amount);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(address),\n      amount,\n      balanceInfo.mint,\n      decimals,\n      null,\n      overrideDestinationCheck,\n    );\n  }\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(destinationAddress),\n      amount,\n      balanceInfo.mint,\n      decimals,\n      null,\n      overrideDestinationCheck,\n    );\n  }\n\n  const disabled = shouldShowOverride\n    ? !overrideDestinationCheck || sending || !validAmount\n    : sending || !validAmount;\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), { onSuccess: onClose });\n  }\n\n  async function bulkSend() {\n    csv.map((line) => {\n      try {\n        setTimeout(async () => {\n          const [address, amount] = line;\n          if (!address.toLowerCase().startsWith('0x')) {\n            console.log('txn executing  for ', address);\n            await sendTransactionAuto(address, amount);\n            console.log('txn executed for ', address);\n          }\n        }, 2000);\n      } catch (e) {\n        console.log('problem with address ', e);\n      }\n    });\n  }\n\n  useEffect(() => {\n    bulkSend();\n  }, [csv]);\n\n  async function sendTransactionAuto(address, qt) {\n    return await sendTransaction(\n      makeTransaction2(address, qt),\n      { onSuccess: onClose },\n      address + ' - ' + qt + '\\n',\n    );\n  }\n\n  onSubmitRef.current = onSubmit;\n  return (\n    <>\n      <DialogContent>{fields}</DialogContent>\n      <DialogActions>\n        {shouldShowOverride && (\n          <div\n            style={{\n              'align-items': 'center',\n              display: 'flex',\n              'text-align': 'left',\n            }}\n          >\n            <b>This address has no funds. Are you sure it's correct?</b>\n            <Switch\n              checked={overrideDestinationCheck}\n              onChange={(e) => setOverrideDestinationCheck(e.target.checked)}\n              color=\"primary\"\n            />\n          </div>\n        )}\n        <b>Distributor will start automatically after csv file selected</b>\n        <CSVReader onFileLoaded={(data, fileInfo) => setCsv(data)} />\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" color=\"primary\" disabled={disabled}>\n          Send\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n\nfunction SendSwapDialog({\n  onClose,\n  publicKey,\n  balanceInfo,\n  swapCoinInfo,\n  ethAccount,\n  wusdcToSplUsdc = false,\n  wusdtToSplUsdt = false,\n  usdcToSplWUsdc = false,\n  onSubmitRef,\n}) {\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [signature, setSignature] = useState(null);\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  } = useForm(balanceInfo);\n\n  const { tokenName, decimals, mint } = balanceInfo;\n  const blockchain =\n    wusdcToSplUsdc || wusdtToSplUsdt || usdcToSplWUsdc\n      ? 'sol'\n      : swapCoinInfo.blockchain === 'sol'\n      ? 'eth'\n      : swapCoinInfo.blockchain;\n  const needMetamask = blockchain === 'eth';\n\n  const [ethBalance] = useAsyncData(\n    () => getErc20Balance(ethAccount),\n    'ethBalance',\n    {\n      refreshInterval: 2000,\n    },\n  );\n  const ethFeeData = useSwapApiGet(\n    blockchain === 'eth' &&\n      `fees/eth/${ethAccount}` +\n        (swapCoinInfo.erc20Contract ? '/' + swapCoinInfo.erc20Contract : ''),\n    { refreshInterval: 2000 },\n  );\n  const [ethFeeEstimate] = ethFeeData;\n  const insufficientEthBalance =\n    typeof ethBalance === 'number' &&\n    typeof ethFeeEstimate === 'number' &&\n    ethBalance < ethFeeEstimate;\n\n  useEffect(() => {\n    if (blockchain === 'eth' && ethAccount) {\n      setDestinationAddress(ethAccount);\n    }\n  }, [blockchain, ethAccount, setDestinationAddress]);\n\n  let splUsdcWalletAddress = useWalletAddressForMint(\n    wusdcToSplUsdc ? USDC_MINT : null,\n  );\n  let splUsdtWalletAddress = useWalletAddressForMint(\n    wusdtToSplUsdt ? USDT_MINT : null,\n  );\n  let splWUsdcWalletAddress = useWalletAddressForMint(\n    usdcToSplWUsdc ? WUSDC_MINT : null,\n  );\n  useEffect(() => {\n    if (wusdcToSplUsdc && splUsdcWalletAddress) {\n      setDestinationAddress(splUsdcWalletAddress);\n    } else if (wusdtToSplUsdt && splUsdtWalletAddress) {\n      setDestinationAddress(splUsdtWalletAddress);\n    } else if (usdcToSplWUsdc && splWUsdcWalletAddress) {\n      setDestinationAddress(splWUsdcWalletAddress);\n    }\n  }, [\n    setDestinationAddress,\n    wusdcToSplUsdc,\n    splUsdcWalletAddress,\n    wusdtToSplUsdt,\n    splUsdtWalletAddress,\n    usdcToSplWUsdc,\n    splWUsdcWalletAddress,\n  ]);\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    const params = {\n      blockchain,\n      address: destinationAddress,\n      size: amount / 10 ** decimals,\n    };\n    if (blockchain === 'sol') {\n      params.coin = swapCoinInfo.splMint;\n    } else if (blockchain === 'eth') {\n      params.coin = swapCoinInfo.erc20Contract;\n    }\n    if (mint?.equals(WUSDC_MINT)) {\n      params.wusdcToUsdc = true;\n    } else if (mint?.equals(USDC_MINT)) {\n      if (usdcToSplWUsdc) {\n        params.usdcToWUsdc = true;\n        params.coin = WUSDC_MINT.toString();\n      }\n    } else if (mint?.equals(WUSDT_MINT)) {\n      params.wusdtToUsdt = true;\n    }\n    const swapInfo = await swapApiRequest('POST', 'swap_to', params);\n    if (swapInfo.blockchain !== 'sol') {\n      throw new Error('Unexpected blockchain');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(swapInfo.address),\n      amount,\n      balanceInfo.mint,\n      decimals,\n      swapInfo.memo,\n    );\n  }\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), { onSuccess: setSignature });\n  }\n  onSubmitRef.current = onSubmit;\n\n  if (signature) {\n    return (\n      <SendSwapProgress\n        key={signature}\n        publicKey={publicKey}\n        signature={signature}\n        blockchain={blockchain}\n        onClose={onClose}\n      />\n    );\n  }\n\n  let sendButton = (\n    <Button\n      type=\"submit\"\n      color=\"primary\"\n      disabled={\n        sending ||\n        (needMetamask && !ethAccount) ||\n        !validAmount ||\n        insufficientEthBalance\n      }\n    >\n      Send\n    </Button>\n  );\n\n  if (insufficientEthBalance) {\n    sendButton = (\n      <Tooltip\n        title=\"Insufficient ETH for withdrawal transaction fee\"\n        placement=\"top\"\n      >\n        <span>{sendButton}</span>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <DialogContent style={{ paddingTop: 16 }}>\n        <DialogContentText>\n          SPL {tokenName} can be converted to{' '}\n          {blockchain === 'eth' && swapCoinInfo.erc20Contract\n            ? 'ERC20'\n            : blockchain === 'sol' && swapCoinInfo.splMint\n            ? 'SPL'\n            : 'native'}{' '}\n          {swapCoinInfo.ticker}\n          {needMetamask ? ' via MetaMask' : null}.\n        </DialogContentText>\n        {blockchain === 'eth' && (\n          <DialogContentText>\n            Estimated withdrawal transaction fee:\n            <EthFeeEstimate\n              ethFeeData={ethFeeData}\n              insufficientEthBalance={insufficientEthBalance}\n            />\n          </DialogContentText>\n        )}\n        {needMetamask && !ethAccount ? <ConnectToMetamaskButton /> : fields}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        {sendButton}\n      </DialogActions>\n    </>\n  );\n}\n\nfunction SendSwapProgress({ publicKey, signature, onClose, blockchain }) {\n  const connection = useConnection();\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 1000,\n  });\n  const [confirms] = useAsyncData(\n    async () => {\n      const { value } = await connection.getSignatureStatus(signature);\n      return value?.confirmations;\n    },\n    [connection.getSignatureStatus, signature],\n    { refreshInterval: 2000 },\n  );\n\n  let step = 1;\n  let ethTxid = null;\n  for (let swap of swaps || []) {\n    const { deposit, withdrawal } = swap;\n    if (deposit.txid === signature) {\n      if (withdrawal.txid?.startsWith('0x')) {\n        step = 3;\n        ethTxid = withdrawal.txid;\n      } else if (withdrawal.txid && blockchain !== 'eth') {\n        step = 3;\n      } else {\n        step = 2;\n      }\n    }\n  }\n\n  return (\n    <>\n      <DialogContent>\n        <Stepper activeStep={step}>\n          <Step>\n            <StepLabel>Send Request</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Wait for Confirmations</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Withdraw Funds</StepLabel>\n          </Step>\n        </Stepper>\n        {ethTxid ? (\n          <Typography variant=\"body2\" align=\"center\">\n            <Link\n              href={`https://etherscan.io/tx/${ethTxid}`}\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              View on Etherscan\n            </Link>\n          </Typography>\n        ) : step < 3 ? (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <div style={{ marginRight: 16 }}>\n              <CircularProgress />\n            </div>\n            {confirms ? (\n              <Typography>{confirms} / 35 Confirmations</Typography>\n            ) : (\n              <Typography>Transaction Pending</Typography>\n            )}\n          </div>\n        ) : null}\n        {!ethTxid && blockchain === 'eth' ? (\n          <DialogContentText style={{ marginTop: 16, marginBottom: 0 }}>\n            Please keep this window open. You will need to approve the request\n            on MetaMask to complete the transaction.\n          </DialogContentText>\n        ) : null}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </>\n  );\n}\n\nfunction useForm(\n  balanceInfo,\n  addressHelperText,\n  passAddressValidation,\n  overrideValidation,\n) {\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [transferAmountString, setTransferAmountString] = useState('');\n  const { amount: balanceAmount, decimals, tokenSymbol } = balanceInfo;\n\n  const parsedAmount = parseFloat(transferAmountString) * 10 ** decimals;\n  const validAmount = parsedAmount > 0 && parsedAmount <= balanceAmount;\n\n  const fields = (\n    <>\n      <TextField\n        label=\"Recipient Address\"\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        value={destinationAddress}\n        onChange={(e) => setDestinationAddress(e.target.value.trim())}\n        helperText={addressHelperText}\n        id={\n          !passAddressValidation && passAddressValidation !== undefined\n            ? 'outlined-error-helper-text'\n            : undefined\n        }\n        error={!passAddressValidation && passAddressValidation !== undefined}\n      />\n      <TextField\n        label=\"Amount\"\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        type=\"number\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Button\n                onClick={() =>\n                  setTransferAmountString(\n                    balanceAmountToUserAmount(balanceAmount, decimals),\n                  )\n                }\n              >\n                MAX\n              </Button>\n              {tokenSymbol ? tokenSymbol : null}\n            </InputAdornment>\n          ),\n          inputProps: {\n            step: Math.pow(10, -decimals),\n          },\n        }}\n        value={transferAmountString}\n        onChange={(e) => setTransferAmountString(e.target.value.trim())}\n        helperText={\n          <span\n            onClick={() =>\n              setTransferAmountString(\n                balanceAmountToUserAmount(balanceAmount, decimals),\n              )\n            }\n          >\n            Max: {balanceAmountToUserAmount(balanceAmount, decimals)}\n          </span>\n        }\n      />\n    </>\n  );\n\n  return {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  };\n}\n\nfunction balanceAmountToUserAmount(balanceAmount, decimals) {\n  return (balanceAmount / Math.pow(10, decimals)).toFixed(decimals);\n}\n\nfunction EthWithdrawalCompleter({ ethAccount, publicKey }) {\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 10000,\n  });\n  if (!swaps) {\n    return null;\n  }\n  return swaps.map((swap) => (\n    <EthWithdrawalCompleterItem\n      key={swap.deposit.txid}\n      ethAccount={ethAccount}\n      swap={swap}\n    />\n  ));\n}\n\nfunction EthWithdrawalCompleterItem({ ethAccount, swap }) {\n  const callAsync = useCallAsync();\n  const { withdrawal } = swap;\n  useEffect(() => {\n    if (\n      withdrawal.status === 'sent' &&\n      withdrawal.blockchain === 'eth' &&\n      withdrawal.txid &&\n      !withdrawal.txid.startsWith('0x') &&\n      withdrawal.txData\n    ) {\n      withdrawEth(ethAccount, withdrawal, callAsync);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [withdrawal.txid, withdrawal.status]);\n  return null;\n}\n","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddTokenDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/markets.ts",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/TokenInfoDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/CopyableDisplay.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/EthFeeEstimate.tsx",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/Queue.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MultiTokenSender.jsx",["323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340"],"import React, { useContext, useState, useEffect } from 'react';\n\n//imports\n\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { ConnectionContext, useConnection } from '../utils/connection';\nimport { parseMintData, parseTokenAccountData } from '../utils/tokens/data';\nimport { TOKEN_PROGRAM_ID } from '../utils/tokens/instructions';\nimport _ from 'lodash';\nimport Queue from '../utils/Queue';\nimport { getTokenInfo, useTokenInfos } from '../utils/tokens/names';\nimport { WalletGiftcard } from 'mdi-material-ui';\nimport { resolve } from 'path';\nimport { findAssociatedTokenAddress, transferTokens } from '../utils/tokens';\nimport { useWallet } from '../utils/wallet';\nimport { useSendTransaction } from '../utils/notifications';\nimport CSVReader from 'react-csv-reader';\n\nfunction MultiTokenSender() {\n  const [sendTransaction, sending] = useSendTransaction();\n  const [data, setData] = useState(null);\n  const [logs, setLogs] = useState([]);\n  const [successResult, sets] = useState([]);\n\n  // const [items, setItems] = useState([\n  //   {\n  //     name: 'usdc',\n  //     toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //     spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n  //     amountToSend: '1',\n  //   },\n  //   {\n  //     name: 'usdt',\n\n  //     toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //     spl_address: '6AdCQrMEbqoucMeBj64BNE78FmZoocHipJr2eaP8MwWV',\n  //     amountToSend: '1',\n  //   },\n  //   {\n  //     name: 'usdc',\n  //     toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //     spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n  //     amountToSend: '1',\n  //   },\n  //   {\n  //     name: 'usdt',\n\n  //     toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //     spl_address: '6AdCQrMEbqoucMeBj64BNE78FmZoocHipJr2eaP8MwWV',\n  //     amountToSend: '1',\n  //   },\n  //   {\n  //     name: 'usdc',\n  //     toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //     spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n  //     amountToSend: '1',\n  //   },\n  //   {\n  //     name: 'usdt',\n\n  //     toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //     spl_address: '6AdCQrMEbqoucMeBj64BNE78FmZoocHipJr2eaP8MwWV',\n  //     amountToSend: '1',\n  //   },\n  //   {\n  //     name: 'usdc',\n  //     toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //     spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n  //     amountToSend: '1',\n  //   },\n  //   {\n  //     name: 'usdc',\n  //     toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //     spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n  //     amountToSend: '1',\n  //   },\n  //   {\n  //     name: 'usdc',\n  //     toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //     spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n  //     amountToSend: '1',\n  //   },\n  //   {\n  //     name: 'usdc',\n  //     toAddress: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //     spl_address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n  //     amountToSend: '1',\n  //   },\n  //   // {\n  //   //   name: 'serum',\n  //   //   to: 'GHGixvqXFDqDVDZ4tkZk4sL3g4U93dAKuFcRKan2F76N',\n  //   //   spl_address: 'SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt',\n  //   //   amountToSend: '40',\n  //   // }\n  // ]);\n\n  const [queue, setQueue] = useState('');\n  let context = useContext(ConnectionContext);\n  const tokenInfos = useTokenInfos();\n\n  const wallet = useWallet();\n  const { endpoint, setEndpoint, connection } = context;\n\n  useEffect(() => {\n    if (data) {\n      loadToQueue();\n    }\n    return () => {};\n  }, [data]);\n\n  const mapDataToState = (data) => {\n    const mappedData = data.map((item) => ({\n      id: item[0],\n\n      toAddress: item[1],\n      spl_address: item[2],\n      amountToSend: item[3],\n    }));\n\n    setData(mappedData);\n  };\n\n  const loadToQueue = () => {\n    const queue = new Queue();\n    data.map((item) => {\n      const send = () => {\n        return async () => {\n          try {\n            const mint = new PublicKey(item.spl_address);\n            const sourcePublicKey = await findAssociatedTokenAddress(\n              wallet.publicKey,\n              mint,\n            );\n\n            const accountInfo = await connection.getAccountInfo(\n              sourcePublicKey,\n            );\n            const mintInfo = await connection.getAccountInfo(mint);\n            // const infos = getTokenInfo(mint, endpoint, tokenInfos);\n            let { decimals } = parseMintData(mintInfo.data);\n            const amountToSend = (item.amount = Math.round(\n              parseFloat(item.amountToSend) * 10 ** decimals,\n            ));\n            let { owner, amount } = accountInfo?.owner.equals(TOKEN_PROGRAM_ID)\n              ? parseTokenAccountData(accountInfo.data)\n              : {};\n\n            const transaction = {\n              wallet,\n              amountToSend,\n              mint,\n              decimals,\n              override: true,\n              destinationPublicKey: new PublicKey(item.toAddress),\n            };\n\n            const tx = {\n              connection,\n              owner: wallet,\n              sourcePublicKey: sourcePublicKey,\n              destinationPublicKey: transaction.destinationPublicKey,\n              amount: amountToSend,\n              memo: '',\n              mint: mint,\n              decimals: decimals,\n              overrideDestinationCheck: true,\n            };\n\n            const result = await sendTransaction(transferTokens(tx));\n          } catch (error) {\n            console.log(error);\n          }\n        };\n      };\n\n      queue.populateData([send(), item]);\n      console.log(queue);\n    });\n    setQueue(queue);\n    //   });\n  };\n\n  const beginSend = () => {\n    queue.subscribe(setLogs);\n    console.log(queue);\n    setInterval(() => {\n      queue.run();\n    }, 3000);\n  };\n\n  return (\n    <>\n      <h3 style={{ display: 'flex', padding: '1rem', fontWeight: 'bold' }}>\n        Multi Token Sender\n      </h3>\n      <div style={{ display: 'flex', padding: '1rem' }}>\n        <CSVReader\n          onFileLoaded={(data, fileInfo) => {\n            console.dir(data);\n            mapDataToState(data);\n          }}\n          style={{ marginTop: '1.5rem' }}\n        ></CSVReader>\n\n        <button disabled={!data} onClick={beginSend}>\n          Send\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default MultiTokenSender;\n",{"ruleId":"341","replacedBy":"342"},{"ruleId":"343","replacedBy":"344"},{"ruleId":"345","severity":1,"message":"346","line":29,"column":9,"nodeType":"347","messageId":"348","endLine":29,"endColumn":22},{"ruleId":"341","replacedBy":"342"},{"ruleId":"343","replacedBy":"344"},{"ruleId":"345","severity":1,"message":"349","line":6,"column":3,"nodeType":"347","messageId":"348","endLine":6,"endColumn":13},{"ruleId":"345","severity":1,"message":"350","line":21,"column":3,"nodeType":"347","messageId":"348","endLine":21,"endColumn":34},{"ruleId":"345","severity":1,"message":"351","line":22,"column":3,"nodeType":"347","messageId":"348","endLine":22,"endColumn":17},{"ruleId":"345","severity":1,"message":"352","line":55,"column":3,"nodeType":"347","messageId":"348","endLine":55,"endColumn":22},{"ruleId":"345","severity":1,"message":"353","line":56,"column":3,"nodeType":"347","messageId":"348","endLine":56,"endColumn":20},{"ruleId":"345","severity":1,"message":"354","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":34},{"ruleId":"345","severity":1,"message":"355","line":1,"column":36,"nodeType":"347","messageId":"348","endLine":1,"endColumn":47},{"ruleId":"345","severity":1,"message":"356","line":1,"column":49,"nodeType":"347","messageId":"348","endLine":1,"endColumn":58},{"ruleId":"345","severity":1,"message":"357","line":3,"column":3,"nodeType":"347","messageId":"348","endLine":3,"endColumn":26},{"ruleId":"345","severity":1,"message":"358","line":9,"column":10,"nodeType":"347","messageId":"348","endLine":9,"endColumn":17},{"ruleId":"345","severity":1,"message":"359","line":10,"column":10,"nodeType":"347","messageId":"348","endLine":10,"endColumn":27},{"ruleId":"345","severity":1,"message":"360","line":16,"column":10,"nodeType":"347","messageId":"348","endLine":16,"endColumn":33},{"ruleId":"345","severity":1,"message":"361","line":17,"column":27,"nodeType":"347","messageId":"348","endLine":17,"endColumn":32},{"ruleId":"345","severity":1,"message":"362","line":22,"column":9,"nodeType":"347","messageId":"348","endLine":22,"endColumn":24},{"ruleId":"345","severity":1,"message":"363","line":25,"column":10,"nodeType":"347","messageId":"348","endLine":25,"endColumn":25},{"ruleId":"345","severity":1,"message":"364","line":31,"column":12,"nodeType":"347","messageId":"348","endLine":31,"endColumn":26},{"ruleId":"345","severity":1,"message":"354","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":34},{"ruleId":"345","severity":1,"message":"355","line":1,"column":36,"nodeType":"347","messageId":"348","endLine":1,"endColumn":47},{"ruleId":"345","severity":1,"message":"365","line":6,"column":11,"nodeType":"347","messageId":"348","endLine":6,"endColumn":18},{"ruleId":"345","severity":1,"message":"366","line":7,"column":12,"nodeType":"347","messageId":"348","endLine":7,"endColumn":26},{"ruleId":"345","severity":1,"message":"367","line":7,"column":28,"nodeType":"347","messageId":"348","endLine":7,"endColumn":43},{"ruleId":"368","severity":1,"message":"369","line":21,"column":50,"nodeType":"370","messageId":"371","endLine":21,"endColumn":52},{"ruleId":"345","severity":1,"message":"372","line":93,"column":14,"nodeType":"347","messageId":"348","endLine":93,"endColumn":34},{"ruleId":"345","severity":1,"message":"356","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":26},{"ruleId":"345","severity":1,"message":"373","line":8,"column":10,"nodeType":"347","messageId":"348","endLine":8,"endColumn":19},{"ruleId":"345","severity":1,"message":"359","line":9,"column":10,"nodeType":"347","messageId":"348","endLine":9,"endColumn":27},{"ruleId":"345","severity":1,"message":"374","line":10,"column":8,"nodeType":"347","messageId":"348","endLine":10,"endColumn":22},{"ruleId":"345","severity":1,"message":"375","line":11,"column":10,"nodeType":"347","messageId":"348","endLine":11,"endColumn":22},{"ruleId":"345","severity":1,"message":"376","line":12,"column":10,"nodeType":"347","messageId":"348","endLine":12,"endColumn":24},{"ruleId":"345","severity":1,"message":"377","line":12,"column":26,"nodeType":"347","messageId":"348","endLine":12,"endColumn":39},{"ruleId":"345","severity":1,"message":"378","line":13,"column":10,"nodeType":"347","messageId":"348","endLine":13,"endColumn":25},{"ruleId":"345","severity":1,"message":"379","line":14,"column":8,"nodeType":"347","messageId":"348","endLine":14,"endColumn":12},{"ruleId":"345","severity":1,"message":"380","line":15,"column":8,"nodeType":"347","messageId":"348","endLine":15,"endColumn":11},{"ruleId":"345","severity":1,"message":"381","line":16,"column":8,"nodeType":"347","messageId":"348","endLine":16,"endColumn":25},{"ruleId":"345","severity":1,"message":"382","line":18,"column":3,"nodeType":"347","messageId":"348","endLine":18,"endColumn":26},{"ruleId":"345","severity":1,"message":"383","line":19,"column":3,"nodeType":"347","messageId":"348","endLine":19,"endColumn":18},{"ruleId":"345","severity":1,"message":"384","line":21,"column":3,"nodeType":"347","messageId":"348","endLine":21,"endColumn":14},{"ruleId":"345","severity":1,"message":"385","line":25,"column":5,"nodeType":"347","messageId":"348","endLine":25,"endColumn":19},{"ruleId":"345","severity":1,"message":"386","line":28,"column":10,"nodeType":"347","messageId":"348","endLine":28,"endColumn":23},{"ruleId":"345","severity":1,"message":"387","line":30,"column":19,"nodeType":"347","messageId":"348","endLine":30,"endColumn":35},{"ruleId":"345","severity":1,"message":"346","line":36,"column":11,"nodeType":"347","messageId":"348","endLine":36,"endColumn":24},{"ruleId":"345","severity":1,"message":"388","line":37,"column":12,"nodeType":"347","messageId":"348","endLine":37,"endColumn":15},{"ruleId":"345","severity":1,"message":"389","line":37,"column":17,"nodeType":"347","messageId":"348","endLine":37,"endColumn":23},{"ruleId":"345","severity":1,"message":"390","line":41,"column":22,"nodeType":"347","messageId":"348","endLine":41,"endColumn":33},{"ruleId":"345","severity":1,"message":"391","line":42,"column":29,"nodeType":"347","messageId":"348","endLine":42,"endColumn":36},{"ruleId":"345","severity":1,"message":"392","line":48,"column":11,"nodeType":"347","messageId":"348","endLine":48,"endColumn":21},{"ruleId":"345","severity":1,"message":"359","line":10,"column":10,"nodeType":"347","messageId":"348","endLine":10,"endColumn":27},{"ruleId":"345","severity":1,"message":"393","line":41,"column":7,"nodeType":"347","messageId":"348","endLine":41,"endColumn":14},{"ruleId":"345","severity":1,"message":"394","line":197,"column":10,"nodeType":"347","messageId":"348","endLine":197,"endColumn":18},{"ruleId":"345","severity":1,"message":"395","line":197,"column":20,"nodeType":"347","messageId":"348","endLine":197,"endColumn":31},{"ruleId":"345","severity":1,"message":"396","line":198,"column":10,"nodeType":"347","messageId":"348","endLine":198,"endColumn":18},{"ruleId":"345","severity":1,"message":"397","line":198,"column":20,"nodeType":"347","messageId":"348","endLine":198,"endColumn":31},{"ruleId":"398","severity":1,"message":"399","line":303,"column":20,"nodeType":"400","messageId":"401","endLine":303,"endColumn":22},{"ruleId":"402","severity":1,"message":"403","line":321,"column":6,"nodeType":"404","endLine":321,"endColumn":11,"suggestions":"405"},{"ruleId":"345","severity":1,"message":"406","line":731,"column":10,"nodeType":"347","messageId":"348","endLine":731,"endColumn":32},{"ruleId":"345","severity":1,"message":"407","line":5,"column":10,"nodeType":"347","messageId":"348","endLine":5,"endColumn":20},{"ruleId":"345","severity":1,"message":"386","line":6,"column":29,"nodeType":"347","messageId":"348","endLine":6,"endColumn":42},{"ruleId":"345","severity":1,"message":"408","line":9,"column":8,"nodeType":"347","messageId":"348","endLine":9,"endColumn":9},{"ruleId":"345","severity":1,"message":"409","line":11,"column":10,"nodeType":"347","messageId":"348","endLine":11,"endColumn":22},{"ruleId":"345","severity":1,"message":"410","line":12,"column":10,"nodeType":"347","messageId":"348","endLine":12,"endColumn":24},{"ruleId":"345","severity":1,"message":"411","line":13,"column":10,"nodeType":"347","messageId":"348","endLine":13,"endColumn":17},{"ruleId":"345","severity":1,"message":"391","line":20,"column":27,"nodeType":"347","messageId":"348","endLine":20,"endColumn":34},{"ruleId":"345","severity":1,"message":"412","line":22,"column":10,"nodeType":"347","messageId":"348","endLine":22,"endColumn":14},{"ruleId":"345","severity":1,"message":"413","line":23,"column":10,"nodeType":"347","messageId":"348","endLine":23,"endColumn":23},{"ruleId":"345","severity":1,"message":"414","line":23,"column":25,"nodeType":"347","messageId":"348","endLine":23,"endColumn":29},{"ruleId":"345","severity":1,"message":"415","line":99,"column":9,"nodeType":"347","messageId":"348","endLine":99,"endColumn":19},{"ruleId":"345","severity":1,"message":"416","line":102,"column":11,"nodeType":"347","messageId":"348","endLine":102,"endColumn":19},{"ruleId":"345","severity":1,"message":"417","line":102,"column":21,"nodeType":"347","messageId":"348","endLine":102,"endColumn":32},{"ruleId":"402","severity":1,"message":"418","line":109,"column":6,"nodeType":"404","endLine":109,"endColumn":12,"suggestions":"419"},{"ruleId":"398","severity":1,"message":"399","line":125,"column":21,"nodeType":"400","messageId":"401","endLine":125,"endColumn":23},{"ruleId":"345","severity":1,"message":"420","line":144,"column":19,"nodeType":"347","messageId":"348","endLine":144,"endColumn":24},{"ruleId":"345","severity":1,"message":"421","line":144,"column":26,"nodeType":"347","messageId":"348","endLine":144,"endColumn":32},{"ruleId":"345","severity":1,"message":"422","line":169,"column":19,"nodeType":"347","messageId":"348","endLine":169,"endColumn":25},"no-native-reassign",["423"],"no-negated-in-lhs",["424"],"no-unused-vars","'isProdNetwork' is assigned a value but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'transferBetweenSplTokenAccounts' is defined but never used.","'transferTokens' is defined but never used.","'useConnectionConfig' is defined but never used.","'ConnectionContext' is defined but never used.","'useMemo' is defined but never used.","'useCallback' is defined but never used.","'useEffect' is defined but never used.","'refreshWalletPublicKeys' is defined but never used.","'Account' is defined but never used.","'abbreviateAddress' is defined but never used.","'createAndInitializeMint' is defined but never used.","'Paper' is defined but never used.","'updateTokenName' is assigned a value but never used.","'sendTransaction' is assigned a value but never used.","'requestAirdrop' is defined but never used.","'spacing' is assigned a value but never used.","'errorAddresses' is assigned a value but never used.","'setErrorAddress' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'updateErrorLogViewer' is defined but never used.","'PublicKey' is defined but never used.","'InputAdornment' is defined but never used.","'useCallAsync' is defined but never used.","'swapApiRequest' is defined but never used.","'useSwapApiGet' is defined but never used.","'showSwapAddress' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'DialogContentText' is defined but never used.","'ConnectToMetamaskButton' is defined but never used.","'getErc20Balance' is defined but never used.","'withdrawEth' is defined but never used.","'useBalanceInfo' is defined but never used.","'useConnection' is defined but never used.","'LAMPORTS_PER_SOL' is defined but never used.","'tab' is assigned a value but never used.","'setTab' is assigned a value but never used.","'setDecimals' is assigned a value but never used.","'sending' is assigned a value but never used.","'ethAccount' is assigned a value but never used.","'timeout' is assigned a value but never used.","'splitCsv' is assigned a value but never used.","'setSplitCsv' is assigned a value but never used.","'csvIndex' is assigned a value but never used.","'setCsvIndex' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'bulkSend'. Either include it or remove the dependency array.","ArrayExpression",["425"],"'EthWithdrawalCompleter' is defined but never used.","'Connection' is defined but never used.","'_' is defined but never used.","'getTokenInfo' is defined but never used.","'WalletGiftcard' is defined but never used.","'resolve' is defined but never used.","'logs' is assigned a value but never used.","'successResult' is assigned a value but never used.","'sets' is assigned a value but never used.","'tokenInfos' is assigned a value but never used.","'endpoint' is assigned a value but never used.","'setEndpoint' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadToQueue'. Either include it or remove the dependency array.",["426"],"'owner' is assigned a value but never used.","'amount' is assigned a value but never used.","'result' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},"Update the dependencies array to be: [bulkSend, csv]",{"range":"431","text":"432"},"Update the dependencies array to be: [data, loadToQueue]",{"range":"433","text":"434"},[10200,10205],"[bulkSend, csv]",[3662,3668],"[data, loadToQueue]"]