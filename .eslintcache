[{"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/index.js":"1","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/App.js":"2","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/serviceWorker.js":"3","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/connected-wallets.js":"4","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/wallet.js":"5","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/page.js":"6","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/PopupPage.js":"7","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/NavigationFrame.js":"8","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/WalletPage.js":"9","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/LoadingIndicator.js":"10","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/names.js":"11","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/ConnectionsPage.js":"12","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/LoginPage.js":"13","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/utils.ts":"14","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/connection.tsx":"15","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ExportAccountDialog.js":"16","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/BalancesList.js":"17","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/localStorage.js":"18","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/wallet-seed.js":"19","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/instructions.js":"20","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/data.js":"21","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignFormContent.js":"22","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignTransactionFormContent.js":"23","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/clusters.js":"24","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddHarwareWalletDialog.js":"25","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SolanaIcon.js":"26","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DeleteMnemonicDialog.js":"27","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddAccountDialog.js":"28","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ConnectionIcon.js":"29","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DebugButtons.js":"30","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ConnectionsList.js":"31","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ErrorLogViewer.js":"32","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/factory.js":"33","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DialogForm.js":"34","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/notifications.js":"35","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/fetch-loop.ts":"36","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MergeAccountsDialog.js":"37","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/EditAccountNameDialog.js":"38","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MintTokenDialog.js":"39","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/ledger.js":"40","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/index.js":"41","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/TokenInstruction.js":"42","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/ledger-core.js":"43","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/swap/eth.js":"44","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/LabelValue.js":"45","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/config.js":"46","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/swap/api.js":"47","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/DexInstruction.js":"48","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/SystemInstruction.js":"49","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/UnknownInstruction.js":"50","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/NewOrder.js":"51","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/transactions.js":"52","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/TokenIcon.js":"53","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/CloseTokenAccountButton.js":"54","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DepositDialog.js":"55","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SendDialog.js":"56","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddTokenDialog.js":"57","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/markets.ts":"58","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/TokenInfoDialog.js":"59","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/CopyableDisplay.js":"60","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/EthFeeEstimate.tsx":"61","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/Queue.js":"62","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MultiTokenSender.jsx":"63"},{"size":504,"mtime":1630540576231,"results":"64","hashOfConfig":"65"},{"size":2693,"mtime":1630543402474,"results":"66","hashOfConfig":"65"},{"size":5103,"mtime":1630540576232,"results":"67","hashOfConfig":"65"},{"size":975,"mtime":1630540576232,"results":"68","hashOfConfig":"65"},{"size":14833,"mtime":1630567350092,"results":"69","hashOfConfig":"65"},{"size":385,"mtime":1630540576233,"results":"70","hashOfConfig":"65"},{"size":14806,"mtime":1630540576232,"results":"71","hashOfConfig":"65"},{"size":12716,"mtime":1630542912135,"results":"72","hashOfConfig":"65"},{"size":1352,"mtime":1630542247076,"results":"73","hashOfConfig":"65"},{"size":913,"mtime":1630540576230,"results":"74","hashOfConfig":"65"},{"size":13522,"mtime":1630553750566,"results":"75","hashOfConfig":"65"},{"size":866,"mtime":1630540576232,"results":"76","hashOfConfig":"65"},{"size":15428,"mtime":1630540576232,"results":"77","hashOfConfig":"65"},{"size":2971,"mtime":1630540576234,"results":"78","hashOfConfig":"65"},{"size":5811,"mtime":1630582674705,"results":"79","hashOfConfig":"65"},{"size":2369,"mtime":1630540576230,"results":"80","hashOfConfig":"65"},{"size":22675,"mtime":1630593375001,"results":"81","hashOfConfig":"65"},{"size":2150,"mtime":1630540576234,"results":"82","hashOfConfig":"65"},{"size":6821,"mtime":1630540576234,"results":"83","hashOfConfig":"65"},{"size":5215,"mtime":1630540576233,"results":"84","hashOfConfig":"65"},{"size":967,"mtime":1630554414822,"results":"85","hashOfConfig":"65"},{"size":2668,"mtime":1630540576231,"results":"86","hashOfConfig":"65"},{"size":9935,"mtime":1630540576231,"results":"87","hashOfConfig":"65"},{"size":584,"mtime":1630540576232,"results":"88","hashOfConfig":"65"},{"size":5944,"mtime":1630540576229,"results":"89","hashOfConfig":"65"},{"size":929,"mtime":1630540576231,"results":"90","hashOfConfig":"65"},{"size":2212,"mtime":1630540576230,"results":"91","hashOfConfig":"65"},{"size":2588,"mtime":1630540576229,"results":"92","hashOfConfig":"65"},{"size":825,"mtime":1630540576229,"results":"93","hashOfConfig":"65"},{"size":3375,"mtime":1630540576230,"results":"94","hashOfConfig":"65"},{"size":4444,"mtime":1630540576229,"results":"95","hashOfConfig":"65"},{"size":3157,"mtime":1630540576230,"results":"96","hashOfConfig":"65"},{"size":355,"mtime":1630540576234,"results":"97","hashOfConfig":"65"},{"size":720,"mtime":1630540576230,"results":"98","hashOfConfig":"65"},{"size":3095,"mtime":1630540576233,"results":"99","hashOfConfig":"65"},{"size":5715,"mtime":1630540576233,"results":"100","hashOfConfig":"65"},{"size":10219,"mtime":1630540576230,"results":"101","hashOfConfig":"65"},{"size":1316,"mtime":1630540576230,"results":"102","hashOfConfig":"65"},{"size":3929,"mtime":1630540576230,"results":"103","hashOfConfig":"65"},{"size":1819,"mtime":1630540576234,"results":"104","hashOfConfig":"65"},{"size":11114,"mtime":1630582506263,"results":"105","hashOfConfig":"65"},{"size":2119,"mtime":1630540576231,"results":"106","hashOfConfig":"65"},{"size":4603,"mtime":1630540576234,"results":"107","hashOfConfig":"65"},{"size":6767,"mtime":1630540576233,"results":"108","hashOfConfig":"65"},{"size":501,"mtime":1630540576231,"results":"109","hashOfConfig":"65"},{"size":125,"mtime":1630540576232,"results":"110","hashOfConfig":"65"},{"size":1257,"mtime":1630540576233,"results":"111","hashOfConfig":"65"},{"size":2261,"mtime":1630540576231,"results":"112","hashOfConfig":"65"},{"size":1657,"mtime":1630540576231,"results":"113","hashOfConfig":"65"},{"size":1342,"mtime":1630540576231,"results":"114","hashOfConfig":"65"},{"size":1983,"mtime":1630540576231,"results":"115","hashOfConfig":"65"},{"size":13590,"mtime":1630540576234,"results":"116","hashOfConfig":"65"},{"size":626,"mtime":1630540576231,"results":"117","hashOfConfig":"65"},{"size":1727,"mtime":1630540576229,"results":"118","hashOfConfig":"65"},{"size":10401,"mtime":1630540576230,"results":"119","hashOfConfig":"65"},{"size":24095,"mtime":1630556246421,"results":"120","hashOfConfig":"65"},{"size":9091,"mtime":1630540576229,"results":"121","hashOfConfig":"65"},{"size":2219,"mtime":1630540576233,"results":"122","hashOfConfig":"65"},{"size":2257,"mtime":1630540576231,"results":"123","hashOfConfig":"65"},{"size":2402,"mtime":1630540576229,"results":"124","hashOfConfig":"65"},{"size":2090,"mtime":1630540576230,"results":"125","hashOfConfig":"65"},{"size":629,"mtime":1630591674602,"results":"126","hashOfConfig":"65"},{"size":6098,"mtime":1630595080722,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"1nobsn4",{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"130"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"130"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"130"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"130"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"130"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/index.js",[],["261","262"],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/App.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/serviceWorker.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/connected-wallets.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/wallet.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/page.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/PopupPage.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/NavigationFrame.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/WalletPage.js",["263"],"import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport BalancesList from '../components/BalancesList';\nimport Grid from '@material-ui/core/Grid';\nimport { useIsProdNetwork } from '../utils/connection';\nimport DebugButtons from '../components/DebugButtons';\nimport { makeStyles } from '@material-ui/core';\nimport { useIsExtensionWidth } from '../utils/utils';\nimport ErrorLogViewer from '../components/ErrorLogViewer';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    [theme.breakpoints.down(theme.ext)]: {\n      padding: 0,\n    },\n    [theme.breakpoints.up(theme.ext)]: {\n      maxWidth: 'md',\n    },\n  },\n  balancesContainer: {\n    [theme.breakpoints.down(theme.ext)]: {\n      marginBottom: 24,\n    },\n  },\n}));\n\nexport default function WalletPage() {\n  const classes = useStyles();\n  const isProdNetwork = useIsProdNetwork();\n  const isExtensionWidth = useIsExtensionWidth();\n  return (\n    <Container fixed maxWidth=\"md\" className={classes.container}>\n      <Grid container spacing={isExtensionWidth ? 0 : 3}>\n        <Grid item xs={12} className={classes.balancesContainer}>\n          <BalancesList />\n        </Grid>\n\n        <Grid item xs={12}>\n          <DebugButtons />\n        </Grid>\n\n        <Grid item xs={12}>\n          <ErrorLogViewer />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/LoadingIndicator.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/names.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/ConnectionsPage.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/pages/LoginPage.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/utils.ts",[],["264","265"],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/connection.tsx",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ExportAccountDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/BalancesList.js",["266","267","268","269","270"],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/localStorage.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/wallet-seed.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/instructions.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/data.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignFormContent.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SignTransactionFormContent.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/clusters.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddHarwareWalletDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SolanaIcon.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DeleteMnemonicDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddAccountDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ConnectionIcon.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DebugButtons.js",["271","272","273","274","275","276","277","278","279","280","281"],"import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet\n} from '../utils/wallet';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { Account, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { abbreviateAddress, sleep } from '../utils/utils';\nimport {\n  refreshAccountInfo,\n  useConnectionConfig,\n  MAINNET_URL,\n} from '../utils/connection';\nimport { createAndInitializeMint } from '../utils/tokens';\nimport { Tooltip, Button, Paper } from '@material-ui/core';\nimport MintTokenDialog from '../components/MintTokenDialog';\n\nexport default function DebugButtons() {\n  const wallet = useWallet();\n  const updateTokenName = useUpdateTokenName();\n  const { endpoint } = useConnectionConfig();\n  const balanceInfo = useBalanceInfo(wallet.publicKey);\n  const [sendTransaction, sending] = useSendTransaction();\n  const [showMintTokenDialog, setShowMintTokenDialog] = useState(false);\n  const callAsync = useCallAsync();\n\n  let { amount } = balanceInfo || {};\n\n  function requestAirdrop() {\n    callAsync(\n      wallet.connection.requestAirdrop(wallet.publicKey, LAMPORTS_PER_SOL),\n      {\n        onSuccess: async () => {\n          await sleep(5000);\n          refreshAccountInfo(wallet.connection, wallet.publicKey);\n        },\n        successMessage:\n          'Success! Please wait up to 30 seconds for the SOL tokens to appear in your wallet.',\n      },\n    );\n  }\n\n  function mintTestToken() {\n    // let mint = new Account();\n    // updateTokenName(\n    //   mint.publicKey,\n    //   `TEST`,\n    //   `TEST`,\n    // );\n    // sendTransaction(\n    //   createAndInitializeMint({\n    //     connection: wallet.connection,\n    //     owner: wallet,\n    //     mint,\n    //     amount: 1000000000,\n    //     decimals: 0,\n    //     initialAccount: new Account(),\n    //   }),\n    //   { onSuccess: () => refreshWalletPublicKeys(wallet) },\n    // );\n    setShowMintTokenDialog(true);\n\n  }\n\n  const noSol = amount === 0;\n  const requestAirdropDisabled = endpoint === MAINNET_URL;\n  const spacing = 24;\n  return (\n    <div style={{ display: 'flex', marginLeft: spacing }}>\n\n      <Tooltip\n        title={\n          requestAirdropDisabled\n            ? 'Receive some devnet SOL for free. Only enabled on the devnet'\n            : 'Receive some devnet SOL for free'\n        }\n      >\n        <span>\n          {/* <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={requestAirdrop}\n            disabled={requestAirdropDisabled}\n          >\n            Request Airdrop\n          </Button> */}\n        </span>\n      </Tooltip>\n      <Tooltip\n        title={\n          noSol\n            ? 'Generate and receive balances in a new test token. Requires SOL balance'\n            : 'Generate and receive balances in a new test token'\n        }\n      >\n        <span>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={mintTestToken}\n            disabled={sending || noSol}\n            style={{ marginLeft: spacing }}\n          >\n            Mint A Token\n          </Button>\n          <MintTokenDialog open={showMintTokenDialog} onClose={()=>setShowMintTokenDialog(false)} />\n        </span>\n      </Tooltip>\n    </div>\n    \n  );\n}\n","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ConnectionsList.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/ErrorLogViewer.js",["282","283","284","285","286","287","288"],"import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { TextareaAutosize, Paper } from '@material-ui/core';\nimport EventEmitter from \"reactjs-eventemitter\";\n\nexport default function ErrorLogViewer(){\n    const spacing = 24;\n    const [errorAddresses, setErrorAddress] = useState([]);\n    const [errorAddressString, setErrorAddressString] = useState('');\n    const [lastOkAddress, setLastOkAddress] = useState('');\n    const [totalSuccess, setTotalSuccess] = useState(0);\n    const [totalErrors, setTotalErrors] = useState(0);\n\n\n    useEffect( ()=>{\n\n\n\n        EventEmitter.subscribe('ERROR_ADDRESS', errorAddress => {\n\n            console.log('ERROR ADDRESS', errorAddress);\n            if(errorAddress!=null && errorAddress!=''){\n        \n                setErrorAddressString((prevState) =>{\n                    let addressStr =prevState;\n                    addressStr += errorAddress +',';\n                    return addressStr;\n                });\n              \n                setTotalErrors((prevState)=> {\n\n                    return prevState + 1;\n                });\n    \n            }else{}      \n            \n        \n        });\n    \n        EventEmitter.subscribe('SUCCESS_ADDRESS', okAddress => {\n    \n            setLastOkAddress(okAddress);\n           \n            setTotalSuccess((prevState) => {\n\n                return prevState + 1;\n            });     \n            \n        \n        })\n\n\n\n\n    }, [])\n\n\n\n\n\n\n    // Emitter.on('ERROR_ADDRESS', (errorAddress) => {\n    //     console.log('ERROR ADDRESS', errorAddress);\n    //     if(errorAddress!=null && errorAddress!=''){\n\n    //         let addressStr = errorAddressString;\n\n    //         addressStr += errorAddress +',';\n    \n    //         setErrorAddressString(addressStr);\n    //         let totalError = totalErrors + 1;\n    //         setTotalErrors(totalError);\n\n    //     }else{}\n\n    // });\n    \n    // Emitter.on('SUCCESS_ADDRESS', (okAddress) => {\n\n    //     setLastOkAddress(okAddress);\n    //     let totalSuccessVal = totalSuccess+1;\n        \n    //     setTotalSuccess(totalSuccessVal);\n\n\n    // });\n\n    // useEffect(()=> {\n\n\n\n    // }, [])\n\n    function updateErrorLogViewer(address){\n\n        console.log('error here...', address);\n    }\n\n    return (\n\n        <div style={{ display: 'flex', width: \"100%\" }}>\n                {/* Last Successful Airdrop Address:  {lastOkAddress}\n                <p></p>\n                Successfully Completed Airdrops:  {totalSuccess}\n                <p></p>\n                Unsuccessful Airdrops:  {totalErrors} */}\n\n            <Paper  style={{ width: \"100%\"}}  >\n                Last Successful Airdrop Address:  {lastOkAddress}\n                <p></p>\n                Successfully Completed Airdrops:  {totalSuccess}\n                <p></p>\n                Unsuccessful Airdrops:  {totalErrors}\n                <p></p>\n                <TextareaAutosize aria-label=\"empty textarea\" defaultValue={errorAddressString} placeholder=\"Unprocessed addresses will appear here.\" style={{ width: \"100%\", height:\"500px\" }} /> \n             </Paper>   \n                   \n        \n        </div>\n\n\n    );\n\n\n\n}","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/factory.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DialogForm.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/notifications.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/fetch-loop.ts",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MergeAccountsDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/EditAccountNameDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MintTokenDialog.js",["289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311"],"import React, { useEffect, useRef, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport DialogForm from './DialogForm';\nimport { PublicKey } from '@solana/web3.js';\nimport { abbreviateAddress } from '../utils/utils';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n  ConnectToMetamaskButton,\n  getErc20Balance,\n  useEthAccount,\n  withdrawEth,\n} from '../utils/swap/eth';\nimport {\n    refreshWalletPublicKeys,\n    useBalanceInfo,\n    useWallet\n  } from '../utils/wallet';\nimport { useConnection, useIsProdNetwork } from '../utils/connection';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { Account, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createAndInitializeMint } from '../utils/tokens';\n\nexport default function MintTokenDialog({open, onClose, publicKey}){\n\n    const updateTokenName = useUpdateTokenName();\n    const isProdNetwork = useIsProdNetwork();\n    const [tab, setTab] = useState('spl');\n    const [name, setName] = useState('name');\n    const [symbol, setSymbol] = useState('symbol');\n    const [amount, setAmount] = useState('amount');\n    const [decimals, setDecimals] = useState('decimals');\n    const [sendTransaction, sending] = useSendTransaction();\n\n    const wallet = useWallet();\n\n  \n    const onSubmitRef = useRef();\n    const ethAccount = useEthAccount();\n\n    function mintTestToken() {\n        console.log(name,symbol,amount,decimals);\n        let mint = new Account();\n        updateTokenName(\n          mint.publicKey,\n          name,\n          symbol,\n        );\n        sendTransaction(\n          createAndInitializeMint({\n            connection: wallet.connection,\n            owner: wallet,\n            mint,\n            amount: (Number(amount)*1000000),\n            decimals: 6,\n            initialAccount: new Account(),\n          }),\n          { onSuccess: (e) => {console.log('event:'+e);refreshWalletPublicKeys(wallet)} },\n        );\n      \n    \n      }\n\n\n    return (\n        <>\n            <DialogForm\n                open={open}\n                onClose={onClose}\n                onSubmit={() => onSubmitRef.current()}\n                fullWidth\n            >\n\n                <DialogTitle>\n                    MINT A TOKEN (6 Decimals)\n                </DialogTitle>\n                <DialogContent style={{ paddingTop: 16}}>\n                <TextField\n                    label='Name'\n                 \n                    onChange={(e) => setName(e.target.value.trim())}\n                ></TextField>\n                <TextField\n                    label='Symbol'\n                 \n                    onChange={(e) => setSymbol(e.target.value.trim())}\n                ></TextField>\n                <TextField\n                    label='Amount'\n              \n                    onChange={(e) => setAmount(e.target.value.trim())}\n                ></TextField> \n                {/* <TextField\n                    label='Decimals'\n                    \n                    onChange={(e) => setDecimals(e.target.value.trim())}\n                ></TextField>                                                    */}\n                </DialogContent>\n\n                <DialogActions>\n                    <Button onClick={mintTestToken}>Mint</Button>\n                </DialogActions>\n\n\n            </DialogForm>\n        </>\n\n\n\n    );\n\n\n\n\n\n}","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/ledger.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/tokens/index.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/TokenInstruction.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/walletProvider/ledger-core.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/swap/eth.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/LabelValue.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/config.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/swap/api.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/DexInstruction.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/SystemInstruction.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/UnknownInstruction.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/instructions/NewOrder.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/transactions.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/TokenIcon.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/CloseTokenAccountButton.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/DepositDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/SendDialog.js",["312","313","314","315","316","317","318","319","320"],"import React, { useEffect, useRef, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport DialogForm from './DialogForm';\nimport { useWallet, useWalletAddressForMint } from '../utils/wallet';\nimport { PublicKey } from '@solana/web3.js';\nimport { abbreviateAddress } from '../utils/utils';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n  ConnectToMetamaskButton,\n  getErc20Balance,\n  useEthAccount,\n  withdrawEth,\n} from '../utils/swap/eth';\nimport { useConnection, useIsProdNetwork } from '../utils/connection';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  TOKEN_PROGRAM_ID,\n  WRAPPED_SOL_MINT,\n} from '../utils/tokens/instructions';\nimport { parseTokenAccountData } from '../utils/tokens/data';\nimport { Switch, Tooltip } from '@material-ui/core';\nimport { EthFeeEstimate } from './EthFeeEstimate';\nimport CSVReader from 'react-csv-reader';\n\nconst timeout = (ms) => new Promise((res) => setTimeout(res, ms));\n\nconst WUSDC_MINT = new PublicKey(\n  'BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW',\n);\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\n\nconst WUSDT_MINT = new PublicKey(\n  'BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4',\n);\n\nconst USDT_MINT = new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB');\n\nexport default function SendDialog({ open, onClose, publicKey, balanceInfo }) {\n  const isProdNetwork = useIsProdNetwork();\n  const [tab, setTab] = useState('spl');\n\n  const onSubmitRef = useRef();\n\n  const [swapCoinInfo] = useSwapApiGet(\n    showSwapAddress && balanceInfo.mint && isProdNetwork\n      ? `coins/sol/${balanceInfo.mint.toBase58()}`\n      : null,\n  );\n  const ethAccount = useEthAccount();\n\n  const { mint, tokenName, tokenSymbol } = balanceInfo;\n\n  const getTabs = (mint) => {\n    if (mint?.equals(WUSDC_MINT)) {\n      return [\n        <Tab label=\"SPL WUSDC\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"SPL USDC\" key=\"wusdcToSplUsdc\" value=\"wusdcToSplUsdc\" />,\n        <Tab label=\"ERC20 USDC\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else if (mint?.equals(WUSDT_MINT)) {\n      return [\n        <Tab label=\"SPL WUSDT\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"SPL USDT\" key=\"wusdtToSplUsdt\" value=\"wusdtToSplUsdt\" />,\n        <Tab label=\"ERC20 USDT\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else if (\n      localStorage.getItem('sollet-private') &&\n      mint?.equals(USDC_MINT)\n    ) {\n      return [\n        <Tab label=\"SPL USDC\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"SPL WUSDC\" key=\"usdcToSplWUsdc\" value=\"usdcToSplWUsdc\" />,\n        <Tab label=\"ERC20 USDC\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else {\n      return [\n        <Tab label={`SPL ${swapCoinInfo.ticker}`} key=\"spl\" value=\"spl\" />,\n        <Tab\n          label={`${swapCoinInfo.erc20Contract ? 'ERC20' : 'Native'} ${\n            swapCoinInfo.ticker\n          }`}\n          key=\"swap\"\n          value=\"swap\"\n        />,\n      ];\n    }\n  };\n\n  return (\n    <>\n      <DialogForm\n        open={open}\n        onClose={onClose}\n        onSubmit={() => onSubmitRef.current()}\n        fullWidth\n      >\n        <DialogTitle>\n          Send {tokenName}\n          {tokenSymbol}\n          {ethAccount && (\n            <div>\n              <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n                Metamask connected: {ethAccount}\n              </Typography>\n            </div>\n          )}\n        </DialogTitle>\n        {swapCoinInfo ? (\n          <Tabs\n            value={tab}\n            variant=\"fullWidth\"\n            onChange={(e, value) => setTab(value)}\n            textColor=\"primary\"\n            indicatorColor=\"primary\"\n          >\n            {getTabs(mint)}\n          </Tabs>\n        ) : null}\n\n        {tab === 'spl' ? (\n          <SendSplDialog\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            onSubmitRef={onSubmitRef}\n          />\n        ) : tab === 'wusdcToSplUsdc' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            wusdcToSplUsdc\n          />\n        ) : tab === 'wusdtToSplUsdt' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            wusdtToSplUsdt\n          />\n        ) : tab === 'usdcToSplWUsdc' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            usdcToSplWUsdc\n          />\n        ) : (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            ethAccount={ethAccount}\n            onSubmitRef={onSubmitRef}\n          />\n        )}\n      </DialogForm>\n    </>\n  );\n}\n\nfunction SendSplDialog({ onClose, publicKey, balanceInfo, onSubmitRef }) {\n  const defaultAddressHelperText =\n    !balanceInfo.mint || balanceInfo.mint.equals(WRAPPED_SOL_MINT)\n      ? 'Enter Solana Address'\n      : 'Enter SPL token or Solana address';\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [csv, setCsv] = useState([]);\n  const [splitCsv, setSplitCsv] = useState([]);\n  const [csvIndex, setCsvIndex] = useState(0);\n  const [addressHelperText, setAddressHelperText] = useState(\n    defaultAddressHelperText,\n  );\n  const [passValidation, setPassValidation] = useState();\n  const [overrideDestinationCheck, setOverrideDestinationCheck] = useState(\n    false,\n  );\n  const [shouldShowOverride, setShouldShowOverride] = useState();\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    validAmount,\n  } = useForm(balanceInfo, addressHelperText, passValidation);\n  const { decimals, mint } = balanceInfo;\n  const mintString = mint && mint.toBase58();\n\n  useEffect(() => {\n    (async () => {\n      if (!destinationAddress) {\n        setAddressHelperText(defaultAddressHelperText);\n        setPassValidation(undefined);\n        setShouldShowOverride(undefined);\n        return;\n      }\n      try {\n        const destinationAccountInfo = await wallet.connection.getAccountInfo(\n          new PublicKey(destinationAddress),\n        );\n        setShouldShowOverride(false);\n\n        if (destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID)) {\n          const accountInfo = parseTokenAccountData(\n            destinationAccountInfo.data,\n          );\n          if (accountInfo.mint.toBase58() === mintString) {\n            setPassValidation(true);\n            setAddressHelperText('Address is a valid SPL token address');\n          } else {\n            setPassValidation(false);\n            setAddressHelperText('Destination address mint does not match');\n          }\n        } else {\n          setPassValidation(true);\n          setAddressHelperText('Destination is a Solana address');\n        }\n      } catch (e) {\n        console.log(`Received error validating address ${e}`);\n        setAddressHelperText(defaultAddressHelperText);\n        setShouldShowOverride(true);\n        setPassValidation(undefined);\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [destinationAddress, wallet, mintString]);\n\n  useEffect(() => {\n    return () => {\n      setOverrideDestinationCheck(false);\n    };\n  }, [setOverrideDestinationCheck]);\n\n  async function makeTransaction2(address) {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    console.log(amount);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(address),\n      amount,\n      balanceInfo.mint,\n      decimals,\n      null,\n      overrideDestinationCheck,\n    );\n  }\n\n  console.log(balanceInfo);\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(destinationAddress),\n      amount,\n      balanceInfo.mint,\n      decimals,\n      null,\n      overrideDestinationCheck,\n    );\n  }\n\n  const disabled = shouldShowOverride\n    ? !overrideDestinationCheck || sending || !validAmount\n    : sending || !validAmount;\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), { onSuccess: onClose });\n  }\n\n  async function bulkSend() {\n    // if(csv!=null){\n    //   let split = csv[0];\n    //   console.log(split);\n    //   for(let i=0; i<split.length; i++){\n    //     try{\n    //       setTimeout(async ()=>{\n    //         let address = split[0];\n    //         if(!address.toLowerCase().startsWith('0x')){\n    //           console.log('txn executing  for ', address);\n    //           //await sendTransaction(makeTransaction2(address), { onSuccess: onClose });\n    //           console.log('txn executed for ', address);\n    //         }\n    //       },5000)\n    //       //await timeout(1000);\n    //     }catch(e){\n    //       console.log('problem with address ',e);\n    //     }\n    //   }\n    // }\n    // await sendTransaction(makeTransaction2('9iRXi2GrbVv4xCXfjmwvyx6Axa4Uk3nVMVHxWUiPA4GS'), { onSuccess: onClose });\n  }\n\n  async function sendTransactionAuto(address) {\n    return await sendTransaction(\n      makeTransaction2(address),\n      { onSuccess: onClose },\n      address,\n    );\n  }\n\n  useEffect(async () => {\n    let index = 0;\n    if (csv != null && csv[0] && csv[0].length > 0) {\n      let csvArray = csv[0];\n      setInterval(\n        () => {\n          try {\n            if (index < csvArray.length) {\n              let address = csvArray[index];\n              console.log('sending to', address, index);\n              let status = sendTransactionAuto(address);\n              console.log('sent', address, index, status);\n              index++;\n            } else {\n            }\n          } catch (e) {\n            console.log('error sending transaction ', e, csvArray[index]);\n          }\n        },\n        5000,\n        csvIndex,\n      );\n    }\n\n    // if(csv!=null){\n\n    //   let split = csv[0];\n    //   console.log(split);\n    //   if(split!=null){\n\n    //   for(let i=0; i<split.length; i++){\n    //     try{\n\n    //       setTimeout(async ()=>{\n    //         let address = split[i];\n    //         if(!address.toLowerCase().startsWith('0x')){\n    //           console.log('txn executing  for ', address);\n    //           //await sendTransaction(makeTransaction2(address), { onSuccess: onClose });\n    //           console.log('txn executed for ', address);\n\n    //         }\n\n    //       },5000)\n\n    //       //await timeout(1000);\n\n    //     }catch(e){\n    //       console.log('problem with address ',e);\n    //     }\n\n    //   }\n    // }\n    // }\n  }, [csv.length]);\n\n  onSubmitRef.current = onSubmit;\n  return (\n    <>\n      <DialogContent>{fields}</DialogContent>\n      <DialogActions>\n        {shouldShowOverride && (\n          <div\n            style={{\n              'align-items': 'center',\n              display: 'flex',\n              'text-align': 'left',\n            }}\n          >\n            <b>This address has no funds. Are you sure it's correct?</b>\n            <Switch\n              checked={overrideDestinationCheck}\n              onChange={(e) => setOverrideDestinationCheck(e.target.checked)}\n              color=\"primary\"\n            />\n          </div>\n        )}\n        <b>Distributor will start automatically after csv file selected</b>\n        <CSVReader onFileLoaded={(data, fileInfo) => setCsv(data)} />\n        {/* <Button onClick={bulkSend}>Bulk Send</Button> */}\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" color=\"primary\" disabled={disabled}>\n          Send\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n\nfunction SendSwapDialog({\n  onClose,\n  publicKey,\n  balanceInfo,\n  swapCoinInfo,\n  ethAccount,\n  wusdcToSplUsdc = false,\n  wusdtToSplUsdt = false,\n  usdcToSplWUsdc = false,\n  onSubmitRef,\n}) {\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [signature, setSignature] = useState(null);\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  } = useForm(balanceInfo);\n\n  const { tokenName, decimals, mint } = balanceInfo;\n  const blockchain =\n    wusdcToSplUsdc || wusdtToSplUsdt || usdcToSplWUsdc\n      ? 'sol'\n      : swapCoinInfo.blockchain === 'sol'\n      ? 'eth'\n      : swapCoinInfo.blockchain;\n  const needMetamask = blockchain === 'eth';\n\n  const [ethBalance] = useAsyncData(\n    () => getErc20Balance(ethAccount),\n    'ethBalance',\n    {\n      refreshInterval: 2000,\n    },\n  );\n  const ethFeeData = useSwapApiGet(\n    blockchain === 'eth' &&\n      `fees/eth/${ethAccount}` +\n        (swapCoinInfo.erc20Contract ? '/' + swapCoinInfo.erc20Contract : ''),\n    { refreshInterval: 2000 },\n  );\n  const [ethFeeEstimate] = ethFeeData;\n  const insufficientEthBalance =\n    typeof ethBalance === 'number' &&\n    typeof ethFeeEstimate === 'number' &&\n    ethBalance < ethFeeEstimate;\n\n  useEffect(() => {\n    if (blockchain === 'eth' && ethAccount) {\n      setDestinationAddress(ethAccount);\n    }\n  }, [blockchain, ethAccount, setDestinationAddress]);\n\n  let splUsdcWalletAddress = useWalletAddressForMint(\n    wusdcToSplUsdc ? USDC_MINT : null,\n  );\n  let splUsdtWalletAddress = useWalletAddressForMint(\n    wusdtToSplUsdt ? USDT_MINT : null,\n  );\n  let splWUsdcWalletAddress = useWalletAddressForMint(\n    usdcToSplWUsdc ? WUSDC_MINT : null,\n  );\n  useEffect(() => {\n    if (wusdcToSplUsdc && splUsdcWalletAddress) {\n      setDestinationAddress(splUsdcWalletAddress);\n    } else if (wusdtToSplUsdt && splUsdtWalletAddress) {\n      setDestinationAddress(splUsdtWalletAddress);\n    } else if (usdcToSplWUsdc && splWUsdcWalletAddress) {\n      setDestinationAddress(splWUsdcWalletAddress);\n    }\n  }, [\n    setDestinationAddress,\n    wusdcToSplUsdc,\n    splUsdcWalletAddress,\n    wusdtToSplUsdt,\n    splUsdtWalletAddress,\n    usdcToSplWUsdc,\n    splWUsdcWalletAddress,\n  ]);\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    const params = {\n      blockchain,\n      address: destinationAddress,\n      size: amount / 10 ** decimals,\n    };\n    if (blockchain === 'sol') {\n      params.coin = swapCoinInfo.splMint;\n    } else if (blockchain === 'eth') {\n      params.coin = swapCoinInfo.erc20Contract;\n    }\n    if (mint?.equals(WUSDC_MINT)) {\n      params.wusdcToUsdc = true;\n    } else if (mint?.equals(USDC_MINT)) {\n      if (usdcToSplWUsdc) {\n        params.usdcToWUsdc = true;\n        params.coin = WUSDC_MINT.toString();\n      }\n    } else if (mint?.equals(WUSDT_MINT)) {\n      params.wusdtToUsdt = true;\n    }\n    const swapInfo = await swapApiRequest('POST', 'swap_to', params);\n    if (swapInfo.blockchain !== 'sol') {\n      throw new Error('Unexpected blockchain');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(swapInfo.address),\n      amount,\n      balanceInfo.mint,\n      decimals,\n      swapInfo.memo,\n    );\n  }\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), { onSuccess: setSignature });\n  }\n  onSubmitRef.current = onSubmit;\n\n  if (signature) {\n    return (\n      <SendSwapProgress\n        key={signature}\n        publicKey={publicKey}\n        signature={signature}\n        blockchain={blockchain}\n        onClose={onClose}\n      />\n    );\n  }\n\n  let sendButton = (\n    <Button\n      type=\"submit\"\n      color=\"primary\"\n      disabled={\n        sending ||\n        (needMetamask && !ethAccount) ||\n        !validAmount ||\n        insufficientEthBalance\n      }\n    >\n      Send\n    </Button>\n  );\n\n  if (insufficientEthBalance) {\n    sendButton = (\n      <Tooltip\n        title=\"Insufficient ETH for withdrawal transaction fee\"\n        placement=\"top\"\n      >\n        <span>{sendButton}</span>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <DialogContent style={{ paddingTop: 16 }}>\n        <DialogContentText>\n          SPL {tokenName} can be converted to{' '}\n          {blockchain === 'eth' && swapCoinInfo.erc20Contract\n            ? 'ERC20'\n            : blockchain === 'sol' && swapCoinInfo.splMint\n            ? 'SPL'\n            : 'native'}{' '}\n          {swapCoinInfo.ticker}\n          {needMetamask ? ' via MetaMask' : null}.\n        </DialogContentText>\n        {blockchain === 'eth' && (\n          <DialogContentText>\n            Estimated withdrawal transaction fee:\n            <EthFeeEstimate\n              ethFeeData={ethFeeData}\n              insufficientEthBalance={insufficientEthBalance}\n            />\n          </DialogContentText>\n        )}\n        {needMetamask && !ethAccount ? <ConnectToMetamaskButton /> : fields}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        {sendButton}\n      </DialogActions>\n    </>\n  );\n}\n\nfunction SendSwapProgress({ publicKey, signature, onClose, blockchain }) {\n  const connection = useConnection();\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 1000,\n  });\n  const [confirms] = useAsyncData(\n    async () => {\n      const { value } = await connection.getSignatureStatus(signature);\n      return value?.confirmations;\n    },\n    [connection.getSignatureStatus, signature],\n    { refreshInterval: 2000 },\n  );\n\n  let step = 1;\n  let ethTxid = null;\n  for (let swap of swaps || []) {\n    const { deposit, withdrawal } = swap;\n    if (deposit.txid === signature) {\n      if (withdrawal.txid?.startsWith('0x')) {\n        step = 3;\n        ethTxid = withdrawal.txid;\n      } else if (withdrawal.txid && blockchain !== 'eth') {\n        step = 3;\n      } else {\n        step = 2;\n      }\n    }\n  }\n\n  return (\n    <>\n      <DialogContent>\n        <Stepper activeStep={step}>\n          <Step>\n            <StepLabel>Send Request</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Wait for Confirmations</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Withdraw Funds</StepLabel>\n          </Step>\n        </Stepper>\n        {ethTxid ? (\n          <Typography variant=\"body2\" align=\"center\">\n            <Link\n              href={`https://etherscan.io/tx/${ethTxid}`}\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              View on Etherscan\n            </Link>\n          </Typography>\n        ) : step < 3 ? (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <div style={{ marginRight: 16 }}>\n              <CircularProgress />\n            </div>\n            {confirms ? (\n              <Typography>{confirms} / 35 Confirmations</Typography>\n            ) : (\n              <Typography>Transaction Pending</Typography>\n            )}\n          </div>\n        ) : null}\n        {!ethTxid && blockchain === 'eth' ? (\n          <DialogContentText style={{ marginTop: 16, marginBottom: 0 }}>\n            Please keep this window open. You will need to approve the request\n            on MetaMask to complete the transaction.\n          </DialogContentText>\n        ) : null}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </>\n  );\n}\n\nfunction useForm(\n  balanceInfo,\n  addressHelperText,\n  passAddressValidation,\n  overrideValidation,\n) {\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [transferAmountString, setTransferAmountString] = useState('');\n  const { amount: balanceAmount, decimals, tokenSymbol } = balanceInfo;\n\n  const parsedAmount = parseFloat(transferAmountString) * 10 ** decimals;\n  const validAmount = parsedAmount > 0 && parsedAmount <= balanceAmount;\n\n  const fields = (\n    <>\n      <TextField\n        label=\"Recipient Address\"\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        value={destinationAddress}\n        onChange={(e) => setDestinationAddress(e.target.value.trim())}\n        helperText={addressHelperText}\n        id={\n          !passAddressValidation && passAddressValidation !== undefined\n            ? 'outlined-error-helper-text'\n            : undefined\n        }\n        error={!passAddressValidation && passAddressValidation !== undefined}\n      />\n      <TextField\n        label=\"Amount\"\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        type=\"number\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Button\n                onClick={() =>\n                  setTransferAmountString(\n                    balanceAmountToUserAmount(balanceAmount, decimals),\n                  )\n                }\n              >\n                MAX\n              </Button>\n              {tokenSymbol ? tokenSymbol : null}\n            </InputAdornment>\n          ),\n          inputProps: {\n            step: Math.pow(10, -decimals),\n          },\n        }}\n        value={transferAmountString}\n        onChange={(e) => setTransferAmountString(e.target.value.trim())}\n        helperText={\n          <span\n            onClick={() =>\n              setTransferAmountString(\n                balanceAmountToUserAmount(balanceAmount, decimals),\n              )\n            }\n          >\n            Max: {balanceAmountToUserAmount(balanceAmount, decimals)}\n          </span>\n        }\n      />\n    </>\n  );\n\n  return {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  };\n}\n\nfunction balanceAmountToUserAmount(balanceAmount, decimals) {\n  return (balanceAmount / Math.pow(10, decimals)).toFixed(decimals);\n}\n\nfunction EthWithdrawalCompleter({ ethAccount, publicKey }) {\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 10000,\n  });\n  if (!swaps) {\n    return null;\n  }\n  return swaps.map((swap) => (\n    <EthWithdrawalCompleterItem\n      key={swap.deposit.txid}\n      ethAccount={ethAccount}\n      swap={swap}\n    />\n  ));\n}\n\nfunction EthWithdrawalCompleterItem({ ethAccount, swap }) {\n  const callAsync = useCallAsync();\n  const { withdrawal } = swap;\n  useEffect(() => {\n    if (\n      withdrawal.status === 'sent' &&\n      withdrawal.blockchain === 'eth' &&\n      withdrawal.txid &&\n      !withdrawal.txid.startsWith('0x') &&\n      withdrawal.txData\n    ) {\n      withdrawEth(ethAccount, withdrawal, callAsync);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [withdrawal.txid, withdrawal.status]);\n  return null;\n}\n","/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/AddTokenDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/markets.ts",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/TokenInfoDialog.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/CopyableDisplay.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/EthFeeEstimate.tsx",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/utils/Queue.js",[],"/Users/onyejivictor/Documents/code/cope/bulk-spl-token-dist/src/components/MultiTokenSender.jsx",["321","322","323","324","325","326","327","328","329","330","331","332","333","334","335"],{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","severity":1,"message":"341","line":29,"column":9,"nodeType":"342","messageId":"343","endLine":29,"endColumn":22},{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","severity":1,"message":"344","line":6,"column":3,"nodeType":"342","messageId":"343","endLine":6,"endColumn":13},{"ruleId":"340","severity":1,"message":"345","line":21,"column":3,"nodeType":"342","messageId":"343","endLine":21,"endColumn":34},{"ruleId":"340","severity":1,"message":"346","line":22,"column":3,"nodeType":"342","messageId":"343","endLine":22,"endColumn":17},{"ruleId":"340","severity":1,"message":"347","line":55,"column":3,"nodeType":"342","messageId":"343","endLine":55,"endColumn":22},{"ruleId":"340","severity":1,"message":"348","line":56,"column":3,"nodeType":"342","messageId":"343","endLine":56,"endColumn":20},{"ruleId":"340","severity":1,"message":"349","line":1,"column":27,"nodeType":"342","messageId":"343","endLine":1,"endColumn":34},{"ruleId":"340","severity":1,"message":"350","line":1,"column":36,"nodeType":"342","messageId":"343","endLine":1,"endColumn":47},{"ruleId":"340","severity":1,"message":"351","line":1,"column":49,"nodeType":"342","messageId":"343","endLine":1,"endColumn":58},{"ruleId":"340","severity":1,"message":"352","line":3,"column":3,"nodeType":"342","messageId":"343","endLine":3,"endColumn":26},{"ruleId":"340","severity":1,"message":"353","line":9,"column":10,"nodeType":"342","messageId":"343","endLine":9,"endColumn":17},{"ruleId":"340","severity":1,"message":"354","line":10,"column":10,"nodeType":"342","messageId":"343","endLine":10,"endColumn":27},{"ruleId":"340","severity":1,"message":"355","line":16,"column":10,"nodeType":"342","messageId":"343","endLine":16,"endColumn":33},{"ruleId":"340","severity":1,"message":"356","line":17,"column":27,"nodeType":"342","messageId":"343","endLine":17,"endColumn":32},{"ruleId":"340","severity":1,"message":"357","line":22,"column":9,"nodeType":"342","messageId":"343","endLine":22,"endColumn":24},{"ruleId":"340","severity":1,"message":"358","line":25,"column":10,"nodeType":"342","messageId":"343","endLine":25,"endColumn":25},{"ruleId":"340","severity":1,"message":"359","line":31,"column":12,"nodeType":"342","messageId":"343","endLine":31,"endColumn":26},{"ruleId":"340","severity":1,"message":"349","line":1,"column":27,"nodeType":"342","messageId":"343","endLine":1,"endColumn":34},{"ruleId":"340","severity":1,"message":"350","line":1,"column":36,"nodeType":"342","messageId":"343","endLine":1,"endColumn":47},{"ruleId":"340","severity":1,"message":"360","line":6,"column":11,"nodeType":"342","messageId":"343","endLine":6,"endColumn":18},{"ruleId":"340","severity":1,"message":"361","line":7,"column":12,"nodeType":"342","messageId":"343","endLine":7,"endColumn":26},{"ruleId":"340","severity":1,"message":"362","line":7,"column":28,"nodeType":"342","messageId":"343","endLine":7,"endColumn":43},{"ruleId":"363","severity":1,"message":"364","line":21,"column":50,"nodeType":"365","messageId":"366","endLine":21,"endColumn":52},{"ruleId":"340","severity":1,"message":"367","line":93,"column":14,"nodeType":"342","messageId":"343","endLine":93,"endColumn":34},{"ruleId":"340","severity":1,"message":"351","line":1,"column":17,"nodeType":"342","messageId":"343","endLine":1,"endColumn":26},{"ruleId":"340","severity":1,"message":"368","line":8,"column":10,"nodeType":"342","messageId":"343","endLine":8,"endColumn":19},{"ruleId":"340","severity":1,"message":"354","line":9,"column":10,"nodeType":"342","messageId":"343","endLine":9,"endColumn":27},{"ruleId":"340","severity":1,"message":"369","line":10,"column":8,"nodeType":"342","messageId":"343","endLine":10,"endColumn":22},{"ruleId":"340","severity":1,"message":"370","line":11,"column":10,"nodeType":"342","messageId":"343","endLine":11,"endColumn":22},{"ruleId":"340","severity":1,"message":"371","line":12,"column":10,"nodeType":"342","messageId":"343","endLine":12,"endColumn":24},{"ruleId":"340","severity":1,"message":"372","line":12,"column":26,"nodeType":"342","messageId":"343","endLine":12,"endColumn":39},{"ruleId":"340","severity":1,"message":"373","line":13,"column":10,"nodeType":"342","messageId":"343","endLine":13,"endColumn":25},{"ruleId":"340","severity":1,"message":"374","line":14,"column":8,"nodeType":"342","messageId":"343","endLine":14,"endColumn":12},{"ruleId":"340","severity":1,"message":"375","line":15,"column":8,"nodeType":"342","messageId":"343","endLine":15,"endColumn":11},{"ruleId":"340","severity":1,"message":"376","line":16,"column":8,"nodeType":"342","messageId":"343","endLine":16,"endColumn":25},{"ruleId":"340","severity":1,"message":"377","line":18,"column":3,"nodeType":"342","messageId":"343","endLine":18,"endColumn":26},{"ruleId":"340","severity":1,"message":"378","line":19,"column":3,"nodeType":"342","messageId":"343","endLine":19,"endColumn":18},{"ruleId":"340","severity":1,"message":"379","line":21,"column":3,"nodeType":"342","messageId":"343","endLine":21,"endColumn":14},{"ruleId":"340","severity":1,"message":"380","line":25,"column":5,"nodeType":"342","messageId":"343","endLine":25,"endColumn":19},{"ruleId":"340","severity":1,"message":"381","line":28,"column":10,"nodeType":"342","messageId":"343","endLine":28,"endColumn":23},{"ruleId":"340","severity":1,"message":"382","line":30,"column":19,"nodeType":"342","messageId":"343","endLine":30,"endColumn":35},{"ruleId":"340","severity":1,"message":"341","line":36,"column":11,"nodeType":"342","messageId":"343","endLine":36,"endColumn":24},{"ruleId":"340","severity":1,"message":"383","line":37,"column":12,"nodeType":"342","messageId":"343","endLine":37,"endColumn":15},{"ruleId":"340","severity":1,"message":"384","line":37,"column":17,"nodeType":"342","messageId":"343","endLine":37,"endColumn":23},{"ruleId":"340","severity":1,"message":"385","line":41,"column":22,"nodeType":"342","messageId":"343","endLine":41,"endColumn":33},{"ruleId":"340","severity":1,"message":"386","line":42,"column":29,"nodeType":"342","messageId":"343","endLine":42,"endColumn":36},{"ruleId":"340","severity":1,"message":"387","line":48,"column":11,"nodeType":"342","messageId":"343","endLine":48,"endColumn":21},{"ruleId":"340","severity":1,"message":"354","line":10,"column":10,"nodeType":"342","messageId":"343","endLine":10,"endColumn":27},{"ruleId":"340","severity":1,"message":"388","line":41,"column":7,"nodeType":"342","messageId":"343","endLine":41,"endColumn":14},{"ruleId":"340","severity":1,"message":"389","line":197,"column":10,"nodeType":"342","messageId":"343","endLine":197,"endColumn":18},{"ruleId":"340","severity":1,"message":"390","line":197,"column":20,"nodeType":"342","messageId":"343","endLine":197,"endColumn":31},{"ruleId":"340","severity":1,"message":"391","line":198,"column":20,"nodeType":"342","messageId":"343","endLine":198,"endColumn":31},{"ruleId":"340","severity":1,"message":"392","line":303,"column":18,"nodeType":"342","messageId":"343","endLine":303,"endColumn":26},{"ruleId":"393","severity":1,"message":"394","line":334,"column":13,"nodeType":"395","endLine":387,"endColumn":4},{"ruleId":"393","severity":1,"message":"396","line":387,"column":6,"nodeType":"397","endLine":387,"endColumn":18,"suggestions":"398"},{"ruleId":"340","severity":1,"message":"399","line":790,"column":10,"nodeType":"342","messageId":"343","endLine":790,"endColumn":32},{"ruleId":"340","severity":1,"message":"400","line":5,"column":10,"nodeType":"342","messageId":"343","endLine":5,"endColumn":20},{"ruleId":"340","severity":1,"message":"381","line":6,"column":29,"nodeType":"342","messageId":"343","endLine":6,"endColumn":42},{"ruleId":"340","severity":1,"message":"401","line":9,"column":8,"nodeType":"342","messageId":"343","endLine":9,"endColumn":9},{"ruleId":"340","severity":1,"message":"402","line":11,"column":10,"nodeType":"342","messageId":"343","endLine":11,"endColumn":22},{"ruleId":"340","severity":1,"message":"403","line":12,"column":10,"nodeType":"342","messageId":"343","endLine":12,"endColumn":24},{"ruleId":"340","severity":1,"message":"404","line":13,"column":10,"nodeType":"342","messageId":"343","endLine":13,"endColumn":17},{"ruleId":"340","severity":1,"message":"386","line":20,"column":27,"nodeType":"342","messageId":"343","endLine":20,"endColumn":34},{"ruleId":"340","severity":1,"message":"405","line":22,"column":17,"nodeType":"342","messageId":"343","endLine":22,"endColumn":25},{"ruleId":"340","severity":1,"message":"406","line":96,"column":9,"nodeType":"342","messageId":"343","endLine":96,"endColumn":19},{"ruleId":"340","severity":1,"message":"407","line":99,"column":11,"nodeType":"342","messageId":"343","endLine":99,"endColumn":19},{"ruleId":"340","severity":1,"message":"408","line":99,"column":21,"nodeType":"342","messageId":"343","endLine":99,"endColumn":32},{"ruleId":"393","severity":1,"message":"409","line":106,"column":6,"nodeType":"397","endLine":106,"endColumn":12,"suggestions":"410"},{"ruleId":"411","severity":1,"message":"412","line":122,"column":22,"nodeType":"395","messageId":"413","endLine":122,"endColumn":24},{"ruleId":"340","severity":1,"message":"414","line":141,"column":19,"nodeType":"342","messageId":"343","endLine":141,"endColumn":24},{"ruleId":"340","severity":1,"message":"415","line":141,"column":26,"nodeType":"342","messageId":"343","endLine":141,"endColumn":32},"no-native-reassign",["416"],"no-negated-in-lhs",["417"],"no-unused-vars","'isProdNetwork' is assigned a value but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'transferBetweenSplTokenAccounts' is defined but never used.","'transferTokens' is defined but never used.","'useConnectionConfig' is defined but never used.","'ConnectionContext' is defined but never used.","'useMemo' is defined but never used.","'useCallback' is defined but never used.","'useEffect' is defined but never used.","'refreshWalletPublicKeys' is defined but never used.","'Account' is defined but never used.","'abbreviateAddress' is defined but never used.","'createAndInitializeMint' is defined but never used.","'Paper' is defined but never used.","'updateTokenName' is assigned a value but never used.","'sendTransaction' is assigned a value but never used.","'requestAirdrop' is defined but never used.","'spacing' is assigned a value but never used.","'errorAddresses' is assigned a value but never used.","'setErrorAddress' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'updateErrorLogViewer' is defined but never used.","'PublicKey' is defined but never used.","'InputAdornment' is defined but never used.","'useCallAsync' is defined but never used.","'swapApiRequest' is defined but never used.","'useSwapApiGet' is defined but never used.","'showSwapAddress' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'DialogContentText' is defined but never used.","'ConnectToMetamaskButton' is defined but never used.","'getErc20Balance' is defined but never used.","'withdrawEth' is defined but never used.","'useBalanceInfo' is defined but never used.","'useConnection' is defined but never used.","'LAMPORTS_PER_SOL' is defined but never used.","'tab' is assigned a value but never used.","'setTab' is assigned a value but never used.","'setDecimals' is assigned a value but never used.","'sending' is assigned a value but never used.","'ethAccount' is assigned a value but never used.","'timeout' is assigned a value but never used.","'splitCsv' is assigned a value but never used.","'setSplitCsv' is assigned a value but never used.","'setCsvIndex' is assigned a value but never used.","'bulkSend' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'csv', 'csvIndex', and 'sendTransactionAuto'. Either include them or remove the dependency array.","ArrayExpression",["418"],"'EthWithdrawalCompleter' is defined but never used.","'Connection' is defined but never used.","'_' is defined but never used.","'getTokenInfo' is defined but never used.","'WalletGiftcard' is defined but never used.","'resolve' is defined but never used.","'setItems' is assigned a value but never used.","'tokenInfos' is assigned a value but never used.","'endpoint' is assigned a value but never used.","'setEndpoint' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadToQueue'. Either include it or remove the dependency array.",["419"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'owner' is assigned a value but never used.","'amount' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"420","fix":"421"},{"desc":"422","fix":"423"},"Update the dependencies array to be: [csv, csv.length, csvIndex, sendTransactionAuto]",{"range":"424","text":"425"},"Update the dependencies array to be: [data, loadToQueue]",{"range":"426","text":"427"},[12102,12114],"[csv, csv.length, csvIndex, sendTransactionAuto]",[3371,3377],"[data, loadToQueue]"]